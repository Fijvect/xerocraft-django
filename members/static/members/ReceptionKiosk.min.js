// Generated by Elm

(function() {
'use strict';

function F2(fun)
{
  function wrapper(a) { return function(b) { return fun(a,b); }; }
  wrapper.arity = 2;
  wrapper.func = fun;
  return wrapper;
}

function F3(fun)
{
  function wrapper(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  }
  wrapper.arity = 3;
  wrapper.func = fun;
  return wrapper;
}

function F4(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  }
  wrapper.arity = 4;
  wrapper.func = fun;
  return wrapper;
}

function F5(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  }
  wrapper.arity = 5;
  wrapper.func = fun;
  return wrapper;
}

function F6(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  }
  wrapper.arity = 6;
  wrapper.func = fun;
  return wrapper;
}

function F7(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  }
  wrapper.arity = 7;
  wrapper.func = fun;
  return wrapper;
}

function F8(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  }
  wrapper.arity = 8;
  wrapper.func = fun;
  return wrapper;
}

function F9(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  }
  wrapper.arity = 9;
  wrapper.func = fun;
  return wrapper;
}

function A2(fun, a, b)
{
  return fun.arity === 2
    ? fun.func(a, b)
    : fun(a)(b);
}
function A3(fun, a, b, c)
{
  return fun.arity === 3
    ? fun.func(a, b, c)
    : fun(a)(b)(c);
}
function A4(fun, a, b, c, d)
{
  return fun.arity === 4
    ? fun.func(a, b, c, d)
    : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e)
{
  return fun.arity === 5
    ? fun.func(a, b, c, d, e)
    : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f)
{
  return fun.arity === 6
    ? fun.func(a, b, c, d, e, f)
    : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g)
{
  return fun.arity === 7
    ? fun.func(a, b, c, d, e, f, g)
    : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h)
{
  return fun.arity === 8
    ? fun.func(a, b, c, d, e, f, g, h)
    : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i)
{
  return fun.arity === 9
    ? fun.func(a, b, c, d, e, f, g, h, i)
    : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

//import Native.List //

var _elm_lang$core$Native_Array = function() {

// A RRB-Tree has two distinct data types.
// Leaf -> "height"  is always 0
//         "table"   is an array of elements
// Node -> "height"  is always greater than 0
//         "table"   is an array of child nodes
//         "lengths" is an array of accumulated lengths of the child nodes

// M is the maximal table size. 32 seems fast. E is the allowed increase
// of search steps when concatting to find an index. Lower values will
// decrease balancing, but will increase search steps.
var M = 32;
var E = 2;

// An empty array.
var empty = {
	ctor: '_Array',
	height: 0,
	table: []
};


function get(i, array)
{
	if (i < 0 || i >= length(array))
	{
		throw new Error(
			'Index ' + i + ' is out of range. Check the length of ' +
			'your array first or use getMaybe or getWithDefault.');
	}
	return unsafeGet(i, array);
}


function unsafeGet(i, array)
{
	for (var x = array.height; x > 0; x--)
	{
		var slot = i >> (x * 5);
		while (array.lengths[slot] <= i)
		{
			slot++;
		}
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array = array.table[slot];
	}
	return array.table[i];
}


// Sets the value at the index i. Only the nodes leading to i will get
// copied and updated.
function set(i, item, array)
{
	if (i < 0 || length(array) <= i)
	{
		return array;
	}
	return unsafeSet(i, item, array);
}


function unsafeSet(i, item, array)
{
	array = nodeCopy(array);

	if (array.height === 0)
	{
		array.table[i] = item;
	}
	else
	{
		var slot = getSlot(i, array);
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array.table[slot] = unsafeSet(i, item, array.table[slot]);
	}
	return array;
}


function initialize(len, f)
{
	if (len <= 0)
	{
		return empty;
	}
	var h = Math.floor( Math.log(len) / Math.log(M) );
	return initialize_(f, h, 0, len);
}

function initialize_(f, h, from, to)
{
	if (h === 0)
	{
		var table = new Array((to - from) % (M + 1));
		for (var i = 0; i < table.length; i++)
		{
		  table[i] = f(from + i);
		}
		return {
			ctor: '_Array',
			height: 0,
			table: table
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

function fromList(list)
{
	if (list.ctor === '[]')
	{
		return empty;
	}

	// Allocate M sized blocks (table) and write list elements to it.
	var table = new Array(M);
	var nodes = [];
	var i = 0;

	while (list.ctor !== '[]')
	{
		table[i] = list._0;
		list = list._1;
		i++;

		// table is full, so we can push a leaf containing it into the
		// next node.
		if (i === M)
		{
			var leaf = {
				ctor: '_Array',
				height: 0,
				table: table
			};
			fromListPush(leaf, nodes);
			table = new Array(M);
			i = 0;
		}
	}

	// Maybe there is something left on the table.
	if (i > 0)
	{
		var leaf = {
			ctor: '_Array',
			height: 0,
			table: table.splice(0, i)
		};
		fromListPush(leaf, nodes);
	}

	// Go through all of the nodes and eventually push them into higher nodes.
	for (var h = 0; h < nodes.length - 1; h++)
	{
		if (nodes[h].table.length > 0)
		{
			fromListPush(nodes[h], nodes);
		}
	}

	var head = nodes[nodes.length - 1];
	if (head.height > 0 && head.table.length === 1)
	{
		return head.table[0];
	}
	else
	{
		return head;
	}
}

// Push a node into a higher node as a child.
function fromListPush(toPush, nodes)
{
	var h = toPush.height;

	// Maybe the node on this height does not exist.
	if (nodes.length === h)
	{
		var node = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
		nodes.push(node);
	}

	nodes[h].table.push(toPush);
	var len = length(toPush);
	if (nodes[h].lengths.length > 0)
	{
		len += nodes[h].lengths[nodes[h].lengths.length - 1];
	}
	nodes[h].lengths.push(len);

	if (nodes[h].table.length === M)
	{
		fromListPush(nodes[h], nodes);
		nodes[h] = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
	}
}

// Pushes an item via push_ to the bottom right of a tree.
function push(item, a)
{
	var pushed = push_(item, a);
	if (pushed !== null)
	{
		return pushed;
	}

	var newTree = create(item, a.height);
	return siblise(a, newTree);
}

// Recursively tries to push an item to the bottom-right most
// tree possible. If there is no space left for the item,
// null will be returned.
function push_(item, a)
{
	// Handle resursion stop at leaf level.
	if (a.height === 0)
	{
		if (a.table.length < M)
		{
			var newA = {
				ctor: '_Array',
				height: 0,
				table: a.table.slice()
			};
			newA.table.push(item);
			return newA;
		}
		else
		{
		  return null;
		}
	}

	// Recursively push
	var pushed = push_(item, botRight(a));

	// There was space in the bottom right tree, so the slot will
	// be updated.
	if (pushed !== null)
	{
		var newA = nodeCopy(a);
		newA.table[newA.table.length - 1] = pushed;
		newA.lengths[newA.lengths.length - 1]++;
		return newA;
	}

	// When there was no space left, check if there is space left
	// for a new slot with a tree which contains only the item
	// at the bottom.
	if (a.table.length < M)
	{
		var newSlot = create(item, a.height - 1);
		var newA = nodeCopy(a);
		newA.table.push(newSlot);
		newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
		return newA;
	}
	else
	{
		return null;
	}
}

// Converts an array into a list of elements.
function toList(a)
{
	return toList_(_elm_lang$core$Native_List.Nil, a);
}

function toList_(list, a)
{
	for (var i = a.table.length - 1; i >= 0; i--)
	{
		list =
			a.height === 0
				? _elm_lang$core$Native_List.Cons(a.table[i], list)
				: toList_(list, a.table[i]);
	}
	return list;
}

// Maps a function over the elements of an array.
function map(f, a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? f(a.table[i])
				: map(f, a.table[i]);
	}
	return newA;
}

// Maps a function over the elements with their index as first argument.
function indexedMap(f, a)
{
	return indexedMap_(f, a, 0);
}

function indexedMap_(f, a, from)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? A2(f, from + i, a.table[i])
				: indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);
	}
	return newA;
}

function foldl(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = foldl(f, b, a.table[i]);
		}
	}
	return b;
}

function foldr(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = a.table.length; i--; )
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = a.table.length; i--; )
		{
			b = foldr(f, b, a.table[i]);
		}
	}
	return b;
}

// TODO: currently, it slices the right, then the left. This can be
// optimized.
function slice(from, to, a)
{
	if (from < 0)
	{
		from += length(a);
	}
	if (to < 0)
	{
		to += length(a);
	}
	return sliceLeft(from, sliceRight(to, a));
}

function sliceRight(to, a)
{
	if (to === length(a))
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(0, to);
		return newA;
	}

	// Slice the right recursively.
	var right = getSlot(to, a);
	var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (right === 0)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(0, right),
		lengths: a.lengths.slice(0, right)
	};
	if (sliced.table.length > 0)
	{
		newA.table[right] = sliced;
		newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
	}
	return newA;
}

function sliceLeft(from, a)
{
	if (from === 0)
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(from, a.table.length + 1);
		return newA;
	}

	// Slice the left recursively.
	var left = getSlot(from, a);
	var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (left === a.table.length - 1)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(left, a.table.length + 1),
		lengths: new Array(a.table.length - left)
	};
	newA.table[0] = sliced;
	var len = 0;
	for (var i = 0; i < newA.table.length; i++)
	{
		len += length(newA.table[i]);
		newA.lengths[i] = len;
	}

	return newA;
}

// Appends two trees.
function append(a,b)
{
	if (a.table.length === 0)
	{
		return b;
	}
	if (b.table.length === 0)
	{
		return a;
	}

	var c = append_(a, b);

	// Check if both nodes can be crunshed together.
	if (c[0].table.length + c[1].table.length <= M)
	{
		if (c[0].table.length === 0)
		{
			return c[1];
		}
		if (c[1].table.length === 0)
		{
			return c[0];
		}

		// Adjust .table and .lengths
		c[0].table = c[0].table.concat(c[1].table);
		if (c[0].height > 0)
		{
			var len = length(c[0]);
			for (var i = 0; i < c[1].lengths.length; i++)
			{
				c[1].lengths[i] += len;
			}
			c[0].lengths = c[0].lengths.concat(c[1].lengths);
		}

		return c[0];
	}

	if (c[0].height > 0)
	{
		var toRemove = calcToRemove(a, b);
		if (toRemove > E)
		{
			c = shuffle(c[0], c[1], toRemove);
		}
	}

	return siblise(c[0], c[1]);
}

// Returns an array of two nodes; right and left. One node _may_ be empty.
function append_(a, b)
{
	if (a.height === 0 && b.height === 0)
	{
		return [a, b];
	}

	if (a.height !== 1 || b.height !== 1)
	{
		if (a.height === b.height)
		{
			a = nodeCopy(a);
			b = nodeCopy(b);
			var appended = append_(botRight(a), botLeft(b));

			insertRight(a, appended[1]);
			insertLeft(b, appended[0]);
		}
		else if (a.height > b.height)
		{
			a = nodeCopy(a);
			var appended = append_(botRight(a), b);

			insertRight(a, appended[0]);
			b = parentise(appended[1], appended[1].height + 1);
		}
		else
		{
			b = nodeCopy(b);
			var appended = append_(a, botLeft(b));

			var left = appended[0].table.length === 0 ? 0 : 1;
			var right = left === 0 ? 1 : 0;
			insertLeft(b, appended[left]);
			a = parentise(appended[right], appended[right].height + 1);
		}
	}

	// Check if balancing is needed and return based on that.
	if (a.table.length === 0 || b.table.length === 0)
	{
		return [a, b];
	}

	var toRemove = calcToRemove(a, b);
	if (toRemove <= E)
	{
		return [a, b];
	}
	return shuffle(a, b, toRemove);
}

// Helperfunctions for append_. Replaces a child node at the side of the parent.
function insertRight(parent, node)
{
	var index = parent.table.length - 1;
	parent.table[index] = node;
	parent.lengths[index] = length(node);
	parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
}

function insertLeft(parent, node)
{
	if (node.table.length > 0)
	{
		parent.table[0] = node;
		parent.lengths[0] = length(node);

		var len = length(parent.table[0]);
		for (var i = 1; i < parent.lengths.length; i++)
		{
			len += length(parent.table[i]);
			parent.lengths[i] = len;
		}
	}
	else
	{
		parent.table.shift();
		for (var i = 1; i < parent.lengths.length; i++)
		{
			parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
		}
		parent.lengths.shift();
	}
}

// Returns the extra search steps for E. Refer to the paper.
function calcToRemove(a, b)
{
	var subLengths = 0;
	for (var i = 0; i < a.table.length; i++)
	{
		subLengths += a.table[i].table.length;
	}
	for (var i = 0; i < b.table.length; i++)
	{
		subLengths += b.table[i].table.length;
	}

	var toRemove = a.table.length + b.table.length;
	return toRemove - (Math.floor((subLengths - 1) / M) + 1);
}

// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
function get2(a, b, index)
{
	return index < a.length
		? a[index]
		: b[index - a.length];
}

function set2(a, b, index, value)
{
	if (index < a.length)
	{
		a[index] = value;
	}
	else
	{
		b[index - a.length] = value;
	}
}

function saveSlot(a, b, index, slot)
{
	set2(a.table, b.table, index, slot);

	var l = (index === 0 || index === a.lengths.length)
		? 0
		: get2(a.lengths, a.lengths, index - 1);

	set2(a.lengths, b.lengths, index, l + length(slot));
}

// Creates a node or leaf with a given length at their arrays for perfomance.
// Is only used by shuffle.
function createNode(h, length)
{
	if (length < 0)
	{
		length = 0;
	}
	var a = {
		ctor: '_Array',
		height: h,
		table: new Array(length)
	};
	if (h > 0)
	{
		a.lengths = new Array(length);
	}
	return a;
}

// Returns an array of two balanced nodes.
function shuffle(a, b, toRemove)
{
	var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
	var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

	// Skip the slots with size M. More precise: copy the slot references
	// to the new node
	var read = 0;
	while (get2(a.table, b.table, read).table.length % M === 0)
	{
		set2(newA.table, newB.table, read, get2(a.table, b.table, read));
		set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
		read++;
	}

	// Pulling items from left to right, caching in a slot before writing
	// it into the new nodes.
	var write = read;
	var slot = new createNode(a.height - 1, 0);
	var from = 0;

	// If the current slot is still containing data, then there will be at
	// least one more write, so we do not break this loop yet.
	while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
	{
		// Find out the max possible items for copying.
		var source = get2(a.table, b.table, read);
		var to = Math.min(M - slot.table.length, source.table.length);

		// Copy and adjust size table.
		slot.table = slot.table.concat(source.table.slice(from, to));
		if (slot.height > 0)
		{
			var len = slot.lengths.length;
			for (var i = len; i < len + to - from; i++)
			{
				slot.lengths[i] = length(slot.table[i]);
				slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
			}
		}

		from += to;

		// Only proceed to next slots[i] if the current one was
		// fully copied.
		if (source.table.length <= to)
		{
			read++; from = 0;
		}

		// Only create a new slot if the current one is filled up.
		if (slot.table.length === M)
		{
			saveSlot(newA, newB, write, slot);
			slot = createNode(a.height - 1, 0);
			write++;
		}
	}

	// Cleanup after the loop. Copy the last slot into the new nodes.
	if (slot.table.length > 0)
	{
		saveSlot(newA, newB, write, slot);
		write++;
	}

	// Shift the untouched slots to the left
	while (read < a.table.length + b.table.length )
	{
		saveSlot(newA, newB, write, get2(a.table, b.table, read));
		read++;
		write++;
	}

	return [newA, newB];
}

// Navigation functions
function botRight(a)
{
	return a.table[a.table.length - 1];
}
function botLeft(a)
{
	return a.table[0];
}

// Copies a node for updating. Note that you should not use this if
// only updating only one of "table" or "lengths" for performance reasons.
function nodeCopy(a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice()
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths.slice();
	}
	return newA;
}

// Returns how many items are in the tree.
function length(array)
{
	if (array.height === 0)
	{
		return array.table.length;
	}
	else
	{
		return array.lengths[array.lengths.length - 1];
	}
}

// Calculates in which slot of "table" the item probably is, then
// find the exact slot via forward searching in  "lengths". Returns the index.
function getSlot(i, a)
{
	var slot = i >> (5 * a.height);
	while (a.lengths[slot] <= i)
	{
		slot++;
	}
	return slot;
}

// Recursively creates a tree with a given height containing
// only the given item.
function create(item, h)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: [item]
		};
	}
	return {
		ctor: '_Array',
		height: h,
		table: [create(item, h - 1)],
		lengths: [1]
	};
}

// Recursively creates a tree that contains the given tree.
function parentise(tree, h)
{
	if (h === tree.height)
	{
		return tree;
	}

	return {
		ctor: '_Array',
		height: h,
		table: [parentise(tree, h - 1)],
		lengths: [length(tree)]
	};
}

// Emphasizes blood brotherhood beneath two trees.
function siblise(a, b)
{
	return {
		ctor: '_Array',
		height: a.height + 1,
		table: [a, b],
		lengths: [length(a), length(a) + length(b)]
	};
}

function toJSArray(a)
{
	var jsArray = new Array(length(a));
	toJSArray_(jsArray, 0, a);
	return jsArray;
}

function toJSArray_(jsArray, i, a)
{
	for (var t = 0; t < a.table.length; t++)
	{
		if (a.height === 0)
		{
			jsArray[i + t] = a.table[t];
		}
		else
		{
			var inc = t === 0 ? 0 : a.lengths[t - 1];
			toJSArray_(jsArray, i + inc, a.table[t]);
		}
	}
}

function fromJSArray(jsArray)
{
	if (jsArray.length === 0)
	{
		return empty;
	}
	var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
	return fromJSArray_(jsArray, h, 0, jsArray.length);
}

function fromJSArray_(jsArray, h, from, to)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: jsArray.slice(from, to)
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

return {
	empty: empty,
	fromList: fromList,
	toList: toList,
	initialize: F2(initialize),
	append: F2(append),
	push: F2(push),
	slice: F3(slice),
	get: F2(get),
	set: F3(set),
	map: F2(map),
	indexedMap: F2(indexedMap),
	foldl: F3(foldl),
	foldr: F3(foldr),
	length: length,

	toJSArray: toJSArray,
	fromJSArray: fromJSArray
};

}();
//import Native.Utils //

var _elm_lang$core$Native_Basics = function() {

function div(a, b)
{
	return (a / b) | 0;
}
function rem(a, b)
{
	return a % b;
}
function mod(a, b)
{
	if (b === 0)
	{
		throw new Error('Cannot perform mod 0. Division by zero error.');
	}
	var r = a % b;
	var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r + b) : -mod(-a, -b));

	return m === b ? 0 : m;
}
function logBase(base, n)
{
	return Math.log(n) / Math.log(base);
}
function negate(n)
{
	return -n;
}
function abs(n)
{
	return n < 0 ? -n : n;
}

function min(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;
}
function max(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;
}
function clamp(lo, hi, n)
{
	return _elm_lang$core$Native_Utils.cmp(n, lo) < 0
		? lo
		: _elm_lang$core$Native_Utils.cmp(n, hi) > 0
			? hi
			: n;
}

var ord = ['LT', 'EQ', 'GT'];

function compare(x, y)
{
	return { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };
}

function xor(a, b)
{
	return a !== b;
}
function not(b)
{
	return !b;
}
function isInfinite(n)
{
	return n === Infinity || n === -Infinity;
}

function truncate(n)
{
	return n | 0;
}

function degrees(d)
{
	return d * Math.PI / 180;
}
function turns(t)
{
	return 2 * Math.PI * t;
}
function fromPolar(point)
{
	var r = point._0;
	var t = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
}
function toPolar(point)
{
	var x = point._0;
	var y = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));
}

return {
	div: F2(div),
	rem: F2(rem),
	mod: F2(mod),

	pi: Math.PI,
	e: Math.E,
	cos: Math.cos,
	sin: Math.sin,
	tan: Math.tan,
	acos: Math.acos,
	asin: Math.asin,
	atan: Math.atan,
	atan2: F2(Math.atan2),

	degrees: degrees,
	turns: turns,
	fromPolar: fromPolar,
	toPolar: toPolar,

	sqrt: Math.sqrt,
	logBase: F2(logBase),
	negate: negate,
	abs: abs,
	min: F2(min),
	max: F2(max),
	clamp: F3(clamp),
	compare: F2(compare),

	xor: F2(xor),
	not: not,

	truncate: truncate,
	ceiling: Math.ceil,
	floor: Math.floor,
	round: Math.round,
	toFloat: function(x) { return x; },
	isNaN: isNaN,
	isInfinite: isInfinite
};

}();
//import //

var _elm_lang$core$Native_Utils = function() {

// COMPARISONS

function eq(x, y)
{
	var stack = [];
	var isEqual = eqHelp(x, y, 0, stack);
	var pair;
	while (isEqual && (pair = stack.pop()))
	{
		isEqual = eqHelp(pair.x, pair.y, 0, stack);
	}
	return isEqual;
}


function eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push({ x: x, y: y });
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object')
	{
		if (typeof x === 'function')
		{
			throw new Error(
				'Trying to use `(==)` on functions. There is no way to know if functions are "the same" in the Elm sense.'
				+ ' Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#=='
				+ ' which describes why it is this way and what the better version will look like.'
			);
		}
		return false;
	}

	if (x === null || y === null)
	{
		return false
	}

	if (x instanceof Date)
	{
		return x.getTime() === y.getTime();
	}

	if (!('ctor' in x))
	{
		for (var key in x)
		{
			if (!eqHelp(x[key], y[key], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	// convert Dicts and Sets to lists
	if (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin')
	{
		x = _elm_lang$core$Dict$toList(x);
		y = _elm_lang$core$Dict$toList(y);
	}
	if (x.ctor === 'Set_elm_builtin')
	{
		x = _elm_lang$core$Set$toList(x);
		y = _elm_lang$core$Set$toList(y);
	}

	// check if lists are equal without recursion
	if (x.ctor === '::')
	{
		var a = x;
		var b = y;
		while (a.ctor === '::' && b.ctor === '::')
		{
			if (!eqHelp(a._0, b._0, depth + 1, stack))
			{
				return false;
			}
			a = a._1;
			b = b._1;
		}
		return a.ctor === b.ctor;
	}

	// check if Arrays are equal
	if (x.ctor === '_Array')
	{
		var xs = _elm_lang$core$Native_Array.toJSArray(x);
		var ys = _elm_lang$core$Native_Array.toJSArray(y);
		if (xs.length !== ys.length)
		{
			return false;
		}
		for (var i = 0; i < xs.length; i++)
		{
			if (!eqHelp(xs[i], ys[i], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	if (!eqHelp(x.ctor, y.ctor, depth + 1, stack))
	{
		return false;
	}

	for (var key in x)
	{
		if (!eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

var LT = -1, EQ = 0, GT = 1;

function cmp(x, y)
{
	if (typeof x !== 'object')
	{
		return x === y ? EQ : x < y ? LT : GT;
	}

	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? EQ : a < b ? LT : GT;
	}

	if (x.ctor === '::' || x.ctor === '[]')
	{
		while (x.ctor === '::' && y.ctor === '::')
		{
			var ord = cmp(x._0, y._0);
			if (ord !== EQ)
			{
				return ord;
			}
			x = x._1;
			y = y._1;
		}
		return x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;
	}

	if (x.ctor.slice(0, 6) === '_Tuple')
	{
		var ord;
		var n = x.ctor.slice(6) - 0;
		var err = 'cannot compare tuples with more than 6 elements.';
		if (n === 0) return EQ;
		if (n >= 1) { ord = cmp(x._0, y._0); if (ord !== EQ) return ord;
		if (n >= 2) { ord = cmp(x._1, y._1); if (ord !== EQ) return ord;
		if (n >= 3) { ord = cmp(x._2, y._2); if (ord !== EQ) return ord;
		if (n >= 4) { ord = cmp(x._3, y._3); if (ord !== EQ) return ord;
		if (n >= 5) { ord = cmp(x._4, y._4); if (ord !== EQ) return ord;
		if (n >= 6) { ord = cmp(x._5, y._5); if (ord !== EQ) return ord;
		if (n >= 7) throw new Error('Comparison error: ' + err); } } } } } }
		return EQ;
	}

	throw new Error(
		'Comparison error: comparison is only defined on ints, '
		+ 'floats, times, chars, strings, lists of comparable values, '
		+ 'and tuples of comparable values.'
	);
}


// COMMON VALUES

var Tuple0 = {
	ctor: '_Tuple0'
};

function Tuple2(x, y)
{
	return {
		ctor: '_Tuple2',
		_0: x,
		_1: y
	};
}

function chr(c)
{
	return new String(c);
}


// GUID

var count = 0;
function guid(_)
{
	return count++;
}


// RECORDS

function update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


//// LIST STUFF ////

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return {
		ctor: '::',
		_0: hd,
		_1: tl
	};
}

function append(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (xs.ctor === '[]')
	{
		return ys;
	}
	var root = Cons(xs._0, Nil);
	var curr = root;
	xs = xs._1;
	while (xs.ctor !== '[]')
	{
		curr._1 = Cons(xs._0, Nil);
		xs = xs._1;
		curr = curr._1;
	}
	curr._1 = ys;
	return root;
}


// CRASHES

function crash(moduleName, region)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function crashCase(moduleName, region, value)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '`\n\n'
			+ 'This was caused by the `case` expression ' + regionToString(region) + '.\n'
			+ 'One of the branches ended with a crash and the following value got through:\n\n    ' + toString(value) + '\n\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function regionToString(region)
{
	if (region.start.line == region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'between lines ' + region.start.line + ' and ' + region.end.line;
}


// TO STRING

function toString(v)
{
	var type = typeof v;
	if (type === 'function')
	{
		return '<function>';
	}

	if (type === 'boolean')
	{
		return v ? 'True' : 'False';
	}

	if (type === 'number')
	{
		return v + '';
	}

	if (v instanceof String)
	{
		return '\'' + addSlashes(v, true) + '\'';
	}

	if (type === 'string')
	{
		return '"' + addSlashes(v, false) + '"';
	}

	if (v === null)
	{
		return 'null';
	}

	if (type === 'object' && 'ctor' in v)
	{
		var ctorStarter = v.ctor.substring(0, 5);

		if (ctorStarter === '_Tupl')
		{
			var output = [];
			for (var k in v)
			{
				if (k === 'ctor') continue;
				output.push(toString(v[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (ctorStarter === '_Task')
		{
			return '<task>'
		}

		if (v.ctor === '_Array')
		{
			var list = _elm_lang$core$Array$toList(v);
			return 'Array.fromList ' + toString(list);
		}

		if (v.ctor === '<decoder>')
		{
			return '<decoder>';
		}

		if (v.ctor === '_Process')
		{
			return '<process:' + v.id + '>';
		}

		if (v.ctor === '::')
		{
			var output = '[' + toString(v._0);
			v = v._1;
			while (v.ctor === '::')
			{
				output += ',' + toString(v._0);
				v = v._1;
			}
			return output + ']';
		}

		if (v.ctor === '[]')
		{
			return '[]';
		}

		if (v.ctor === 'Set_elm_builtin')
		{
			return 'Set.fromList ' + toString(_elm_lang$core$Set$toList(v));
		}

		if (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin')
		{
			return 'Dict.fromList ' + toString(_elm_lang$core$Dict$toList(v));
		}

		var output = '';
		for (var i in v)
		{
			if (i === 'ctor') continue;
			var str = toString(v[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return v.ctor + output;
	}

	if (type === 'object')
	{
		if (v instanceof Date)
		{
			return '<' + v.toString() + '>';
		}

		if (v.elm_web_socket)
		{
			return '<websocket>';
		}

		var output = [];
		for (var k in v)
		{
			output.push(k + ' = ' + toString(v[k]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return '<internal structure>';
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	eq: eq,
	cmp: cmp,
	Tuple0: Tuple0,
	Tuple2: Tuple2,
	chr: chr,
	update: update,
	guid: guid,

	append: F2(append),

	crash: crash,
	crashCase: crashCase,

	toString: toString
};

}();
var _elm_lang$core$Basics$never = function (_p0) {
	never:
	while (true) {
		var _p1 = _p0;
		var _v1 = _p1._0;
		_p0 = _v1;
		continue never;
	}
};
var _elm_lang$core$Basics$uncurry = F2(
	function (f, _p2) {
		var _p3 = _p2;
		return A2(f, _p3._0, _p3._1);
	});
var _elm_lang$core$Basics$curry = F3(
	function (f, a, b) {
		return f(
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _elm_lang$core$Basics$flip = F3(
	function (f, b, a) {
		return A2(f, a, b);
	});
var _elm_lang$core$Basics$always = F2(
	function (a, _p4) {
		return a;
	});
var _elm_lang$core$Basics$identity = function (x) {
	return x;
};
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<|'] = F2(
	function (f, x) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['|>'] = F2(
	function (x, f) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>>'] = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<<'] = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;
var _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;
var _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;
var _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;
var _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;
var _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;
var _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;
var _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;
var _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;
var _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;
var _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;
var _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;
var _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;
var _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;
var _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;
var _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;
var _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;
var _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;
var _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;
var _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;
var _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;
var _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;
var _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;
var _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;
var _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;
var _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;
var _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;
var _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;
var _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;
var _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;
var _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;
var _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;
var _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;
var _elm_lang$core$Basics$radians = function (t) {
	return t;
};
var _elm_lang$core$Basics$GT = {ctor: 'GT'};
var _elm_lang$core$Basics$EQ = {ctor: 'EQ'};
var _elm_lang$core$Basics$LT = {ctor: 'LT'};
var _elm_lang$core$Basics$JustOneMore = function (a) {
	return {ctor: 'JustOneMore', _0: a};
};

var _elm_lang$core$Maybe$withDefault = F2(
	function ($default, maybe) {
		var _p0 = maybe;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return $default;
		}
	});
var _elm_lang$core$Maybe$Nothing = {ctor: 'Nothing'};
var _elm_lang$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		var _p1 = maybeValue;
		if (_p1.ctor === 'Just') {
			return callback(_p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _elm_lang$core$Maybe$map = F2(
	function (f, maybe) {
		var _p2 = maybe;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		var _p3 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(func, _p3._0._0, _p3._1._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		var _p4 = {ctor: '_Tuple3', _0: ma, _1: mb, _2: mc};
		if ((((_p4.ctor === '_Tuple3') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A3(func, _p4._0._0, _p4._1._0, _p4._2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		var _p5 = {ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md};
		if (((((_p5.ctor === '_Tuple4') && (_p5._0.ctor === 'Just')) && (_p5._1.ctor === 'Just')) && (_p5._2.ctor === 'Just')) && (_p5._3.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A4(func, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map5 = F6(
	function (func, ma, mb, mc, md, me) {
		var _p6 = {ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me};
		if ((((((_p6.ctor === '_Tuple5') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) && (_p6._2.ctor === 'Just')) && (_p6._3.ctor === 'Just')) && (_p6._4.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A5(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0, _p6._4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

//import Native.Utils //

var _elm_lang$core$Native_List = function() {

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return { ctor: '::', _0: hd, _1: tl };
}

function fromArray(arr)
{
	var out = Nil;
	for (var i = arr.length; i--; )
	{
		out = Cons(arr[i], out);
	}
	return out;
}

function toArray(xs)
{
	var out = [];
	while (xs.ctor !== '[]')
	{
		out.push(xs._0);
		xs = xs._1;
	}
	return out;
}

function foldr(f, b, xs)
{
	var arr = toArray(xs);
	var acc = b;
	for (var i = arr.length; i--; )
	{
		acc = A2(f, arr[i], acc);
	}
	return acc;
}

function map2(f, xs, ys)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]')
	{
		arr.push(A2(f, xs._0, ys._0));
		xs = xs._1;
		ys = ys._1;
	}
	return fromArray(arr);
}

function map3(f, xs, ys, zs)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
	{
		arr.push(A3(f, xs._0, ys._0, zs._0));
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map4(f, ws, xs, ys, zs)
{
	var arr = [];
	while (   ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map5(f, vs, ws, xs, ys, zs)
{
	var arr = [];
	while (   vs.ctor !== '[]'
		   && ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
		vs = vs._1;
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function sortBy(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		return _elm_lang$core$Native_Utils.cmp(f(a), f(b));
	}));
}

function sortWith(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		var ord = f(a)(b).ctor;
		return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
	}));
}

return {
	Nil: Nil,
	Cons: Cons,
	cons: F2(Cons),
	toArray: toArray,
	fromArray: fromArray,

	foldr: F3(foldr),

	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	sortBy: F2(sortBy),
	sortWith: F2(sortWith)
};

}();
var _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;
var _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;
var _elm_lang$core$List$sort = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _elm_lang$core$List$singleton = function (value) {
	return {
		ctor: '::',
		_0: value,
		_1: {ctor: '[]'}
	};
};
var _elm_lang$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p0 = list;
				if (_p0.ctor === '[]') {
					return list;
				} else {
					var _v1 = n - 1,
						_v2 = _p0._1;
					n = _v1;
					list = _v2;
					continue drop;
				}
			}
		}
	});
var _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;
var _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;
var _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;
var _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;
var _elm_lang$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p1._0)) {
					return true;
				} else {
					var _v4 = isOkay,
						_v5 = _p1._1;
					isOkay = _v4;
					list = _v5;
					continue any;
				}
			}
		}
	});
var _elm_lang$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			_elm_lang$core$List$any,
			function (_p2) {
				return !isOkay(_p2);
			},
			list);
	});
var _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;
var _elm_lang$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return acc;
			} else {
				var _v7 = func,
					_v8 = A2(func, _p3._0, acc),
					_v9 = _p3._1;
				func = _v7;
				acc = _v8;
				list = _v9;
				continue foldl;
			}
		}
	});
var _elm_lang$core$List$length = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _elm_lang$core$List$sum = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _elm_lang$core$List$product = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _elm_lang$core$List$maximum = function (list) {
	var _p5 = list;
	if (_p5.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$minimum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$member = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _elm_lang$core$List$isEmpty = function (xs) {
	var _p7 = xs;
	if (_p7.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _elm_lang$core$List$tail = function (list) {
	var _p8 = list;
	if (_p8.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p8._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$head = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};
_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;
var _elm_lang$core$List$map = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (front, back) {
				return pred(front) ? {ctor: '::', _0: front, _1: back} : back;
			});
		return A3(
			_elm_lang$core$List$foldr,
			conditionalCons,
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _p10 = f(mx);
		if (_p10.ctor === 'Just') {
			return {ctor: '::', _0: _p10._0, _1: xs};
		} else {
			return xs;
		}
	});
var _elm_lang$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$List$maybeCons(f),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$reverse = function (list) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		{ctor: '[]'},
		list);
};
var _elm_lang$core$List$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p11 = accAcc;
				if (_p11.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, x, _p11._0),
						_1: accAcc
					};
				} else {
					return {ctor: '[]'};
				}
			});
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$foldl,
				scan1,
				{
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				},
				xs));
	});
var _elm_lang$core$List$append = F2(
	function (xs, ys) {
		var _p12 = ys;
		if (_p12.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				ys,
				xs);
		}
	});
var _elm_lang$core$List$concat = function (lists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		lists);
};
var _elm_lang$core$List$concatMap = F2(
	function (f, list) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, f, list));
	});
var _elm_lang$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _p13) {
				var _p14 = _p13;
				var _p16 = _p14._0;
				var _p15 = _p14._1;
				return pred(x) ? {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: x, _1: _p16},
					_1: _p15
				} : {
					ctor: '_Tuple2',
					_0: _p16,
					_1: {ctor: '::', _0: x, _1: _p15}
				};
			});
		return A3(
			_elm_lang$core$List$foldr,
			step,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_lang$core$List$unzip = function (pairs) {
	var step = F2(
		function (_p18, _p17) {
			var _p19 = _p18;
			var _p20 = _p17;
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: _p19._0, _1: _p20._0},
				_1: {ctor: '::', _0: _p19._1, _1: _p20._1}
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		step,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _elm_lang$core$List$intersperse = F2(
	function (sep, xs) {
		var _p21 = xs;
		if (_p21.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var step = F2(
				function (x, rest) {
					return {
						ctor: '::',
						_0: sep,
						_1: {ctor: '::', _0: x, _1: rest}
					};
				});
			var spersed = A3(
				_elm_lang$core$List$foldr,
				step,
				{ctor: '[]'},
				_p21._1);
			return {ctor: '::', _0: _p21._0, _1: spersed};
		}
	});
var _elm_lang$core$List$takeReverse = F3(
	function (n, list, taken) {
		takeReverse:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return taken;
			} else {
				var _p22 = list;
				if (_p22.ctor === '[]') {
					return taken;
				} else {
					var _v23 = n - 1,
						_v24 = _p22._1,
						_v25 = {ctor: '::', _0: _p22._0, _1: taken};
					n = _v23;
					list = _v24;
					taken = _v25;
					continue takeReverse;
				}
			}
		}
	});
var _elm_lang$core$List$takeTailRec = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$takeReverse,
				n,
				list,
				{ctor: '[]'}));
	});
var _elm_lang$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return {ctor: '[]'};
		} else {
			var _p23 = {ctor: '_Tuple2', _0: n, _1: list};
			_v26_5:
			do {
				_v26_1:
				do {
					if (_p23.ctor === '_Tuple2') {
						if (_p23._1.ctor === '[]') {
							return list;
						} else {
							if (_p23._1._1.ctor === '::') {
								switch (_p23._0) {
									case 1:
										break _v26_1;
									case 2:
										return {
											ctor: '::',
											_0: _p23._1._0,
											_1: {
												ctor: '::',
												_0: _p23._1._1._0,
												_1: {ctor: '[]'}
											}
										};
									case 3:
										if (_p23._1._1._1.ctor === '::') {
											return {
												ctor: '::',
												_0: _p23._1._0,
												_1: {
													ctor: '::',
													_0: _p23._1._1._0,
													_1: {
														ctor: '::',
														_0: _p23._1._1._1._0,
														_1: {ctor: '[]'}
													}
												}
											};
										} else {
											break _v26_5;
										}
									default:
										if ((_p23._1._1._1.ctor === '::') && (_p23._1._1._1._1.ctor === '::')) {
											var _p28 = _p23._1._1._1._0;
											var _p27 = _p23._1._1._0;
											var _p26 = _p23._1._0;
											var _p25 = _p23._1._1._1._1._0;
											var _p24 = _p23._1._1._1._1._1;
											return (_elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0) ? {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A2(_elm_lang$core$List$takeTailRec, n - 4, _p24)
														}
													}
												}
											} : {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A3(_elm_lang$core$List$takeFast, ctr + 1, n - 4, _p24)
														}
													}
												}
											};
										} else {
											break _v26_5;
										}
								}
							} else {
								if (_p23._0 === 1) {
									break _v26_1;
								} else {
									break _v26_5;
								}
							}
						}
					} else {
						break _v26_5;
					}
				} while(false);
				return {
					ctor: '::',
					_0: _p23._1._0,
					_1: {ctor: '[]'}
				};
			} while(false);
			return list;
		}
	});
var _elm_lang$core$List$take = F2(
	function (n, list) {
		return A3(_elm_lang$core$List$takeFast, 0, n, list);
	});
var _elm_lang$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v27 = {ctor: '::', _0: value, _1: result},
					_v28 = n - 1,
					_v29 = value;
				result = _v27;
				n = _v28;
				value = _v29;
				continue repeatHelp;
			}
		}
	});
var _elm_lang$core$List$repeat = F2(
	function (n, value) {
		return A3(
			_elm_lang$core$List$repeatHelp,
			{ctor: '[]'},
			n,
			value);
	});
var _elm_lang$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {
				var _v30 = lo,
					_v31 = hi - 1,
					_v32 = {ctor: '::', _0: hi, _1: list};
				lo = _v30;
				hi = _v31;
				list = _v32;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var _elm_lang$core$List$range = F2(
	function (lo, hi) {
		return A3(
			_elm_lang$core$List$rangeHelp,
			lo,
			hi,
			{ctor: '[]'});
	});
var _elm_lang$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$map2,
			f,
			A2(
				_elm_lang$core$List$range,
				0,
				_elm_lang$core$List$length(xs) - 1),
			xs);
	});

var _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;
var _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;
var _elm_lang$core$Array$isEmpty = function (array) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Array$length(array),
		0);
};
var _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;
var _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;
var _elm_lang$core$Array$get = F2(
	function (i, array) {
		return ((_elm_lang$core$Native_Utils.cmp(0, i) < 1) && (_elm_lang$core$Native_Utils.cmp(
			i,
			_elm_lang$core$Native_Array.length(array)) < 0)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;
var _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;
var _elm_lang$core$Array$filter = F2(
	function (isOkay, arr) {
		var update = F2(
			function (x, xs) {
				return isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;
			});
		return A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);
	});
var _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;
var _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;
var _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;
var _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;
var _elm_lang$core$Array$toIndexedList = function (array) {
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(
			_elm_lang$core$List$range,
			0,
			_elm_lang$core$Native_Array.length(array) - 1),
		_elm_lang$core$Native_Array.toList(array));
};
var _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;
var _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;
var _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;
var _elm_lang$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			_elm_lang$core$Array$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _elm_lang$core$Array$Array = {ctor: 'Array'};

//import Native.Utils //

var _elm_lang$core$Native_Debug = function() {

function log(tag, value)
{
	var msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);
	var process = process || {};
	if (process.stdout)
	{
		process.stdout.write(msg);
	}
	else
	{
		console.log(msg);
	}
	return value;
}

function crash(message)
{
	throw new Error(message);
}

return {
	crash: crash,
	log: F2(log)
};

}();
//import Maybe, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_String = function() {

function isEmpty(str)
{
	return str.length === 0;
}
function cons(chr, str)
{
	return chr + str;
}
function uncons(str)
{
	var hd = str[0];
	if (hd)
	{
		return _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));
	}
	return _elm_lang$core$Maybe$Nothing;
}
function append(a, b)
{
	return a + b;
}
function concat(strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join('');
}
function length(str)
{
	return str.length;
}
function map(f, str)
{
	var out = str.split('');
	for (var i = out.length; i--; )
	{
		out[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));
	}
	return out.join('');
}
function filter(pred, str)
{
	return str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');
}
function reverse(str)
{
	return str.split('').reverse().join('');
}
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i < len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function foldr(f, b, str)
{
	for (var i = str.length; i--; )
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function split(sep, str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(sep));
}
function join(sep, strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join(sep);
}
function repeat(n, str)
{
	var result = '';
	while (n > 0)
	{
		if (n & 1)
		{
			result += str;
		}
		n >>= 1, str += str;
	}
	return result;
}
function slice(start, end, str)
{
	return str.slice(start, end);
}
function left(n, str)
{
	return n < 1 ? '' : str.slice(0, n);
}
function right(n, str)
{
	return n < 1 ? '' : str.slice(-n);
}
function dropLeft(n, str)
{
	return n < 1 ? str : str.slice(n);
}
function dropRight(n, str)
{
	return n < 1 ? str : str.slice(0, -n);
}
function pad(n, chr, str)
{
	var half = (n - str.length) / 2;
	return repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);
}
function padRight(n, chr, str)
{
	return str + repeat(n - str.length, chr);
}
function padLeft(n, chr, str)
{
	return repeat(n - str.length, chr) + str;
}

function trim(str)
{
	return str.trim();
}
function trimLeft(str)
{
	return str.replace(/^\s+/, '');
}
function trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function words(str)
{
	return _elm_lang$core$Native_List.fromArray(str.trim().split(/\s+/g));
}
function lines(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(/\r\n|\r|\n/g));
}

function toUpper(str)
{
	return str.toUpperCase();
}
function toLower(str)
{
	return str.toLowerCase();
}

function any(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return true;
		}
	}
	return false;
}
function all(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (!pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return false;
		}
	}
	return true;
}

function contains(sub, str)
{
	return str.indexOf(sub) > -1;
}
function startsWith(sub, str)
{
	return str.indexOf(sub) === 0;
}
function endsWith(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
}
function indexes(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _elm_lang$core$Native_List.Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _elm_lang$core$Native_List.fromArray(is);
}


function toInt(s)
{
	var len = s.length;

	// if empty
	if (len === 0)
	{
		return intErr(s);
	}

	// if hex
	var c = s[0];
	if (c === '0' && s[1] === 'x')
	{
		for (var i = 2; i < len; ++i)
		{
			var c = s[i];
			if (('0' <= c && c <= '9') || ('A' <= c && c <= 'F') || ('a' <= c && c <= 'f'))
			{
				continue;
			}
			return intErr(s);
		}
		return _elm_lang$core$Result$Ok(parseInt(s, 16));
	}

	// is decimal
	if (c > '9' || (c < '0' && c !== '-' && c !== '+'))
	{
		return intErr(s);
	}
	for (var i = 1; i < len; ++i)
	{
		var c = s[i];
		if (c < '0' || '9' < c)
		{
			return intErr(s);
		}
	}

	return _elm_lang$core$Result$Ok(parseInt(s, 10));
}

function intErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int");
}


function toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return floatErr(s);
	}
	var n = +s;
	// faster isNaN check
	return n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);
}

function floatErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float");
}


function toList(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));
}
function fromList(chars)
{
	return _elm_lang$core$Native_List.toArray(chars).join('');
}

return {
	isEmpty: isEmpty,
	cons: F2(cons),
	uncons: uncons,
	append: F2(append),
	concat: concat,
	length: length,
	map: F2(map),
	filter: F2(filter),
	reverse: reverse,
	foldl: F3(foldl),
	foldr: F3(foldr),

	split: F2(split),
	join: F2(join),
	repeat: F2(repeat),

	slice: F3(slice),
	left: F2(left),
	right: F2(right),
	dropLeft: F2(dropLeft),
	dropRight: F2(dropRight),

	pad: F3(pad),
	padLeft: F3(padLeft),
	padRight: F3(padRight),

	trim: trim,
	trimLeft: trimLeft,
	trimRight: trimRight,

	words: words,
	lines: lines,

	toUpper: toUpper,
	toLower: toLower,

	any: F2(any),
	all: F2(all),

	contains: F2(contains),
	startsWith: F2(startsWith),
	endsWith: F2(endsWith),
	indexes: F2(indexes),

	toInt: toInt,
	toFloat: toFloat,
	toList: toList,
	fromList: fromList
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Char = function() {

return {
	fromCode: function(c) { return _elm_lang$core$Native_Utils.chr(String.fromCharCode(c)); },
	toCode: function(c) { return c.charCodeAt(0); },
	toUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toUpperCase()); },
	toLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLowerCase()); },
	toLocaleUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase()); },
	toLocaleLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase()); }
};

}();
var _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;
var _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;
var _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;
var _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;
var _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;
var _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;
var _elm_lang$core$Char$isBetween = F3(
	function (low, high, $char) {
		var code = _elm_lang$core$Char$toCode($char);
		return (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(low)) > -1) && (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(high)) < 1);
	});
var _elm_lang$core$Char$isUpper = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('A'),
	_elm_lang$core$Native_Utils.chr('Z'));
var _elm_lang$core$Char$isLower = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('a'),
	_elm_lang$core$Native_Utils.chr('z'));
var _elm_lang$core$Char$isDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('9'));
var _elm_lang$core$Char$isOctDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('7'));
var _elm_lang$core$Char$isHexDigit = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('a'),
		_elm_lang$core$Native_Utils.chr('f'),
		$char) || A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('A'),
		_elm_lang$core$Native_Utils.chr('F'),
		$char));
};

var _elm_lang$core$Result$toMaybe = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$Result$withDefault = F2(
	function (def, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _elm_lang$core$Result$Err = function (a) {
	return {ctor: 'Err', _0: a};
};
var _elm_lang$core$Result$andThen = F2(
	function (callback, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return callback(_p2._0);
		} else {
			return _elm_lang$core$Result$Err(_p2._0);
		}
	});
var _elm_lang$core$Result$Ok = function (a) {
	return {ctor: 'Ok', _0: a};
};
var _elm_lang$core$Result$map = F2(
	function (func, ra) {
		var _p3 = ra;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				func(_p3._0));
		} else {
			return _elm_lang$core$Result$Err(_p3._0);
		}
	});
var _elm_lang$core$Result$map2 = F3(
	function (func, ra, rb) {
		var _p4 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p4._0.ctor === 'Ok') {
			if (_p4._1.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(func, _p4._0._0, _p4._1._0));
			} else {
				return _elm_lang$core$Result$Err(_p4._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p4._0._0);
		}
	});
var _elm_lang$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		var _p5 = {ctor: '_Tuple3', _0: ra, _1: rb, _2: rc};
		if (_p5._0.ctor === 'Ok') {
			if (_p5._1.ctor === 'Ok') {
				if (_p5._2.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						A3(func, _p5._0._0, _p5._1._0, _p5._2._0));
				} else {
					return _elm_lang$core$Result$Err(_p5._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p5._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p5._0._0);
		}
	});
var _elm_lang$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		var _p6 = {ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd};
		if (_p6._0.ctor === 'Ok') {
			if (_p6._1.ctor === 'Ok') {
				if (_p6._2.ctor === 'Ok') {
					if (_p6._3.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));
					} else {
						return _elm_lang$core$Result$Err(_p6._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p6._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p6._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p6._0._0);
		}
	});
var _elm_lang$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		var _p7 = {ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re};
		if (_p7._0.ctor === 'Ok') {
			if (_p7._1.ctor === 'Ok') {
				if (_p7._2.ctor === 'Ok') {
					if (_p7._3.ctor === 'Ok') {
						if (_p7._4.ctor === 'Ok') {
							return _elm_lang$core$Result$Ok(
								A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));
						} else {
							return _elm_lang$core$Result$Err(_p7._4._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p7._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p7._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p7._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p7._0._0);
		}
	});
var _elm_lang$core$Result$mapError = F2(
	function (f, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p8._0);
		} else {
			return _elm_lang$core$Result$Err(
				f(_p8._0));
		}
	});
var _elm_lang$core$Result$fromMaybe = F2(
	function (err, maybe) {
		var _p9 = maybe;
		if (_p9.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p9._0);
		} else {
			return _elm_lang$core$Result$Err(err);
		}
	});

var _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;
var _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;
var _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;
var _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;
var _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;
var _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;
var _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;
var _elm_lang$core$String$all = _elm_lang$core$Native_String.all;
var _elm_lang$core$String$any = _elm_lang$core$Native_String.any;
var _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;
var _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;
var _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;
var _elm_lang$core$String$words = _elm_lang$core$Native_String.words;
var _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;
var _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;
var _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;
var _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;
var _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;
var _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;
var _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;
var _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;
var _elm_lang$core$String$right = _elm_lang$core$Native_String.right;
var _elm_lang$core$String$left = _elm_lang$core$Native_String.left;
var _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;
var _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;
var _elm_lang$core$String$join = _elm_lang$core$Native_String.join;
var _elm_lang$core$String$split = _elm_lang$core$Native_String.split;
var _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;
var _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;
var _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;
var _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;
var _elm_lang$core$String$map = _elm_lang$core$Native_String.map;
var _elm_lang$core$String$length = _elm_lang$core$Native_String.length;
var _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;
var _elm_lang$core$String$append = _elm_lang$core$Native_String.append;
var _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;
var _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;
var _elm_lang$core$String$fromChar = function ($char) {
	return A2(_elm_lang$core$String$cons, $char, '');
};
var _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;

var _elm_lang$core$Dict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _elm_lang$core$Dict$keys = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$values = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$toList = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _elm_lang$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _p2) {
				stepState:
				while (true) {
					var _p3 = _p2;
					var _p9 = _p3._1;
					var _p8 = _p3._0;
					var _p4 = _p8;
					if (_p4.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _p8,
							_1: A3(rightStep, rKey, rValue, _p9)
						};
					} else {
						var _p7 = _p4._1;
						var _p6 = _p4._0._1;
						var _p5 = _p4._0._0;
						if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) < 0) {
							var _v10 = rKey,
								_v11 = rValue,
								_v12 = {
								ctor: '_Tuple2',
								_0: _p7,
								_1: A3(leftStep, _p5, _p6, _p9)
							};
							rKey = _v10;
							rValue = _v11;
							_p2 = _v12;
							continue stepState;
						} else {
							if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) > 0) {
								return {
									ctor: '_Tuple2',
									_0: _p8,
									_1: A3(rightStep, rKey, rValue, _p9)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _p7,
									_1: A4(bothStep, _p5, _p6, rValue, _p9)
								};
							}
						}
					}
				}
			});
		var _p10 = A3(
			_elm_lang$core$Dict$foldl,
			stepState,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Dict$toList(leftDict),
				_1: initialResult
			},
			rightDict);
		var leftovers = _p10._0;
		var intermediateResult = _p10._1;
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p11, result) {
					var _p12 = _p11;
					return A3(leftStep, _p12._0, _p12._1, result);
				}),
			intermediateResult,
			leftovers);
	});
var _elm_lang$core$Dict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Debug.crash(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/core/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _elm_lang$core$Dict$isBBlack = function (dict) {
	var _p13 = dict;
	_v14_2:
	do {
		if (_p13.ctor === 'RBNode_elm_builtin') {
			if (_p13._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v14_2;
			}
		} else {
			if (_p13._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v14_2;
			}
		}
	} while(false);
	return false;
};
var _elm_lang$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p14 = dict;
			if (_p14.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v16 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p14._4),
					_v17 = _p14._3;
				n = _v16;
				dict = _v17;
				continue sizeHelp;
			}
		}
	});
var _elm_lang$core$Dict$size = function (dict) {
	return A2(_elm_lang$core$Dict$sizeHelp, 0, dict);
};
var _elm_lang$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			var _p15 = dict;
			if (_p15.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p16 = A2(_elm_lang$core$Basics$compare, targetKey, _p15._1);
				switch (_p16.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p15._3;
						targetKey = _v20;
						dict = _v21;
						continue get;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p15._2);
					default:
						var _v22 = targetKey,
							_v23 = _p15._4;
						targetKey = _v22;
						dict = _v23;
						continue get;
				}
			}
		}
	});
var _elm_lang$core$Dict$member = F2(
	function (key, dict) {
		var _p17 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p17.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_lang$core$Dict$maxWithDefault = F3(
	function (k, v, r) {
		maxWithDefault:
		while (true) {
			var _p18 = r;
			if (_p18.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: k, _1: v};
			} else {
				var _v26 = _p18._1,
					_v27 = _p18._2,
					_v28 = _p18._4;
				k = _v26;
				v = _v27;
				r = _v28;
				continue maxWithDefault;
			}
		}
	});
var _elm_lang$core$Dict$NBlack = {ctor: 'NBlack'};
var _elm_lang$core$Dict$BBlack = {ctor: 'BBlack'};
var _elm_lang$core$Dict$Black = {ctor: 'Black'};
var _elm_lang$core$Dict$blackish = function (t) {
	var _p19 = t;
	if (_p19.ctor === 'RBNode_elm_builtin') {
		var _p20 = _p19._0;
		return _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$BBlack);
	} else {
		return true;
	}
};
var _elm_lang$core$Dict$Red = {ctor: 'Red'};
var _elm_lang$core$Dict$moreBlack = function (color) {
	var _p21 = color;
	switch (_p21.ctor) {
		case 'Black':
			return _elm_lang$core$Dict$BBlack;
		case 'Red':
			return _elm_lang$core$Dict$Black;
		case 'NBlack':
			return _elm_lang$core$Dict$Red;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a double black node more black!');
	}
};
var _elm_lang$core$Dict$lessBlack = function (color) {
	var _p22 = color;
	switch (_p22.ctor) {
		case 'BBlack':
			return _elm_lang$core$Dict$Black;
		case 'Black':
			return _elm_lang$core$Dict$Red;
		case 'Red':
			return _elm_lang$core$Dict$NBlack;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a negative black node less black!');
	}
};
var _elm_lang$core$Dict$LBBlack = {ctor: 'LBBlack'};
var _elm_lang$core$Dict$LBlack = {ctor: 'LBlack'};
var _elm_lang$core$Dict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
var _elm_lang$core$Dict$isEmpty = function (dict) {
	return _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);
};
var _elm_lang$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Dict$ensureBlackRoot = function (dict) {
	var _p23 = dict;
	if ((_p23.ctor === 'RBNode_elm_builtin') && (_p23._0.ctor === 'Red')) {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	} else {
		return dict;
	}
};
var _elm_lang$core$Dict$lessBlackTree = function (dict) {
	var _p24 = dict;
	if (_p24.ctor === 'RBNode_elm_builtin') {
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$lessBlack(_p24._0),
			_p24._1,
			_p24._2,
			_p24._3,
			_p24._4);
	} else {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	}
};
var _elm_lang$core$Dict$balancedTree = function (col) {
	return function (xk) {
		return function (xv) {
			return function (yk) {
				return function (yv) {
					return function (zk) {
						return function (zv) {
							return function (a) {
								return function (b) {
									return function (c) {
										return function (d) {
											return A5(
												_elm_lang$core$Dict$RBNode_elm_builtin,
												_elm_lang$core$Dict$lessBlack(col),
												yk,
												yv,
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b),
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$core$Dict$blacken = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _elm_lang$core$Dict$redden = function (t) {
	var _p26 = t;
	if (_p26.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Debug.crash('can\'t make a Leaf red');
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p26._1, _p26._2, _p26._3, _p26._4);
	}
};
var _elm_lang$core$Dict$balanceHelp = function (tree) {
	var _p27 = tree;
	_v36_6:
	do {
		_v36_5:
		do {
			_v36_4:
			do {
				_v36_3:
				do {
					_v36_2:
					do {
						_v36_1:
						do {
							_v36_0:
							do {
								if (_p27.ctor === 'RBNode_elm_builtin') {
									if (_p27._3.ctor === 'RBNode_elm_builtin') {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._3._0.ctor) {
												case 'Red':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																		break _v36_2;
																	} else {
																		if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																			break _v36_3;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															}
														case 'NBlack':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																		break _v36_4;
																	} else {
																		break _v36_6;
																	}
																}
															}
														default:
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	break _v36_6;
																}
															}
													}
												case 'NBlack':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															}
														case 'NBlack':
															if (_p27._0.ctor === 'BBlack') {
																if ((((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																	break _v36_4;
																} else {
																	if ((((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															} else {
																break _v36_6;
															}
														default:
															if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																break _v36_5;
															} else {
																break _v36_6;
															}
													}
												default:
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	break _v36_6;
																}
															}
														case 'NBlack':
															if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																break _v36_4;
															} else {
																break _v36_6;
															}
														default:
															break _v36_6;
													}
											}
										} else {
											switch (_p27._3._0.ctor) {
												case 'Red':
													if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
														break _v36_0;
													} else {
														if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
															break _v36_1;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
														break _v36_5;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										}
									} else {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._4._0.ctor) {
												case 'Red':
													if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
														break _v36_2;
													} else {
														if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
															break _v36_3;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
														break _v36_4;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										} else {
											break _v36_6;
										}
									}
								} else {
									break _v36_6;
								}
							} while(false);
							return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
						} while(false);
						return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
					} while(false);
					return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
				} while(false);
				return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
			} while(false);
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_elm_lang$core$Dict$Black,
				_p27._4._3._1,
				_p27._4._3._2,
				A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
				A5(
					_elm_lang$core$Dict$balance,
					_elm_lang$core$Dict$Black,
					_p27._4._1,
					_p27._4._2,
					_p27._4._3._4,
					_elm_lang$core$Dict$redden(_p27._4._4)));
		} while(false);
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$Black,
			_p27._3._4._1,
			_p27._3._4._2,
			A5(
				_elm_lang$core$Dict$balance,
				_elm_lang$core$Dict$Black,
				_p27._3._1,
				_p27._3._2,
				_elm_lang$core$Dict$redden(_p27._3._3),
				_p27._3._4._3),
			A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
	} while(false);
	return tree;
};
var _elm_lang$core$Dict$balance = F5(
	function (c, k, v, l, r) {
		var tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
		return _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;
	});
var _elm_lang$core$Dict$bubble = F5(
	function (c, k, v, l, r) {
		return (_elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r)) ? A5(
			_elm_lang$core$Dict$balance,
			_elm_lang$core$Dict$moreBlack(c),
			k,
			v,
			_elm_lang$core$Dict$lessBlackTree(l),
			_elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _elm_lang$core$Dict$removeMax = F5(
	function (c, k, v, l, r) {
		var _p28 = r;
		if (_p28.ctor === 'RBEmpty_elm_builtin') {
			return A3(_elm_lang$core$Dict$rem, c, l, r);
		} else {
			return A5(
				_elm_lang$core$Dict$bubble,
				c,
				k,
				v,
				l,
				A5(_elm_lang$core$Dict$removeMax, _p28._0, _p28._1, _p28._2, _p28._3, _p28._4));
		}
	});
var _elm_lang$core$Dict$rem = F3(
	function (color, left, right) {
		var _p29 = {ctor: '_Tuple2', _0: left, _1: right};
		if (_p29._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p30 = color;
				switch (_p30.ctor) {
					case 'Red':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
					case 'Black':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);
					default:
						return _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p33 = _p29._1._0;
				var _p32 = _p29._0._0;
				var _p31 = {ctor: '_Tuple3', _0: color, _1: _p32, _2: _p33};
				if ((((_p31.ctor === '_Tuple3') && (_p31._0.ctor === 'Black')) && (_p31._1.ctor === 'LBlack')) && (_p31._2.ctor === 'Red')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._1._1, _p29._1._2, _p29._1._3, _p29._1._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/LBlack/Red',
						color,
						_elm_lang$core$Basics$toString(_p32),
						_elm_lang$core$Basics$toString(_p33));
				}
			}
		} else {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p36 = _p29._1._0;
				var _p35 = _p29._0._0;
				var _p34 = {ctor: '_Tuple3', _0: color, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'Red')) && (_p34._2.ctor === 'LBlack')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._0._1, _p29._0._2, _p29._0._3, _p29._0._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/Red/LBlack',
						color,
						_elm_lang$core$Basics$toString(_p35),
						_elm_lang$core$Basics$toString(_p36));
				}
			} else {
				var _p40 = _p29._0._2;
				var _p39 = _p29._0._4;
				var _p38 = _p29._0._1;
				var newLeft = A5(_elm_lang$core$Dict$removeMax, _p29._0._0, _p38, _p40, _p29._0._3, _p39);
				var _p37 = A3(_elm_lang$core$Dict$maxWithDefault, _p38, _p40, _p39);
				var k = _p37._0;
				var v = _p37._1;
				return A5(_elm_lang$core$Dict$bubble, color, k, v, newLeft, right);
			}
		}
	});
var _elm_lang$core$Dict$map = F2(
	function (f, dict) {
		var _p41 = dict;
		if (_p41.ctor === 'RBEmpty_elm_builtin') {
			return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
		} else {
			var _p42 = _p41._1;
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_p41._0,
				_p42,
				A2(f, _p42, _p41._2),
				A2(_elm_lang$core$Dict$map, f, _p41._3),
				A2(_elm_lang$core$Dict$map, f, _p41._4));
		}
	});
var _elm_lang$core$Dict$Same = {ctor: 'Same'};
var _elm_lang$core$Dict$Remove = {ctor: 'Remove'};
var _elm_lang$core$Dict$Insert = {ctor: 'Insert'};
var _elm_lang$core$Dict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p43 = dict;
			if (_p43.ctor === 'RBEmpty_elm_builtin') {
				var _p44 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p44.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$Insert,
						_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p44._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)
					};
				}
			} else {
				var _p55 = _p43._2;
				var _p54 = _p43._4;
				var _p53 = _p43._3;
				var _p52 = _p43._1;
				var _p51 = _p43._0;
				var _p45 = A2(_elm_lang$core$Basics$compare, k, _p52);
				switch (_p45.ctor) {
					case 'EQ':
						var _p46 = alter(
							_elm_lang$core$Maybe$Just(_p55));
						if (_p46.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Remove,
								_1: A3(_elm_lang$core$Dict$rem, _p51, _p53, _p54)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Same,
								_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p46._0, _p53, _p54)
							};
						}
					case 'LT':
						var _p47 = up(_p53);
						var flag = _p47._0;
						var newLeft = _p47._1;
						var _p48 = flag;
						switch (_p48.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, newLeft, _p54)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, newLeft, _p54)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, newLeft, _p54)
								};
						}
					default:
						var _p49 = up(_p54);
						var flag = _p49._0;
						var newRight = _p49._1;
						var _p50 = flag;
						switch (_p50.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, _p53, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, _p53, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, _p53, newRight)
								};
						}
				}
			}
		};
		var _p56 = up(dict);
		var flag = _p56._0;
		var updatedDict = _p56._1;
		var _p57 = flag;
		switch (_p57.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _elm_lang$core$Dict$ensureBlackRoot(updatedDict);
			default:
				return _elm_lang$core$Dict$blacken(updatedDict);
		}
	});
var _elm_lang$core$Dict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_lang$core$Dict$singleton = F2(
	function (key, value) {
		return A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);
	});
var _elm_lang$core$Dict$union = F2(
	function (t1, t2) {
		return A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);
	});
var _elm_lang$core$Dict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;
			});
		return A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);
	});
var _elm_lang$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (k, _p58) {
					return A2(_elm_lang$core$Dict$member, k, t2);
				}),
			t1);
	});
var _elm_lang$core$Dict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p59) {
				var _p60 = _p59;
				var _p62 = _p60._1;
				var _p61 = _p60._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$Dict$insert, key, value, _p61),
					_1: _p62
				} : {
					ctor: '_Tuple2',
					_0: _p61,
					_1: A3(_elm_lang$core$Dict$insert, key, value, _p62)
				};
			});
		return A3(
			_elm_lang$core$Dict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty},
			dict);
	});
var _elm_lang$core$Dict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_elm_lang$core$Dict$insert, _p64._0, _p64._1, dict);
			}),
		_elm_lang$core$Dict$empty,
		assocs);
};
var _elm_lang$core$Dict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_lang$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(_elm_lang$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});

//import Maybe, Native.Array, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_Json = function() {


// CORE DECODERS

function succeed(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'succeed',
		msg: msg
	};
}

function fail(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'fail',
		msg: msg
	};
}

function decodePrimitive(tag)
{
	return {
		ctor: '<decoder>',
		tag: tag
	};
}

function decodeContainer(tag, decoder)
{
	return {
		ctor: '<decoder>',
		tag: tag,
		decoder: decoder
	};
}

function decodeNull(value)
{
	return {
		ctor: '<decoder>',
		tag: 'null',
		value: value
	};
}

function decodeField(field, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'field',
		field: field,
		decoder: decoder
	};
}

function decodeIndex(index, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'index',
		index: index,
		decoder: decoder
	};
}

function decodeKeyValuePairs(decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'key-value',
		decoder: decoder
	};
}

function mapMany(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'map-many',
		func: f,
		decoders: decoders
	};
}

function andThen(callback, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'andThen',
		decoder: decoder,
		callback: callback
	};
}

function oneOf(decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'oneOf',
		decoders: decoders
	};
}


// DECODING OBJECTS

function map1(f, d1)
{
	return mapMany(f, [d1]);
}

function map2(f, d1, d2)
{
	return mapMany(f, [d1, d2]);
}

function map3(f, d1, d2, d3)
{
	return mapMany(f, [d1, d2, d3]);
}

function map4(f, d1, d2, d3, d4)
{
	return mapMany(f, [d1, d2, d3, d4]);
}

function map5(f, d1, d2, d3, d4, d5)
{
	return mapMany(f, [d1, d2, d3, d4, d5]);
}

function map6(f, d1, d2, d3, d4, d5, d6)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6]);
}

function map7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function map8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODE HELPERS

function ok(value)
{
	return { tag: 'ok', value: value };
}

function badPrimitive(type, value)
{
	return { tag: 'primitive', type: type, value: value };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badField(field, nestedProblems)
{
	return { tag: 'field', field: field, rest: nestedProblems };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badOneOf(problems)
{
	return { tag: 'oneOf', problems: problems };
}

function bad(msg)
{
	return { tag: 'fail', msg: msg };
}

function badToString(problem)
{
	var context = '_';
	while (problem)
	{
		switch (problem.tag)
		{
			case 'primitive':
				return 'Expecting ' + problem.type
					+ (context === '_' ? '' : ' at ' + context)
					+ ' but instead got: ' + jsToString(problem.value);

			case 'index':
				context += '[' + problem.index + ']';
				problem = problem.rest;
				break;

			case 'field':
				context += '.' + problem.field;
				problem = problem.rest;
				break;

			case 'oneOf':
				var problems = problem.problems;
				for (var i = 0; i < problems.length; i++)
				{
					problems[i] = badToString(problems[i]);
				}
				return 'I ran into the following problems'
					+ (context === '_' ? '' : ' at ' + context)
					+ ':\n\n' + problems.join('\n');

			case 'fail':
				return 'I ran into a `fail` decoder'
					+ (context === '_' ? '' : ' at ' + context)
					+ ': ' + problem.msg;
		}
	}
}

function jsToString(value)
{
	return value === undefined
		? 'undefined'
		: JSON.stringify(value);
}


// DECODE

function runOnString(decoder, string)
{
	var json;
	try
	{
		json = JSON.parse(string);
	}
	catch (e)
	{
		return _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);
	}
	return run(decoder, json);
}

function run(decoder, value)
{
	var result = runHelp(decoder, value);
	return (result.tag === 'ok')
		? _elm_lang$core$Result$Ok(result.value)
		: _elm_lang$core$Result$Err(badToString(result));
}

function runHelp(decoder, value)
{
	switch (decoder.tag)
	{
		case 'bool':
			return (typeof value === 'boolean')
				? ok(value)
				: badPrimitive('a Bool', value);

		case 'int':
			if (typeof value !== 'number') {
				return badPrimitive('an Int', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return ok(value);
			}

			return badPrimitive('an Int', value);

		case 'float':
			return (typeof value === 'number')
				? ok(value)
				: badPrimitive('a Float', value);

		case 'string':
			return (typeof value === 'string')
				? ok(value)
				: (value instanceof String)
					? ok(value + '')
					: badPrimitive('a String', value);

		case 'null':
			return (value === null)
				? ok(decoder.value)
				: badPrimitive('null', value);

		case 'value':
			return ok(value);

		case 'list':
			if (!(value instanceof Array))
			{
				return badPrimitive('a List', value);
			}

			var list = _elm_lang$core$Native_List.Nil;
			for (var i = value.length; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result)
				}
				list = _elm_lang$core$Native_List.Cons(result.value, list);
			}
			return ok(list);

		case 'array':
			if (!(value instanceof Array))
			{
				return badPrimitive('an Array', value);
			}

			var len = value.length;
			var array = new Array(len);
			for (var i = len; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				array[i] = result.value;
			}
			return ok(_elm_lang$core$Native_Array.fromJSArray(array));

		case 'maybe':
			var result = runHelp(decoder.decoder, value);
			return (result.tag === 'ok')
				? ok(_elm_lang$core$Maybe$Just(result.value))
				: ok(_elm_lang$core$Maybe$Nothing);

		case 'field':
			var field = decoder.field;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return badPrimitive('an object with a field named `' + field + '`', value);
			}

			var result = runHelp(decoder.decoder, value[field]);
			return (result.tag === 'ok') ? result : badField(field, result);

		case 'index':
			var index = decoder.index;
			if (!(value instanceof Array))
			{
				return badPrimitive('an array', value);
			}
			if (index >= value.length)
			{
				return badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);
			}

			var result = runHelp(decoder.decoder, value[index]);
			return (result.tag === 'ok') ? result : badIndex(index, result);

		case 'key-value':
			if (typeof value !== 'object' || value === null || value instanceof Array)
			{
				return badPrimitive('an object', value);
			}

			var keyValuePairs = _elm_lang$core$Native_List.Nil;
			for (var key in value)
			{
				var result = runHelp(decoder.decoder, value[key]);
				if (result.tag !== 'ok')
				{
					return badField(key, result);
				}
				var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
				keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
			}
			return ok(keyValuePairs);

		case 'map-many':
			var answer = decoder.func;
			var decoders = decoder.decoders;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = runHelp(decoders[i], value);
				if (result.tag !== 'ok')
				{
					return result;
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'andThen':
			var result = runHelp(decoder.decoder, value);
			return (result.tag !== 'ok')
				? result
				: runHelp(decoder.callback(result.value), value);

		case 'oneOf':
			var errors = [];
			var temp = decoder.decoders;
			while (temp.ctor !== '[]')
			{
				var result = runHelp(temp._0, value);

				if (result.tag === 'ok')
				{
					return result;
				}

				errors.push(result);

				temp = temp._1;
			}
			return badOneOf(errors);

		case 'fail':
			return bad(decoder.msg);

		case 'succeed':
			return ok(decoder.msg);
	}
}


// EQUALITY

function equality(a, b)
{
	if (a === b)
	{
		return true;
	}

	if (a.tag !== b.tag)
	{
		return false;
	}

	switch (a.tag)
	{
		case 'succeed':
		case 'fail':
			return a.msg === b.msg;

		case 'bool':
		case 'int':
		case 'float':
		case 'string':
		case 'value':
			return true;

		case 'null':
			return a.value === b.value;

		case 'list':
		case 'array':
		case 'maybe':
		case 'key-value':
			return equality(a.decoder, b.decoder);

		case 'field':
			return a.field === b.field && equality(a.decoder, b.decoder);

		case 'index':
			return a.index === b.index && equality(a.decoder, b.decoder);

		case 'map-many':
			if (a.func !== b.func)
			{
				return false;
			}
			return listEquality(a.decoders, b.decoders);

		case 'andThen':
			return a.callback === b.callback && equality(a.decoder, b.decoder);

		case 'oneOf':
			return listEquality(a.decoders, b.decoders);
	}
}

function listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

function encode(indentLevel, value)
{
	return JSON.stringify(value, null, indentLevel);
}

function identity(value)
{
	return value;
}

function encodeObject(keyValuePairs)
{
	var obj = {};
	while (keyValuePairs.ctor !== '[]')
	{
		var pair = keyValuePairs._0;
		obj[pair._0] = pair._1;
		keyValuePairs = keyValuePairs._1;
	}
	return obj;
}

return {
	encode: F2(encode),
	runOnString: F2(runOnString),
	run: F2(run),

	decodeNull: decodeNull,
	decodePrimitive: decodePrimitive,
	decodeContainer: F2(decodeContainer),

	decodeField: F2(decodeField),
	decodeIndex: F2(decodeIndex),

	map1: F2(map1),
	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	map6: F7(map6),
	map7: F8(map7),
	map8: F9(map8),
	decodeKeyValuePairs: decodeKeyValuePairs,

	andThen: F2(andThen),
	fail: fail,
	succeed: succeed,
	oneOf: oneOf,

	identity: identity,
	encodeNull: null,
	encodeArray: _elm_lang$core$Native_Array.toJSArray,
	encodeList: _elm_lang$core$Native_List.toArray,
	encodeObject: encodeObject,

	equality: equality
};

}();

var _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;
var _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;
var _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;
var _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;
var _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;
var _elm_lang$core$Json_Encode$Value = {ctor: 'Value'};

var _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;
var _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');
var _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;
var _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;
var _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;
var _elm_lang$core$Json_Decode$lazy = function (thunk) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		thunk,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;
var _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;
var _elm_lang$core$Json_Decode$map8 = _elm_lang$core$Native_Json.map8;
var _elm_lang$core$Json_Decode$map7 = _elm_lang$core$Native_Json.map7;
var _elm_lang$core$Json_Decode$map6 = _elm_lang$core$Native_Json.map6;
var _elm_lang$core$Json_Decode$map5 = _elm_lang$core$Native_Json.map5;
var _elm_lang$core$Json_Decode$map4 = _elm_lang$core$Native_Json.map4;
var _elm_lang$core$Json_Decode$map3 = _elm_lang$core$Native_Json.map3;
var _elm_lang$core$Json_Decode$map2 = _elm_lang$core$Native_Json.map2;
var _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.map1;
var _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;
var _elm_lang$core$Json_Decode$maybe = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);
};
var _elm_lang$core$Json_Decode$index = _elm_lang$core$Native_Json.decodeIndex;
var _elm_lang$core$Json_Decode$field = _elm_lang$core$Native_Json.decodeField;
var _elm_lang$core$Json_Decode$at = F2(
	function (fields, decoder) {
		return A3(_elm_lang$core$List$foldr, _elm_lang$core$Json_Decode$field, decoder, fields);
	});
var _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;
var _elm_lang$core$Json_Decode$dict = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Dict$fromList,
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _elm_lang$core$Json_Decode$array = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);
};
var _elm_lang$core$Json_Decode$list = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);
};
var _elm_lang$core$Json_Decode$nullable = function (decoder) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, decoder),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');
var _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');
var _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');
var _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');
var _elm_lang$core$Json_Decode$Decoder = {ctor: 'Decoder'};

var _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;
var _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;

var _elm_lang$core$Tuple$mapSecond = F2(
	function (func, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: func(_p1._1)
		};
	});
var _elm_lang$core$Tuple$mapFirst = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: func(_p3._0),
			_1: _p3._1
		};
	});
var _elm_lang$core$Tuple$second = function (_p4) {
	var _p5 = _p4;
	return _p5._1;
};
var _elm_lang$core$Tuple$first = function (_p6) {
	var _p7 = _p6;
	return _p7._0;
};

//import //

var _elm_lang$core$Native_Platform = function() {


// PROGRAMS

function program(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flags !== 'undefined')
				{
					throw new Error(
						'The `' + moduleName + '` module does not need flags.\n'
						+ 'Call ' + moduleName + '.worker() with no arguments and you should be all set!'
					);
				}

				return initialize(
					impl.init,
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function programWithFlags(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flagDecoder === 'undefined')
				{
					throw new Error(
						'Are you trying to sneak a Never value into Elm? Trickster!\n'
						+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
						+ 'Use `program` instead if you do not want flags.'
					);
				}

				var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
				if (result.ctor === 'Err')
				{
					throw new Error(
						moduleName + '.worker(...) was called with an unexpected argument.\n'
						+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
						+ result._0
					);
				}

				return initialize(
					impl.init(result._0),
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function renderer(enqueue, _)
{
	return function(_) {};
}


// HTML TO PROGRAM

function htmlToProgram(vnode)
{
	var emptyBag = batch(_elm_lang$core$Native_List.Nil);
	var noChange = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		emptyBag
	);

	return _elm_lang$virtual_dom$VirtualDom$program({
		init: noChange,
		view: function(model) { return main; },
		update: F2(function(msg, model) { return noChange; }),
		subscriptions: function (model) { return emptyBag; }
	});
}


// INITIALIZE A PROGRAM

function initialize(init, update, subscriptions, renderer)
{
	// ambient state
	var managers = {};
	var updateView;

	// init and update state in main process
	var initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var model = init._0;
		updateView = renderer(enqueue, model);
		var cmds = init._1;
		var subs = subscriptions(model);
		dispatchEffects(managers, cmds, subs);
		callback(_elm_lang$core$Native_Scheduler.succeed(model));
	});

	function onMessage(msg, model)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
			var results = A2(update, msg, model);
			model = results._0;
			updateView(model);
			var cmds = results._1;
			var subs = subscriptions(model);
			dispatchEffects(managers, cmds, subs);
			callback(_elm_lang$core$Native_Scheduler.succeed(model));
		});
	}

	var mainProcess = spawnLoop(initApp, onMessage);

	function enqueue(msg)
	{
		_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);
	}

	var ports = setupEffects(managers, enqueue);

	return ports ? { ports: ports } : {};
}


// EFFECT MANAGERS

var effectManagers = {};

function setupEffects(managers, callback)
{
	var ports;

	// setup all necessary effect managers
	for (var key in effectManagers)
	{
		var manager = effectManagers[key];

		if (manager.isForeign)
		{
			ports = ports || {};
			ports[key] = manager.tag === 'cmd'
				? setupOutgoingPort(key)
				: setupIncomingPort(key, callback);
		}

		managers[key] = makeManager(manager, callback);
	}

	return ports;
}

function makeManager(info, callback)
{
	var router = {
		main: callback,
		self: undefined
	};

	var tag = info.tag;
	var onEffects = info.onEffects;
	var onSelfMsg = info.onSelfMsg;

	function onMessage(msg, state)
	{
		if (msg.ctor === 'self')
		{
			return A3(onSelfMsg, router, msg._0, state);
		}

		var fx = msg._0;
		switch (tag)
		{
			case 'cmd':
				return A3(onEffects, router, fx.cmds, state);

			case 'sub':
				return A3(onEffects, router, fx.subs, state);

			case 'fx':
				return A4(onEffects, router, fx.cmds, fx.subs, state);
		}
	}

	var process = spawnLoop(info.init, onMessage);
	router.self = process;
	return process;
}

function sendToApp(router, msg)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		router.main(msg);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sendToSelf(router, msg)
{
	return A2(_elm_lang$core$Native_Scheduler.send, router.self, {
		ctor: 'self',
		_0: msg
	});
}


// HELPER for STATEFUL LOOPS

function spawnLoop(init, onMessage)
{
	var andThen = _elm_lang$core$Native_Scheduler.andThen;

	function loop(state)
	{
		var handleMsg = _elm_lang$core$Native_Scheduler.receive(function(msg) {
			return onMessage(msg, state);
		});
		return A2(andThen, loop, handleMsg);
	}

	var task = A2(andThen, loop, init);

	return _elm_lang$core$Native_Scheduler.rawSpawn(task);
}


// BAGS

function leaf(home)
{
	return function(value)
	{
		return {
			type: 'leaf',
			home: home,
			value: value
		};
	};
}

function batch(list)
{
	return {
		type: 'node',
		branches: list
	};
}

function map(tagger, bag)
{
	return {
		type: 'map',
		tagger: tagger,
		tree: bag
	}
}


// PIPE BAGS INTO EFFECT MANAGERS

function dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	gatherEffects(true, cmdBag, effectsDict, null);
	gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		var fx = home in effectsDict
			? effectsDict[home]
			: {
				cmds: _elm_lang$core$Native_List.Nil,
				subs: _elm_lang$core$Native_List.Nil
			};

		_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });
	}
}

function gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.type)
	{
		case 'leaf':
			var home = bag.home;
			var effect = toEffect(isCmd, home, taggers, bag.value);
			effectsDict[home] = insert(isCmd, effect, effectsDict[home]);
			return;

		case 'node':
			var list = bag.branches;
			while (list.ctor !== '[]')
			{
				gatherEffects(isCmd, list._0, effectsDict, taggers);
				list = list._1;
			}
			return;

		case 'map':
			gatherEffects(isCmd, bag.tree, effectsDict, {
				tagger: bag.tagger,
				rest: taggers
			});
			return;
	}
}

function toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		var temp = taggers;
		while (temp)
		{
			x = temp.tagger(x);
			temp = temp.rest;
		}
		return x;
	}

	var map = isCmd
		? effectManagers[home].cmdMap
		: effectManagers[home].subMap;

	return A2(map, applyTaggers, value)
}

function insert(isCmd, newEffect, effects)
{
	effects = effects || {
		cmds: _elm_lang$core$Native_List.Nil,
		subs: _elm_lang$core$Native_List.Nil
	};
	if (isCmd)
	{
		effects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);
		return effects;
	}
	effects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);
	return effects;
}


// PORTS

function checkPortName(name)
{
	if (name in effectManagers)
	{
		throw new Error('There can only be one port named `' + name + '`, but your program has multiple.');
	}
}


// OUTGOING PORTS

function outgoingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'cmd',
		cmdMap: outgoingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var outgoingPortMap = F2(function cmdMap(tagger, value) {
	return value;
});

function setupOutgoingPort(name)
{
	var subs = [];
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, cmdList, state)
	{
		while (cmdList.ctor !== '[]')
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = converter(cmdList._0);
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
			cmdList = cmdList._1;
		}
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}


// INCOMING PORTS

function incomingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'sub',
		subMap: incomingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var incomingPortMap = F2(function subMap(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});

function setupIncomingPort(name, callback)
{
	var sentBeforeInit = [];
	var subs = _elm_lang$core$Native_List.Nil;
	var converter = effectManagers[name].converter;
	var currentOnEffects = preInitOnEffects;
	var currentSend = preInitSend;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function preInitOnEffects(router, subList, state)
	{
		var postInitResult = postInitOnEffects(router, subList, state);

		for(var i = 0; i < sentBeforeInit.length; i++)
		{
			postInitSend(sentBeforeInit[i]);
		}

		sentBeforeInit = null; // to release objects held in queue
		currentSend = postInitSend;
		currentOnEffects = postInitOnEffects;
		return postInitResult;
	}

	function postInitOnEffects(router, subList, state)
	{
		subs = subList;
		return init;
	}

	function onEffects(router, subList, state)
	{
		return currentOnEffects(router, subList, state);
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function preInitSend(value)
	{
		sentBeforeInit.push(value);
	}

	function postInitSend(value)
	{
		var temp = subs;
		while (temp.ctor !== '[]')
		{
			callback(temp._0(value));
			temp = temp._1;
		}
	}

	function send(incomingValue)
	{
		var result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);
		if (result.ctor === 'Err')
		{
			throw new Error('Trying to send an unexpected type of value through port `' + name + '`:\n' + result._0);
		}

		currentSend(result._0);
	}

	return { send: send };
}

return {
	// routers
	sendToApp: F2(sendToApp),
	sendToSelf: F2(sendToSelf),

	// global setup
	effectManagers: effectManagers,
	outgoingPort: outgoingPort,
	incomingPort: incomingPort,

	htmlToProgram: htmlToProgram,
	program: program,
	programWithFlags: programWithFlags,
	initialize: initialize,

	// effect bags
	leaf: leaf,
	batch: batch,
	map: F2(map)
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Scheduler = function() {

var MAX_STEPS = 10000;


// TASKS

function succeed(value)
{
	return {
		ctor: '_Task_succeed',
		value: value
	};
}

function fail(error)
{
	return {
		ctor: '_Task_fail',
		value: error
	};
}

function nativeBinding(callback)
{
	return {
		ctor: '_Task_nativeBinding',
		callback: callback,
		cancel: null
	};
}

function andThen(callback, task)
{
	return {
		ctor: '_Task_andThen',
		callback: callback,
		task: task
	};
}

function onError(callback, task)
{
	return {
		ctor: '_Task_onError',
		callback: callback,
		task: task
	};
}

function receive(callback)
{
	return {
		ctor: '_Task_receive',
		callback: callback
	};
}


// PROCESSES

function rawSpawn(task)
{
	var process = {
		ctor: '_Process',
		id: _elm_lang$core$Native_Utils.guid(),
		root: task,
		stack: null,
		mailbox: []
	};

	enqueue(process);

	return process;
}

function spawn(task)
{
	return nativeBinding(function(callback) {
		var process = rawSpawn(task);
		callback(succeed(process));
	});
}

function rawSend(process, msg)
{
	process.mailbox.push(msg);
	enqueue(process);
}

function send(process, msg)
{
	return nativeBinding(function(callback) {
		rawSend(process, msg);
		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function kill(process)
{
	return nativeBinding(function(callback) {
		var root = process.root;
		if (root.ctor === '_Task_nativeBinding' && root.cancel)
		{
			root.cancel();
		}

		process.root = null;

		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sleep(time)
{
	return nativeBinding(function(callback) {
		var id = setTimeout(function() {
			callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}


// STEP PROCESSES

function step(numSteps, process)
{
	while (numSteps < MAX_STEPS)
	{
		var ctor = process.root.ctor;

		if (ctor === '_Task_succeed')
		{
			while (process.stack && process.stack.ctor === '_Task_onError')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_fail')
		{
			while (process.stack && process.stack.ctor === '_Task_andThen')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_andThen')
		{
			process.stack = {
				ctor: '_Task_andThen',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_onError')
		{
			process.stack = {
				ctor: '_Task_onError',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_nativeBinding')
		{
			process.root.cancel = process.root.callback(function(newRoot) {
				process.root = newRoot;
				enqueue(process);
			});

			break;
		}

		if (ctor === '_Task_receive')
		{
			var mailbox = process.mailbox;
			if (mailbox.length === 0)
			{
				break;
			}

			process.root = process.root.callback(mailbox.shift());
			++numSteps;
			continue;
		}

		throw new Error(ctor);
	}

	if (numSteps < MAX_STEPS)
	{
		return numSteps + 1;
	}
	enqueue(process);

	return numSteps;
}


// WORK QUEUE

var working = false;
var workQueue = [];

function enqueue(process)
{
	workQueue.push(process);

	if (!working)
	{
		setTimeout(work, 0);
		working = true;
	}
}

function work()
{
	var numSteps = 0;
	var process;
	while (numSteps < MAX_STEPS && (process = workQueue.shift()))
	{
		if (process.root)
		{
			numSteps = step(numSteps, process);
		}
	}
	if (!process)
	{
		working = false;
		return;
	}
	setTimeout(work, 0);
}


return {
	succeed: succeed,
	fail: fail,
	nativeBinding: nativeBinding,
	andThen: F2(andThen),
	onError: F2(onError),
	receive: receive,

	spawn: spawn,
	kill: kill,
	sleep: sleep,
	send: F2(send),

	rawSpawn: rawSpawn,
	rawSend: rawSend
};

}();
var _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};
_elm_lang$core$Platform_Cmd_ops['!'] = F2(
	function (model, commands) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(commands)
		};
	});
var _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Cmd$Cmd = {ctor: 'Cmd'};

var _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Sub$Sub = {ctor: 'Sub'};

var _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;
var _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;
var _elm_lang$core$Platform$programWithFlags = _elm_lang$core$Native_Platform.programWithFlags;
var _elm_lang$core$Platform$program = _elm_lang$core$Native_Platform.program;
var _elm_lang$core$Platform$Program = {ctor: 'Program'};
var _elm_lang$core$Platform$Task = {ctor: 'Task'};
var _elm_lang$core$Platform$ProcessId = {ctor: 'ProcessId'};
var _elm_lang$core$Platform$Router = {ctor: 'Router'};

var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode = _elm_lang$core$Json_Decode$succeed;
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$resolve = _elm_lang$core$Json_Decode$andThen(_elm_lang$core$Basics$identity);
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom = _elm_lang$core$Json_Decode$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded = function (_p0) {
	return _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom(
		_elm_lang$core$Json_Decode$succeed(_p0));
};
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder = F3(
	function (pathDecoder, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return _elm_lang$core$Json_Decode$oneOf(
				{
					ctor: '::',
					_0: decoder,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Json_Decode$null(fallback),
						_1: {ctor: '[]'}
					}
				});
		};
		var handleResult = function (input) {
			var _p1 = A2(_elm_lang$core$Json_Decode$decodeValue, pathDecoder, input);
			if (_p1.ctor === 'Ok') {
				var _p2 = A2(
					_elm_lang$core$Json_Decode$decodeValue,
					nullOr(valDecoder),
					_p1._0);
				if (_p2.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(_p2._0);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p2._0);
				}
			} else {
				return _elm_lang$core$Json_Decode$succeed(fallback);
			}
		};
		return A2(_elm_lang$core$Json_Decode$andThen, handleResult, _elm_lang$core$Json_Decode$value);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalAt = F4(
	function (path, valDecoder, fallback, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder,
				A2(_elm_lang$core$Json_Decode$at, path, _elm_lang$core$Json_Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder,
				A2(_elm_lang$core$Json_Decode$field, key, _elm_lang$core$Json_Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt = F3(
	function (path, valDecoder, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A2(_elm_lang$core$Json_Decode$at, path, valDecoder),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A2(_elm_lang$core$Json_Decode$field, key, valDecoder),
			decoder);
	});

var _ccapndave$elm_update_extra$Update_Extra$identity = function (model) {
	return A2(
		_elm_lang$core$Platform_Cmd_ops['!'],
		model,
		{ctor: '[]'});
};
var _ccapndave$elm_update_extra$Update_Extra$mapCmd = F2(
	function (tagger, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: A2(_elm_lang$core$Platform_Cmd$map, tagger, _p1._1)
		};
	});
var _ccapndave$elm_update_extra$Update_Extra$addCmd = F2(
	function (cmd_, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: _p3._0,
			_1: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: _p3._1,
					_1: {
						ctor: '::',
						_0: cmd_,
						_1: {ctor: '[]'}
					}
				})
		};
	});
var _ccapndave$elm_update_extra$Update_Extra$updateModel = F2(
	function (f, _p4) {
		var _p5 = _p4;
		return {
			ctor: '_Tuple2',
			_0: f(_p5._0),
			_1: _p5._1
		};
	});
var _ccapndave$elm_update_extra$Update_Extra$filter = F2(
	function (pred, f) {
		return pred ? f : _elm_lang$core$Basics$identity;
	});
var _ccapndave$elm_update_extra$Update_Extra$andThen = F3(
	function (update, msg, _p6) {
		var _p7 = _p6;
		var _p8 = A2(update, msg, _p7._0);
		var model_ = _p8._0;
		var cmd_ = _p8._1;
		return {
			ctor: '_Tuple2',
			_0: model_,
			_1: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: _p7._1,
					_1: {
						ctor: '::',
						_0: cmd_,
						_1: {ctor: '[]'}
					}
				})
		};
	});
var _ccapndave$elm_update_extra$Update_Extra$sequence = F3(
	function (update, msgs, init) {
		var foldUpdate = _ccapndave$elm_update_extra$Update_Extra$andThen(update);
		return A3(_elm_lang$core$List$foldl, foldUpdate, init, msgs);
	});

var _debois$elm_dom$DOM$className = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'className',
		_1: {ctor: '[]'}
	},
	_elm_lang$core$Json_Decode$string);
var _debois$elm_dom$DOM$scrollTop = A2(_elm_lang$core$Json_Decode$field, 'scrollTop', _elm_lang$core$Json_Decode$float);
var _debois$elm_dom$DOM$scrollLeft = A2(_elm_lang$core$Json_Decode$field, 'scrollLeft', _elm_lang$core$Json_Decode$float);
var _debois$elm_dom$DOM$offsetTop = A2(_elm_lang$core$Json_Decode$field, 'offsetTop', _elm_lang$core$Json_Decode$float);
var _debois$elm_dom$DOM$offsetLeft = A2(_elm_lang$core$Json_Decode$field, 'offsetLeft', _elm_lang$core$Json_Decode$float);
var _debois$elm_dom$DOM$offsetHeight = A2(_elm_lang$core$Json_Decode$field, 'offsetHeight', _elm_lang$core$Json_Decode$float);
var _debois$elm_dom$DOM$offsetWidth = A2(_elm_lang$core$Json_Decode$field, 'offsetWidth', _elm_lang$core$Json_Decode$float);
var _debois$elm_dom$DOM$childNodes = function (decoder) {
	var loop = F2(
		function (idx, xs) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (_p0) {
					return A2(
						_elm_lang$core$Maybe$withDefault,
						_elm_lang$core$Json_Decode$succeed(xs),
						A2(
							_elm_lang$core$Maybe$map,
							function (x) {
								return A2(
									loop,
									idx + 1,
									{ctor: '::', _0: x, _1: xs});
							},
							_p0));
				},
				_elm_lang$core$Json_Decode$maybe(
					A2(
						_elm_lang$core$Json_Decode$field,
						_elm_lang$core$Basics$toString(idx),
						decoder)));
		});
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$List$reverse,
		A2(
			_elm_lang$core$Json_Decode$field,
			'childNodes',
			A2(
				loop,
				0,
				{ctor: '[]'})));
};
var _debois$elm_dom$DOM$childNode = function (idx) {
	return _elm_lang$core$Json_Decode$at(
		{
			ctor: '::',
			_0: 'childNodes',
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Basics$toString(idx),
				_1: {ctor: '[]'}
			}
		});
};
var _debois$elm_dom$DOM$parentElement = function (decoder) {
	return A2(_elm_lang$core$Json_Decode$field, 'parentElement', decoder);
};
var _debois$elm_dom$DOM$previousSibling = function (decoder) {
	return A2(_elm_lang$core$Json_Decode$field, 'previousSibling', decoder);
};
var _debois$elm_dom$DOM$nextSibling = function (decoder) {
	return A2(_elm_lang$core$Json_Decode$field, 'nextSibling', decoder);
};
var _debois$elm_dom$DOM$offsetParent = F2(
	function (x, decoder) {
		return _elm_lang$core$Json_Decode$oneOf(
			{
				ctor: '::',
				_0: A2(
					_elm_lang$core$Json_Decode$field,
					'offsetParent',
					_elm_lang$core$Json_Decode$null(x)),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$core$Json_Decode$field, 'offsetParent', decoder),
					_1: {ctor: '[]'}
				}
			});
	});
var _debois$elm_dom$DOM$position = F2(
	function (x, y) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (_p1) {
				var _p2 = _p1;
				var _p4 = _p2._1;
				var _p3 = _p2._0;
				return A2(
					_debois$elm_dom$DOM$offsetParent,
					{ctor: '_Tuple2', _0: _p3, _1: _p4},
					A2(_debois$elm_dom$DOM$position, _p3, _p4));
			},
			A5(
				_elm_lang$core$Json_Decode$map4,
				F4(
					function (scrollLeft, scrollTop, offsetLeft, offsetTop) {
						return {ctor: '_Tuple2', _0: (x + offsetLeft) - scrollLeft, _1: (y + offsetTop) - scrollTop};
					}),
				_debois$elm_dom$DOM$scrollLeft,
				_debois$elm_dom$DOM$scrollTop,
				_debois$elm_dom$DOM$offsetLeft,
				_debois$elm_dom$DOM$offsetTop));
	});
var _debois$elm_dom$DOM$boundingClientRect = A4(
	_elm_lang$core$Json_Decode$map3,
	F3(
		function (_p5, width, height) {
			var _p6 = _p5;
			return {top: _p6._1, left: _p6._0, width: width, height: height};
		}),
	A2(_debois$elm_dom$DOM$position, 0, 0),
	_debois$elm_dom$DOM$offsetWidth,
	_debois$elm_dom$DOM$offsetHeight);
var _debois$elm_dom$DOM$target = function (decoder) {
	return A2(_elm_lang$core$Json_Decode$field, 'target', decoder);
};
var _debois$elm_dom$DOM$Rectangle = F4(
	function (a, b, c, d) {
		return {top: a, left: b, width: c, height: d};
	});

var _elm_lang$virtual_dom$VirtualDom_Debug$wrap;
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;

var _elm_lang$virtual_dom$Native_VirtualDom = function() {

var STYLE_KEY = 'STYLE';
var EVENT_KEY = 'EVENT';
var ATTR_KEY = 'ATTR';
var ATTR_NS_KEY = 'ATTR_NS';

var localDoc = typeof document !== 'undefined' ? document : {};


////////////  VIRTUAL DOM NODES  ////////////


function text(string)
{
	return {
		type: 'text',
		text: string
	};
}


function node(tag)
{
	return F2(function(factList, kidList) {
		return nodeHelp(tag, factList, kidList);
	});
}


function nodeHelp(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function keyedNode(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid._1.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'keyed-node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function custom(factList, model, impl)
{
	var facts = organizeFacts(factList).facts;

	return {
		type: 'custom',
		facts: facts,
		model: model,
		impl: impl
	};
}


function map(tagger, node)
{
	return {
		type: 'tagger',
		tagger: tagger,
		node: node,
		descendantsCount: 1 + (node.descendantsCount || 0)
	};
}


function thunk(func, args, thunk)
{
	return {
		type: 'thunk',
		func: func,
		args: args,
		thunk: thunk,
		node: undefined
	};
}

function lazy(fn, a)
{
	return thunk(fn, [a], function() {
		return fn(a);
	});
}

function lazy2(fn, a, b)
{
	return thunk(fn, [a,b], function() {
		return A2(fn, a, b);
	});
}

function lazy3(fn, a, b, c)
{
	return thunk(fn, [a,b,c], function() {
		return A3(fn, a, b, c);
	});
}



// FACTS


function organizeFacts(factList)
{
	var namespace, facts = {};

	while (factList.ctor !== '[]')
	{
		var entry = factList._0;
		var key = entry.key;

		if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		{
			var subFacts = facts[key] || {};
			subFacts[entry.realKey] = entry.value;
			facts[key] = subFacts;
		}
		else if (key === STYLE_KEY)
		{
			var styles = facts[key] || {};
			var styleList = entry.value;
			while (styleList.ctor !== '[]')
			{
				var style = styleList._0;
				styles[style._0] = style._1;
				styleList = styleList._1;
			}
			facts[key] = styles;
		}
		else if (key === 'namespace')
		{
			namespace = entry.value;
		}
		else if (key === 'className')
		{
			var classes = facts[key];
			facts[key] = typeof classes === 'undefined'
				? entry.value
				: classes + ' ' + entry.value;
		}
 		else
		{
			facts[key] = entry.value;
		}
		factList = factList._1;
	}

	return {
		facts: facts,
		namespace: namespace
	};
}



////////////  PROPERTIES AND ATTRIBUTES  ////////////


function style(value)
{
	return {
		key: STYLE_KEY,
		value: value
	};
}


function property(key, value)
{
	return {
		key: key,
		value: value
	};
}


function attribute(key, value)
{
	return {
		key: ATTR_KEY,
		realKey: key,
		value: value
	};
}


function attributeNS(namespace, key, value)
{
	return {
		key: ATTR_NS_KEY,
		realKey: key,
		value: {
			value: value,
			namespace: namespace
		}
	};
}


function on(name, options, decoder)
{
	return {
		key: EVENT_KEY,
		realKey: name,
		value: {
			options: options,
			decoder: decoder
		}
	};
}


function equalEvents(a, b)
{
	if (a.options !== b.options)
	{
		if (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault)
		{
			return false;
		}
	}
	return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
}


function mapProperty(func, property)
{
	if (property.key !== EVENT_KEY)
	{
		return property;
	}
	return on(
		property.realKey,
		property.value.options,
		A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder)
	);
}


////////////  RENDER  ////////////


function render(vNode, eventNode)
{
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return render(vNode.node, eventNode);

		case 'tagger':
			var subNode = vNode.node;
			var tagger = vNode.tagger;

			while (subNode.type === 'tagger')
			{
				typeof tagger !== 'object'
					? tagger = [tagger, subNode.tagger]
					: tagger.push(subNode.tagger);

				subNode = subNode.node;
			}

			var subEventRoot = { tagger: tagger, parent: eventNode };
			var domNode = render(subNode, subEventRoot);
			domNode.elm_event_node_ref = subEventRoot;
			return domNode;

		case 'text':
			return localDoc.createTextNode(vNode.text);

		case 'node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i], eventNode));
			}

			return domNode;

		case 'keyed-node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i]._1, eventNode));
			}

			return domNode;

		case 'custom':
			var domNode = vNode.impl.render(vNode.model);
			applyFacts(domNode, eventNode, vNode.facts);
			return domNode;
	}
}



////////////  APPLY FACTS  ////////////


function applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		switch (key)
		{
			case STYLE_KEY:
				applyStyles(domNode, value);
				break;

			case EVENT_KEY:
				applyEvents(domNode, eventNode, value);
				break;

			case ATTR_KEY:
				applyAttrs(domNode, value);
				break;

			case ATTR_NS_KEY:
				applyAttrsNS(domNode, value);
				break;

			case 'value':
				if (domNode[key] !== value)
				{
					domNode[key] = value;
				}
				break;

			default:
				domNode[key] = value;
				break;
		}
	}
}

function applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}

function applyEvents(domNode, eventNode, events)
{
	var allHandlers = domNode.elm_handlers || {};

	for (var key in events)
	{
		var handler = allHandlers[key];
		var value = events[key];

		if (typeof value === 'undefined')
		{
			domNode.removeEventListener(key, handler);
			allHandlers[key] = undefined;
		}
		else if (typeof handler === 'undefined')
		{
			var handler = makeEventHandler(eventNode, value);
			domNode.addEventListener(key, handler);
			allHandlers[key] = handler;
		}
		else
		{
			handler.info = value;
		}
	}

	domNode.elm_handlers = allHandlers;
}

function makeEventHandler(eventNode, info)
{
	function eventHandler(event)
	{
		var info = eventHandler.info;

		var value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);

		if (value.ctor === 'Ok')
		{
			var options = info.options;
			if (options.stopPropagation)
			{
				event.stopPropagation();
			}
			if (options.preventDefault)
			{
				event.preventDefault();
			}

			var message = value._0;

			var currentEventNode = eventNode;
			while (currentEventNode)
			{
				var tagger = currentEventNode.tagger;
				if (typeof tagger === 'function')
				{
					message = tagger(message);
				}
				else
				{
					for (var i = tagger.length; i--; )
					{
						message = tagger[i](message);
					}
				}
				currentEventNode = currentEventNode.parent;
			}
		}
	};

	eventHandler.info = info;

	return eventHandler;
}

function applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		if (typeof value === 'undefined')
		{
			domNode.removeAttribute(key);
		}
		else
		{
			domNode.setAttribute(key, value);
		}
	}
}

function applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.namespace;
		var value = pair.value;

		if (typeof value === 'undefined')
		{
			domNode.removeAttributeNS(namespace, key);
		}
		else
		{
			domNode.setAttributeNS(namespace, key, value);
		}
	}
}



////////////  DIFF  ////////////


function diff(a, b)
{
	var patches = [];
	diffHelp(a, b, patches, 0);
	return patches;
}


function makePatch(type, index, data)
{
	return {
		index: index,
		type: type,
		data: data,
		domNode: undefined,
		eventNode: undefined
	};
}


function diffHelp(a, b, patches, index)
{
	if (a === b)
	{
		return;
	}

	var aType = a.type;
	var bType = b.type;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (aType !== bType)
	{
		patches.push(makePatch('p-redraw', index, b));
		return;
	}

	// Now we know that both nodes are the same type.
	switch (bType)
	{
		case 'thunk':
			var aArgs = a.args;
			var bArgs = b.args;
			var i = aArgs.length;
			var same = a.func === b.func && i === bArgs.length;
			while (same && i--)
			{
				same = aArgs[i] === bArgs[i];
			}
			if (same)
			{
				b.node = a.node;
				return;
			}
			b.node = b.thunk();
			var subPatches = [];
			diffHelp(a.node, b.node, subPatches, 0);
			if (subPatches.length > 0)
			{
				patches.push(makePatch('p-thunk', index, subPatches));
			}
			return;

		case 'tagger':
			// gather nested taggers
			var aTaggers = a.tagger;
			var bTaggers = b.tagger;
			var nesting = false;

			var aSubNode = a.node;
			while (aSubNode.type === 'tagger')
			{
				nesting = true;

				typeof aTaggers !== 'object'
					? aTaggers = [aTaggers, aSubNode.tagger]
					: aTaggers.push(aSubNode.tagger);

				aSubNode = aSubNode.node;
			}

			var bSubNode = b.node;
			while (bSubNode.type === 'tagger')
			{
				nesting = true;

				typeof bTaggers !== 'object'
					? bTaggers = [bTaggers, bSubNode.tagger]
					: bTaggers.push(bSubNode.tagger);

				bSubNode = bSubNode.node;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && aTaggers.length !== bTaggers.length)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			{
				patches.push(makePatch('p-tagger', index, bTaggers));
			}

			// diff everything below the taggers
			diffHelp(aSubNode, bSubNode, patches, index + 1);
			return;

		case 'text':
			if (a.text !== b.text)
			{
				patches.push(makePatch('p-text', index, b.text));
				return;
			}

			return;

		case 'node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffChildren(a, b, patches, index);
			return;

		case 'keyed-node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffKeyedChildren(a, b, patches, index);
			return;

		case 'custom':
			if (a.impl !== b.impl)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);
			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			var patch = b.impl.diff(a,b);
			if (patch)
			{
				patches.push(makePatch('p-custom', index, patch));
				return;
			}

			return;
	}
}


// assumes the incoming arrays are the same length
function pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function diffFacts(a, b, category)
{
	var diff;

	// look for changes and removals
	for (var aKey in a)
	{
		if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		{
			var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[aKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(aKey in b))
		{
			diff = diff || {};
			diff[aKey] =
				(typeof category === 'undefined')
					? (typeof a[aKey] === 'string' ? '' : null)
					:
				(category === STYLE_KEY)
					? ''
					:
				(category === EVENT_KEY || category === ATTR_KEY)
					? undefined
					:
				{ namespace: a[aKey].namespace, value: undefined };

			continue;
		}

		var aValue = a[aKey];
		var bValue = b[aKey];

		// reference equal, so don't worry about it
		if (aValue === bValue && aKey !== 'value'
			|| category === EVENT_KEY && equalEvents(aValue, bValue))
		{
			continue;
		}

		diff = diff || {};
		diff[aKey] = bValue;
	}

	// add new stuff
	for (var bKey in b)
	{
		if (!(bKey in a))
		{
			diff = diff || {};
			diff[bKey] = b[bKey];
		}
	}

	return diff;
}


function diffChildren(aParent, bParent, patches, rootIndex)
{
	var aChildren = aParent.children;
	var bChildren = bParent.children;

	var aLen = aChildren.length;
	var bLen = bChildren.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (aLen > bLen)
	{
		patches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));
	}
	else if (aLen < bLen)
	{
		patches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	var index = rootIndex;
	var minLen = aLen < bLen ? aLen : bLen;
	for (var i = 0; i < minLen; i++)
	{
		index++;
		var aChild = aChildren[i];
		diffHelp(aChild, bChildren[i], patches, index);
		index += aChild.descendantsCount || 0;
	}
}



////////////  KEYED DIFF  ////////////


function diffKeyedChildren(aParent, bParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var aChildren = aParent.children;
	var bChildren = bParent.children;
	var aLen = aChildren.length;
	var bLen = bChildren.length;
	var aIndex = 0;
	var bIndex = 0;

	var index = rootIndex;

	while (aIndex < aLen && bIndex < bLen)
	{
		var a = aChildren[aIndex];
		var b = bChildren[bIndex];

		var aKey = a._0;
		var bKey = b._0;
		var aNode = a._1;
		var bNode = b._1;

		// check if keys match

		if (aKey === bKey)
		{
			index++;
			diffHelp(aNode, bNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex++;
			bIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var aLookAhead = aIndex + 1 < aLen;
		var bLookAhead = bIndex + 1 < bLen;

		if (aLookAhead)
		{
			var aNext = aChildren[aIndex + 1];
			var aNextKey = aNext._0;
			var aNextNode = aNext._1;
			var oldMatch = bKey === aNextKey;
		}

		if (bLookAhead)
		{
			var bNext = bChildren[bIndex + 1];
			var bNextKey = bNext._0;
			var bNextNode = bNext._1;
			var newMatch = aKey === bNextKey;
		}


		// swap a and b
		if (aLookAhead && bLookAhead && newMatch && oldMatch)
		{
			index++;
			diffHelp(aNode, bNextNode, localPatches, index);
			insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			removeNode(changes, localPatches, aKey, aNextNode, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		// insert b
		if (bLookAhead && newMatch)
		{
			index++;
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			diffHelp(aNode, bNextNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex += 1;
			bIndex += 2;
			continue;
		}

		// remove a
		if (aLookAhead && oldMatch)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 1;
			continue;
		}

		// remove a, insert b
		if (aLookAhead && bLookAhead && aNextKey === bNextKey)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNextNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (aIndex < aLen)
	{
		index++;
		var a = aChildren[aIndex];
		var aNode = a._1;
		removeNode(changes, localPatches, a._0, aNode, index);
		index += aNode.descendantsCount || 0;
		aIndex++;
	}

	var endInserts;
	while (bIndex < bLen)
	{
		endInserts = endInserts || [];
		var b = bChildren[bIndex];
		insertNode(changes, localPatches, b._0, b._1, undefined, endInserts);
		bIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined')
	{
		patches.push(makePatch('p-reorder', rootIndex, {
			patches: localPatches,
			inserts: inserts,
			endInserts: endInserts
		}));
	}
}



////////////  CHANGES FROM KEYED DIFF  ////////////


var POSTFIX = '_elmW6BL';


function insertNode(changes, localPatches, key, vnode, bIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		entry = {
			tag: 'insert',
			vnode: vnode,
			index: bIndex,
			data: undefined
		};

		inserts.push({ index: bIndex, entry: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.tag === 'remove')
	{
		inserts.push({ index: bIndex, entry: entry });

		entry.tag = 'move';
		var subPatches = [];
		diffHelp(entry.vnode, vnode, subPatches, entry.index);
		entry.index = bIndex;
		entry.data.data = {
			patches: subPatches,
			entry: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
}


function removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		var patch = makePatch('p-remove', index, undefined);
		localPatches.push(patch);

		changes[key] = {
			tag: 'remove',
			vnode: vnode,
			index: index,
			data: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.tag === 'insert')
	{
		entry.tag = 'move';
		var subPatches = [];
		diffHelp(vnode, entry.vnode, subPatches, index);

		var patch = makePatch('p-remove', index, {
			patches: subPatches,
			entry: entry
		});
		localPatches.push(patch);

		return;
	}

	// this key has already been removed or moved, a duplicate!
	removeNode(changes, localPatches, key + POSTFIX, vnode, index);
}



////////////  ADD DOM NODES  ////////////
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function addDomNodes(domNode, vNode, patches, eventNode)
{
	addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.index;

	while (index === low)
	{
		var patchType = patch.type;

		if (patchType === 'p-thunk')
		{
			addDomNodes(domNode, vNode.node, patch.data, eventNode);
		}
		else if (patchType === 'p-reorder')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var subPatches = patch.data.patches;
			if (subPatches.length > 0)
			{
				addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 'p-remove')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var data = patch.data;
			if (typeof data !== 'undefined')
			{
				data.entry.data = domNode;
				var subPatches = data.patches;
				if (subPatches.length > 0)
				{
					addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.index) > high)
		{
			return i;
		}
	}

	switch (vNode.type)
	{
		case 'tagger':
			var subNode = vNode.node;

			while (subNode.type === "tagger")
			{
				subNode = subNode.node;
			}

			return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		case 'node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j];
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'keyed-node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j]._1;
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'text':
		case 'thunk':
			throw new Error('should never traverse `text` or `thunk` nodes like this');
	}
}



////////////  APPLY PATCHES  ////////////


function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return applyPatchesHelp(rootDomNode, patches);
}

function applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.domNode
		var newNode = applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function applyPatch(domNode, patch)
{
	switch (patch.type)
	{
		case 'p-redraw':
			return applyPatchRedraw(domNode, patch.data, patch.eventNode);

		case 'p-facts':
			applyFacts(domNode, patch.eventNode, patch.data);
			return domNode;

		case 'p-text':
			domNode.replaceData(0, domNode.length, patch.data);
			return domNode;

		case 'p-thunk':
			return applyPatchesHelp(domNode, patch.data);

		case 'p-tagger':
			if (typeof domNode.elm_event_node_ref !== 'undefined')
			{
				domNode.elm_event_node_ref.tagger = patch.data;
			}
			else
			{
				domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
			}
			return domNode;

		case 'p-remove-last':
			var i = patch.data;
			while (i--)
			{
				domNode.removeChild(domNode.lastChild);
			}
			return domNode;

		case 'p-append':
			var newNodes = patch.data;
			for (var i = 0; i < newNodes.length; i++)
			{
				domNode.appendChild(render(newNodes[i], patch.eventNode));
			}
			return domNode;

		case 'p-remove':
			var data = patch.data;
			if (typeof data === 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.entry;
			if (typeof entry.index !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.data = applyPatchesHelp(domNode, data.patches);
			return domNode;

		case 'p-reorder':
			return applyPatchReorder(domNode, patch);

		case 'p-custom':
			var impl = patch.data;
			return impl.applyPatch(domNode, impl.data);

		default:
			throw new Error('Ran into an unknown patch!');
	}
}


function applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = render(vNode, eventNode);

	if (typeof newNode.elm_event_node_ref === 'undefined')
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function applyPatchReorder(domNode, patch)
{
	var data = patch.data;

	// remove end inserts
	var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

	// removals
	domNode = applyPatchesHelp(domNode, data.patches);

	// inserts
	var inserts = data.inserts;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.entry;
		var node = entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode);
		domNode.insertBefore(node, domNode.childNodes[insert.index]);
	}

	// add end inserts
	if (typeof frag !== 'undefined')
	{
		domNode.appendChild(frag);
	}

	return domNode;
}


function applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (typeof endInserts === 'undefined')
	{
		return;
	}

	var frag = localDoc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.entry;
		frag.appendChild(entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode)
		);
	}
	return frag;
}


// PROGRAMS

var program = makeProgram(checkNoFlags);
var programWithFlags = makeProgram(checkYesFlags);

function makeProgram(flagChecker)
{
	return F2(function(debugWrap, impl)
	{
		return function(flagDecoder)
		{
			return function(object, moduleName, debugMetadata)
			{
				var checker = flagChecker(flagDecoder, moduleName);
				if (typeof debugMetadata === 'undefined')
				{
					normalSetup(impl, object, moduleName, checker);
				}
				else
				{
					debugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);
				}
			};
		};
	});
}

function staticProgram(vNode)
{
	var nothing = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		_elm_lang$core$Platform_Cmd$none
	);
	return A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {
		init: nothing,
		view: function() { return vNode; },
		update: F2(function() { return nothing; }),
		subscriptions: function() { return _elm_lang$core$Platform_Sub$none; }
	})();
}


// FLAG CHECKERS

function checkNoFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flags === 'undefined')
		{
			return init;
		}

		var errorMessage =
			'The `' + moduleName + '` module does not need flags.\n'
			+ 'Initialize it with no arguments and you should be all set!';

		crash(errorMessage, domNode);
	};
}

function checkYesFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flagDecoder === 'undefined')
		{
			var errorMessage =
				'Are you trying to sneak a Never value into Elm? Trickster!\n'
				+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
				+ 'Use `program` instead if you do not want flags.'

			crash(errorMessage, domNode);
		}

		var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
		if (result.ctor === 'Ok')
		{
			return init(result._0);
		}

		var errorMessage =
			'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\n'
			+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
			+ result._0;

		crash(errorMessage, domNode);
	};
}

function crash(errorMessage, domNode)
{
	if (domNode)
	{
		domNode.innerHTML =
			'<div style="padding-left:1em;">'
			+ '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>'
			+ '<pre style="padding-left:1em;">' + errorMessage + '</pre>'
			+ '</div>';
	}

	throw new Error(errorMessage);
}


//  NORMAL SETUP

function normalSetup(impl, object, moduleName, flagChecker)
{
	object['embed'] = function embed(node, flags)
	{
		while (node.lastChild)
		{
			node.removeChild(node.lastChild);
		}

		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update,
			impl.subscriptions,
			normalRenderer(node, impl.view)
		);
	};

	object['fullscreen'] = function fullscreen(flags)
	{
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update,
			impl.subscriptions,
			normalRenderer(document.body, impl.view)
		);
	};
}

function normalRenderer(parentNode, view)
{
	return function(tagger, initialModel)
	{
		var eventNode = { tagger: tagger, parent: undefined };
		var initialVirtualNode = view(initialModel);
		var domNode = render(initialVirtualNode, eventNode);
		parentNode.appendChild(domNode);
		return makeStepper(domNode, view, initialVirtualNode, eventNode);
	};
}


// STEPPER

var rAF =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { setTimeout(callback, 1000 / 60); };

function makeStepper(domNode, view, initialVirtualNode, eventNode)
{
	var state = 'NO_REQUEST';
	var currNode = initialVirtualNode;
	var nextModel;

	function updateIfNeeded()
	{
		switch (state)
		{
			case 'NO_REQUEST':
				throw new Error(
					'Unexpected draw callback.\n' +
					'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.'
				);

			case 'PENDING_REQUEST':
				rAF(updateIfNeeded);
				state = 'EXTRA_REQUEST';

				var nextNode = view(nextModel);
				var patches = diff(currNode, nextNode);
				domNode = applyPatches(domNode, currNode, patches, eventNode);
				currNode = nextNode;

				return;

			case 'EXTRA_REQUEST':
				state = 'NO_REQUEST';
				return;
		}
	}

	return function stepper(model)
	{
		if (state === 'NO_REQUEST')
		{
			rAF(updateIfNeeded);
		}
		state = 'PENDING_REQUEST';
		nextModel = model;
	};
}


// DEBUG SETUP

function debugSetup(impl, object, moduleName, flagChecker)
{
	object['fullscreen'] = function fullscreen(flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};

	object['embed'] = function fullscreen(node, flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};
}

function scrollTask(popoutRef)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var doc = popoutRef.doc;
		if (doc)
		{
			var msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];
			if (msgs)
			{
				msgs.scrollTop = msgs.scrollHeight;
			}
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


function debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut)
{
	return function(tagger, initialModel)
	{
		var appEventNode = { tagger: tagger, parent: undefined };
		var eventNode = { tagger: tagger, parent: undefined };

		// make normal stepper
		var appVirtualNode = view(initialModel);
		var appNode = render(appVirtualNode, appEventNode);
		parentNode.appendChild(appNode);
		var appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);

		// make overlay stepper
		var overVirtualNode = viewIn(initialModel)._1;
		var overNode = render(overVirtualNode, eventNode);
		parentNode.appendChild(overNode);
		var wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);
		var overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);

		// make debugger stepper
		var debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);

		return function stepper(model)
		{
			appStepper(model);
			overStepper(model);
			debugStepper(model);
		}
	};
}

function makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef)
{
	var curr;
	var domNode;

	return function stepper(model)
	{
		if (!model.isDebuggerOpen)
		{
			return;
		}

		if (!popoutRef.doc)
		{
			curr = view(model);
			domNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);
			return;
		}

		// switch to document of popout
		localDoc = popoutRef.doc;

		var next = view(model);
		var patches = diff(curr, next);
		domNode = applyPatches(domNode, curr, patches, eventNode);
		curr = next;

		// switch back to normal document
		localDoc = document;
	};
}

function openDebugWindow(moduleName, popoutRef, virtualNode, eventNode)
{
	var w = 900;
	var h = 360;
	var x = screen.width - w;
	var y = screen.height - h;
	var debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);

	// switch to window document
	localDoc = debugWindow.document;

	popoutRef.doc = localDoc;
	localDoc.title = 'Debugger - ' + moduleName;
	localDoc.body.style.margin = '0';
	localDoc.body.style.padding = '0';
	var domNode = render(virtualNode, eventNode);
	localDoc.body.appendChild(domNode);

	localDoc.addEventListener('keydown', function(event) {
		if (event.metaKey && event.which === 82)
		{
			window.location.reload();
		}
		if (event.which === 38)
		{
			eventNode.tagger({ ctor: 'Up' });
			event.preventDefault();
		}
		if (event.which === 40)
		{
			eventNode.tagger({ ctor: 'Down' });
			event.preventDefault();
		}
	});

	function close()
	{
		popoutRef.doc = undefined;
		debugWindow.close();
	}
	window.addEventListener('unload', close);
	debugWindow.addEventListener('unload', function() {
		popoutRef.doc = undefined;
		window.removeEventListener('unload', close);
		eventNode.tagger({ ctor: 'Close' });
	});

	// switch back to the normal document
	localDoc = document;

	return domNode;
}


// BLOCK EVENTS

function wrapViewIn(appEventNode, overlayNode, viewIn)
{
	var ignorer = makeIgnorer(overlayNode);
	var blocking = 'Normal';
	var overflow;

	var normalTagger = appEventNode.tagger;
	var blockTagger = function() {};

	return function(model)
	{
		var tuple = viewIn(model);
		var newBlocking = tuple._0.ctor;
		appEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;
		if (blocking !== newBlocking)
		{
			traverse('removeEventListener', ignorer, blocking);
			traverse('addEventListener', ignorer, newBlocking);

			if (blocking === 'Normal')
			{
				overflow = document.body.style.overflow;
				document.body.style.overflow = 'hidden';
			}

			if (newBlocking === 'Normal')
			{
				document.body.style.overflow = overflow;
			}

			blocking = newBlocking;
		}
		return tuple._1;
	}
}

function traverse(verbEventListener, ignorer, blocking)
{
	switch(blocking)
	{
		case 'Normal':
			return;

		case 'Pause':
			return traverseHelp(verbEventListener, ignorer, mostEvents);

		case 'Message':
			return traverseHelp(verbEventListener, ignorer, allEvents);
	}
}

function traverseHelp(verbEventListener, handler, eventNames)
{
	for (var i = 0; i < eventNames.length; i++)
	{
		document.body[verbEventListener](eventNames[i], handler, true);
	}
}

function makeIgnorer(overlayNode)
{
	return function(event)
	{
		if (event.type === 'keydown' && event.metaKey && event.which === 82)
		{
			return;
		}

		var isScroll = event.type === 'scroll' || event.type === 'wheel';

		var node = event.target;
		while (node !== null)
		{
			if (node.className === 'elm-overlay-message-details' && isScroll)
			{
				return;
			}

			if (node === overlayNode && !isScroll)
			{
				return;
			}
			node = node.parentNode;
		}

		event.stopPropagation();
		event.preventDefault();
	}
}

var mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var allEvents = mostEvents.concat('wheel', 'scroll');


return {
	node: node,
	text: text,
	custom: custom,
	map: F2(map),

	on: F3(on),
	style: style,
	property: F2(property),
	attribute: F2(attribute),
	attributeNS: F3(attributeNS),
	mapProperty: F2(mapProperty),

	lazy: F2(lazy),
	lazy2: F3(lazy2),
	lazy3: F4(lazy3),
	keyedNode: F3(keyedNode),

	program: program,
	programWithFlags: programWithFlags,
	staticProgram: staticProgram
};

}();

var _elm_lang$core$Task$onError = _elm_lang$core$Native_Scheduler.onError;
var _elm_lang$core$Task$andThen = _elm_lang$core$Native_Scheduler.andThen;
var _elm_lang$core$Task$spawnCmd = F2(
	function (router, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Scheduler.spawn(
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Platform$sendToApp(router),
				_p1._0));
	});
var _elm_lang$core$Task$fail = _elm_lang$core$Native_Scheduler.fail;
var _elm_lang$core$Task$mapError = F2(
	function (convert, task) {
		return A2(
			_elm_lang$core$Task$onError,
			function (_p2) {
				return _elm_lang$core$Task$fail(
					convert(_p2));
			},
			task);
	});
var _elm_lang$core$Task$succeed = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return _elm_lang$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var _elm_lang$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return _elm_lang$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map3 = F4(
	function (func, taskA, taskB, taskC) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return _elm_lang$core$Task$succeed(
									A3(func, a, b, c));
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map4 = F5(
	function (func, taskA, taskB, taskC, taskD) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return _elm_lang$core$Task$succeed(
											A4(func, a, b, c, d));
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map5 = F6(
	function (func, taskA, taskB, taskC, taskD, taskE) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Task$andThen,
											function (e) {
												return _elm_lang$core$Task$succeed(
													A5(func, a, b, c, d, e));
											},
											taskE);
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$sequence = function (tasks) {
	var _p3 = tasks;
	if (_p3.ctor === '[]') {
		return _elm_lang$core$Task$succeed(
			{ctor: '[]'});
	} else {
		return A3(
			_elm_lang$core$Task$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p3._0,
			_elm_lang$core$Task$sequence(_p3._1));
	}
};
var _elm_lang$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			_elm_lang$core$Task$map,
			function (_p4) {
				return {ctor: '_Tuple0'};
			},
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Task$spawnCmd(router),
					commands)));
	});
var _elm_lang$core$Task$init = _elm_lang$core$Task$succeed(
	{ctor: '_Tuple0'});
var _elm_lang$core$Task$onSelfMsg = F3(
	function (_p7, _p6, _p5) {
		return _elm_lang$core$Task$succeed(
			{ctor: '_Tuple0'});
	});
var _elm_lang$core$Task$command = _elm_lang$core$Native_Platform.leaf('Task');
var _elm_lang$core$Task$Perform = function (a) {
	return {ctor: 'Perform', _0: a};
};
var _elm_lang$core$Task$perform = F2(
	function (toMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(_elm_lang$core$Task$map, toMessage, task)));
	});
var _elm_lang$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(
					_elm_lang$core$Task$onError,
					function (_p8) {
						return _elm_lang$core$Task$succeed(
							resultToMessage(
								_elm_lang$core$Result$Err(_p8)));
					},
					A2(
						_elm_lang$core$Task$andThen,
						function (_p9) {
							return _elm_lang$core$Task$succeed(
								resultToMessage(
									_elm_lang$core$Result$Ok(_p9)));
						},
						task))));
	});
var _elm_lang$core$Task$cmdMap = F2(
	function (tagger, _p10) {
		var _p11 = _p10;
		return _elm_lang$core$Task$Perform(
			A2(_elm_lang$core$Task$map, tagger, _p11._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Task'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Task$init, onEffects: _elm_lang$core$Task$onEffects, onSelfMsg: _elm_lang$core$Task$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Task$cmdMap};

var _elm_lang$virtual_dom$Native_Debug = function() {


// IMPORT / EXPORT

function unsafeCoerce(value)
{
	return value;
}

var upload = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
{
	var element = document.createElement('input');
	element.setAttribute('type', 'file');
	element.setAttribute('accept', 'text/json');
	element.style.display = 'none';
	element.addEventListener('change', function(event)
	{
		var fileReader = new FileReader();
		fileReader.onload = function(e)
		{
			callback(_elm_lang$core$Native_Scheduler.succeed(e.target.result));
		};
		fileReader.readAsText(event.target.files[0]);
		document.body.removeChild(element);
	});
	document.body.appendChild(element);
	element.click();
});

function download(historyLength, json)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var fileName = 'history-' + historyLength + '.txt';
		var jsonString = JSON.stringify(json);
		var mime = 'text/plain;charset=utf-8';
		var done = _elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0);

		// for IE10+
		if (navigator.msSaveBlob)
		{
			navigator.msSaveBlob(new Blob([jsonString], {type: mime}), fileName);
			return callback(done);
		}

		// for HTML5
		var element = document.createElement('a');
		element.setAttribute('href', 'data:' + mime + ',' + encodeURIComponent(jsonString));
		element.setAttribute('download', fileName);
		element.style.display = 'none';
		document.body.appendChild(element);
		element.click();
		document.body.removeChild(element);
		callback(done);
	});
}


// POPOUT

function messageToString(value)
{
	switch (typeof value)
	{
		case 'boolean':
			return value ? 'True' : 'False';
		case 'number':
			return value + '';
		case 'string':
			return '"' + addSlashes(value, false) + '"';
	}
	if (value instanceof String)
	{
		return '\'' + addSlashes(value, true) + '\'';
	}
	if (typeof value !== 'object' || value === null || !('ctor' in value))
	{
		return '…';
	}

	var ctorStarter = value.ctor.substring(0, 5);
	if (ctorStarter === '_Tupl' || ctorStarter === '_Task')
	{
		return '…'
	}
	if (['_Array', '<decoder>', '_Process', '::', '[]', 'Set_elm_builtin', 'RBNode_elm_builtin', 'RBEmpty_elm_builtin'].indexOf(value.ctor) >= 0)
	{
		return '…';
	}

	var keys = Object.keys(value);
	switch (keys.length)
	{
		case 1:
			return value.ctor;
		case 2:
			return value.ctor + ' ' + messageToString(value._0);
		default:
			return value.ctor + ' … ' + messageToString(value[keys[keys.length - 1]]);
	}
}


function primitive(str)
{
	return { ctor: 'Primitive', _0: str };
}


function init(value)
{
	var type = typeof value;

	if (type === 'boolean')
	{
		return {
			ctor: 'Constructor',
			_0: _elm_lang$core$Maybe$Just(value ? 'True' : 'False'),
			_1: true,
			_2: _elm_lang$core$Native_List.Nil
		};
	}

	if (type === 'number')
	{
		return primitive(value + '');
	}

	if (type === 'string')
	{
		return { ctor: 'S', _0: '"' + addSlashes(value, false) + '"' };
	}

	if (value instanceof String)
	{
		return { ctor: 'S', _0: "'" + addSlashes(value, true) + "'" };
	}

	if (value instanceof Date)
	{
		return primitive('<' + value.toString() + '>');
	}

	if (value === null)
	{
		return primitive('XXX');
	}

	if (type === 'object' && 'ctor' in value)
	{
		var ctor = value.ctor;

		if (ctor === '::' || ctor === '[]')
		{
			return {
				ctor: 'Sequence',
				_0: {ctor: 'ListSeq'},
				_1: true,
				_2: A2(_elm_lang$core$List$map, init, value)
			};
		}

		if (ctor === 'Set_elm_builtin')
		{
			return {
				ctor: 'Sequence',
				_0: {ctor: 'SetSeq'},
				_1: true,
				_2: A3(_elm_lang$core$Set$foldr, initCons, _elm_lang$core$Native_List.Nil, value)
			};
		}

		if (ctor === 'RBNode_elm_builtin' || ctor == 'RBEmpty_elm_builtin')
		{
			return {
				ctor: 'Dictionary',
				_0: true,
				_1: A3(_elm_lang$core$Dict$foldr, initKeyValueCons, _elm_lang$core$Native_List.Nil, value)
			};
		}

		if (ctor === '_Array')
		{
			return {
				ctor: 'Sequence',
				_0: {ctor: 'ArraySeq'},
				_1: true,
				_2: A3(_elm_lang$core$Array$foldr, initCons, _elm_lang$core$Native_List.Nil, value)
			};
		}

		var ctorStarter = value.ctor.substring(0, 5);
		if (ctorStarter === '_Task')
		{
			return primitive('<task>');
		}

		if (ctor === '<decoder>')
		{
			return primitive(ctor);
		}

		if (ctor === '_Process')
		{
			return primitive('<process>');
		}

		var list = _elm_lang$core$Native_List.Nil;
		for (var i in value)
		{
			if (i === 'ctor') continue;
			list = _elm_lang$core$Native_List.Cons(init(value[i]), list);
		}
		return {
			ctor: 'Constructor',
			_0: ctorStarter === '_Tupl' ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(ctor),
			_1: true,
			_2: _elm_lang$core$List$reverse(list)
		};
	}

	if (type === 'object')
	{
		var dict = _elm_lang$core$Dict$empty;
		for (var i in value)
		{
			dict = A3(_elm_lang$core$Dict$insert, i, init(value[i]), dict);
		}
		return { ctor: 'Record', _0: true, _1: dict };
	}

	return primitive('XXX');
}

var initCons = F2(initConsHelp);

function initConsHelp(value, list)
{
	return _elm_lang$core$Native_List.Cons(init(value), list);
}

var initKeyValueCons = F3(initKeyValueConsHelp);

function initKeyValueConsHelp(key, value, list)
{
	return _elm_lang$core$Native_List.Cons(
		_elm_lang$core$Native_Utils.Tuple2(init(key), init(value)),
		list
	);
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	upload: upload,
	download: F2(download),
	unsafeCoerce: unsafeCoerce,
	messageToString: messageToString,
	init: init
}

}();

var _elm_lang$virtual_dom$VirtualDom_Helpers$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom_Helpers$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom_Helpers$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom_Helpers$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom_Helpers$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom_Helpers$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom_Helpers$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom_Helpers$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom_Helpers$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom_Helpers$onClick = function (msg) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$virtual_dom$VirtualDom_Helpers$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom_Helpers$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom_Helpers$id = _elm_lang$virtual_dom$VirtualDom_Helpers$attribute('id');
var _elm_lang$virtual_dom$VirtualDom_Helpers$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom_Helpers$class = function (name) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$property,
		'className',
		_elm_lang$core$Json_Encode$string(name));
};
var _elm_lang$virtual_dom$VirtualDom_Helpers$href = function (name) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$property,
		'href',
		_elm_lang$core$Json_Encode$string(name));
};
var _elm_lang$virtual_dom$VirtualDom_Helpers$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom_Helpers$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom_Helpers$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom_Helpers$div = _elm_lang$virtual_dom$VirtualDom_Helpers$node('div');
var _elm_lang$virtual_dom$VirtualDom_Helpers$span = _elm_lang$virtual_dom$VirtualDom_Helpers$node('span');
var _elm_lang$virtual_dom$VirtualDom_Helpers$a = _elm_lang$virtual_dom$VirtualDom_Helpers$node('a');
var _elm_lang$virtual_dom$VirtualDom_Helpers$h1 = _elm_lang$virtual_dom$VirtualDom_Helpers$node('h1');
var _elm_lang$virtual_dom$VirtualDom_Helpers$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Helpers$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom_Helpers$Property = {ctor: 'Property'};

var _elm_lang$virtual_dom$VirtualDom_Expando$purple = _elm_lang$virtual_dom$VirtualDom_Helpers$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'color', _1: 'rgb(136, 19, 145)'},
		_1: {ctor: '[]'}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$blue = _elm_lang$virtual_dom$VirtualDom_Helpers$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'color', _1: 'rgb(28, 0, 207)'},
		_1: {ctor: '[]'}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$red = _elm_lang$virtual_dom$VirtualDom_Helpers$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'color', _1: 'rgb(196, 26, 22)'},
		_1: {ctor: '[]'}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$leftPad = function (maybeKey) {
	var _p0 = maybeKey;
	if (_p0.ctor === 'Nothing') {
		return _elm_lang$virtual_dom$VirtualDom_Helpers$style(
			{ctor: '[]'});
	} else {
		return _elm_lang$virtual_dom$VirtualDom_Helpers$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '4ch'},
				_1: {ctor: '[]'}
			});
	}
};
var _elm_lang$virtual_dom$VirtualDom_Expando$makeArrow = function (arrow) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$span,
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: '#777'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2ch'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '2ch'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'},
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(arrow),
			_1: {ctor: '[]'}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Expando$lineStarter = F3(
	function (maybeKey, maybeIsClosed, description) {
		var arrow = function () {
			var _p1 = maybeIsClosed;
			if (_p1.ctor === 'Nothing') {
				return _elm_lang$virtual_dom$VirtualDom_Expando$makeArrow('');
			} else {
				if (_p1._0 === true) {
					return _elm_lang$virtual_dom$VirtualDom_Expando$makeArrow('▸');
				} else {
					return _elm_lang$virtual_dom$VirtualDom_Expando$makeArrow('▾');
				}
			}
		}();
		var _p2 = maybeKey;
		if (_p2.ctor === 'Nothing') {
			return {ctor: '::', _0: arrow, _1: description};
		} else {
			return {
				ctor: '::',
				_0: arrow,
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$span,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Expando$purple,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p2._0),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' = '),
						_1: description
					}
				}
			};
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewExtraTinyRecord = F3(
	function (length, starter, entries) {
		var _p3 = entries;
		if (_p3.ctor === '[]') {
			return {
				ctor: '_Tuple2',
				_0: length + 1,
				_1: {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('}'),
					_1: {ctor: '[]'}
				}
			};
		} else {
			var _p5 = _p3._0;
			var nextLength = (length + _elm_lang$core$String$length(_p5)) + 1;
			if (_elm_lang$core$Native_Utils.cmp(nextLength, 18) > 0) {
				return {
					ctor: '_Tuple2',
					_0: length + 2,
					_1: {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('…}'),
						_1: {ctor: '[]'}
					}
				};
			} else {
				var _p4 = A3(_elm_lang$virtual_dom$VirtualDom_Expando$viewExtraTinyRecord, nextLength, ',', _p3._1);
				var finalLength = _p4._0;
				var otherNodes = _p4._1;
				return {
					ctor: '_Tuple2',
					_0: finalLength,
					_1: {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(starter),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$span,
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Expando$purple,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p5),
									_1: {ctor: '[]'}
								}),
							_1: otherNodes
						}
					}
				};
			}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$elideMiddle = function (str) {
	return (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$String$length(str),
		18) < 1) ? str : A2(
		_elm_lang$core$Basics_ops['++'],
		A2(_elm_lang$core$String$left, 8, str),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'...',
			A2(_elm_lang$core$String$right, 8, str)));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyHelp = function (str) {
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$String$length(str),
		_1: {
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(str),
			_1: {ctor: '[]'}
		}
	};
};
var _elm_lang$virtual_dom$VirtualDom_Expando$updateIndex = F3(
	function (n, func, list) {
		var _p6 = list;
		if (_p6.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p8 = _p6._1;
			var _p7 = _p6._0;
			return (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) ? {
				ctor: '::',
				_0: func(_p7),
				_1: _p8
			} : {
				ctor: '::',
				_0: _p7,
				_1: A3(_elm_lang$virtual_dom$VirtualDom_Expando$updateIndex, n - 1, func, _p8)
			};
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$seqTypeToString = F2(
	function (n, seqType) {
		var _p9 = seqType;
		switch (_p9.ctor) {
			case 'ListSeq':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'List(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(n),
						')'));
			case 'SetSeq':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'Set(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(n),
						')'));
			default:
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'Array(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(n),
						')'));
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewTiny = function (value) {
	var _p10 = value;
	switch (_p10.ctor) {
		case 'S':
			var str = _elm_lang$virtual_dom$VirtualDom_Expando$elideMiddle(_p10._0);
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$String$length(str),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$span,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Expando$red,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(str),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			};
		case 'Primitive':
			var _p11 = _p10._0;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$String$length(_p11),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$span,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Expando$blue,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p11),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			};
		case 'Sequence':
			return _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyHelp(
				A2(
					_elm_lang$virtual_dom$VirtualDom_Expando$seqTypeToString,
					_elm_lang$core$List$length(_p10._2),
					_p10._0));
		case 'Dictionary':
			return _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyHelp(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Dict(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(
							_elm_lang$core$List$length(_p10._1)),
						')')));
		case 'Record':
			return _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyRecord(_p10._1);
		default:
			if (_p10._2.ctor === '[]') {
				return _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyHelp(
					A2(_elm_lang$core$Maybe$withDefault, 'Unit', _p10._0));
			} else {
				return _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyHelp(
					function () {
						var _p12 = _p10._0;
						if (_p12.ctor === 'Nothing') {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								'Tuple(',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(
										_elm_lang$core$List$length(_p10._2)),
									')'));
						} else {
							return A2(_elm_lang$core$Basics_ops['++'], _p12._0, ' …');
						}
					}());
			}
	}
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyRecord = function (record) {
	return _elm_lang$core$Dict$isEmpty(record) ? {
		ctor: '_Tuple2',
		_0: 2,
		_1: {
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('{}'),
			_1: {ctor: '[]'}
		}
	} : A3(
		_elm_lang$virtual_dom$VirtualDom_Expando$viewTinyRecordHelp,
		0,
		'{ ',
		_elm_lang$core$Dict$toList(record));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewTinyRecordHelp = F3(
	function (length, starter, entries) {
		var _p13 = entries;
		if (_p13.ctor === '[]') {
			return {
				ctor: '_Tuple2',
				_0: length + 2,
				_1: {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' }'),
					_1: {ctor: '[]'}
				}
			};
		} else {
			var _p16 = _p13._0._0;
			var _p14 = _elm_lang$virtual_dom$VirtualDom_Expando$viewExtraTiny(_p13._0._1);
			var valueLen = _p14._0;
			var valueNodes = _p14._1;
			var fieldLen = _elm_lang$core$String$length(_p16);
			var newLength = ((length + fieldLen) + valueLen) + 5;
			if (_elm_lang$core$Native_Utils.cmp(newLength, 60) > 0) {
				return {
					ctor: '_Tuple2',
					_0: length + 4,
					_1: {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(', … }'),
						_1: {ctor: '[]'}
					}
				};
			} else {
				var _p15 = A3(_elm_lang$virtual_dom$VirtualDom_Expando$viewTinyRecordHelp, newLength, ', ', _p13._1);
				var finalLength = _p15._0;
				var otherNodes = _p15._1;
				return {
					ctor: '_Tuple2',
					_0: finalLength,
					_1: {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(starter),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$span,
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Expando$purple,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p16),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' = '),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$virtual_dom$VirtualDom_Helpers$span,
										{ctor: '[]'},
										valueNodes),
									_1: otherNodes
								}
							}
						}
					}
				};
			}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewExtraTiny = function (value) {
	var _p17 = value;
	if (_p17.ctor === 'Record') {
		return A3(
			_elm_lang$virtual_dom$VirtualDom_Expando$viewExtraTinyRecord,
			0,
			'{',
			_elm_lang$core$Dict$keys(_p17._1));
	} else {
		return _elm_lang$virtual_dom$VirtualDom_Expando$viewTiny(value);
	}
};
var _elm_lang$virtual_dom$VirtualDom_Expando$Constructor = F3(
	function (a, b, c) {
		return {ctor: 'Constructor', _0: a, _1: b, _2: c};
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$Record = F2(
	function (a, b) {
		return {ctor: 'Record', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$Dictionary = F2(
	function (a, b) {
		return {ctor: 'Dictionary', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$Sequence = F3(
	function (a, b, c) {
		return {ctor: 'Sequence', _0: a, _1: b, _2: c};
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$initHelp = F2(
	function (isOuter, expando) {
		var _p18 = expando;
		switch (_p18.ctor) {
			case 'S':
				return expando;
			case 'Primitive':
				return expando;
			case 'Sequence':
				var _p20 = _p18._0;
				var _p19 = _p18._2;
				return isOuter ? A3(
					_elm_lang$virtual_dom$VirtualDom_Expando$Sequence,
					_p20,
					false,
					A2(
						_elm_lang$core$List$map,
						_elm_lang$virtual_dom$VirtualDom_Expando$initHelp(false),
						_p19)) : ((_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$List$length(_p19),
					8) < 1) ? A3(_elm_lang$virtual_dom$VirtualDom_Expando$Sequence, _p20, false, _p19) : expando);
			case 'Dictionary':
				var _p23 = _p18._1;
				return isOuter ? A2(
					_elm_lang$virtual_dom$VirtualDom_Expando$Dictionary,
					false,
					A2(
						_elm_lang$core$List$map,
						function (_p21) {
							var _p22 = _p21;
							return {
								ctor: '_Tuple2',
								_0: _p22._0,
								_1: A2(_elm_lang$virtual_dom$VirtualDom_Expando$initHelp, false, _p22._1)
							};
						},
						_p23)) : ((_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$List$length(_p23),
					8) < 1) ? A2(_elm_lang$virtual_dom$VirtualDom_Expando$Dictionary, false, _p23) : expando);
			case 'Record':
				var _p25 = _p18._1;
				return isOuter ? A2(
					_elm_lang$virtual_dom$VirtualDom_Expando$Record,
					false,
					A2(
						_elm_lang$core$Dict$map,
						F2(
							function (_p24, v) {
								return A2(_elm_lang$virtual_dom$VirtualDom_Expando$initHelp, false, v);
							}),
						_p25)) : ((_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$Dict$size(_p25),
					4) < 1) ? A2(_elm_lang$virtual_dom$VirtualDom_Expando$Record, false, _p25) : expando);
			default:
				var _p27 = _p18._0;
				var _p26 = _p18._2;
				return isOuter ? A3(
					_elm_lang$virtual_dom$VirtualDom_Expando$Constructor,
					_p27,
					false,
					A2(
						_elm_lang$core$List$map,
						_elm_lang$virtual_dom$VirtualDom_Expando$initHelp(false),
						_p26)) : ((_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$List$length(_p26),
					4) < 1) ? A3(_elm_lang$virtual_dom$VirtualDom_Expando$Constructor, _p27, false, _p26) : expando);
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$init = function (value) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Expando$initHelp,
		true,
		_elm_lang$virtual_dom$Native_Debug.init(value));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$mergeHelp = F2(
	function (old, $new) {
		var _p28 = {ctor: '_Tuple2', _0: old, _1: $new};
		_v12_6:
		do {
			if (_p28.ctor === '_Tuple2') {
				switch (_p28._1.ctor) {
					case 'S':
						return $new;
					case 'Primitive':
						return $new;
					case 'Sequence':
						if (_p28._0.ctor === 'Sequence') {
							return A3(
								_elm_lang$virtual_dom$VirtualDom_Expando$Sequence,
								_p28._1._0,
								_p28._0._1,
								A2(_elm_lang$virtual_dom$VirtualDom_Expando$mergeListHelp, _p28._0._2, _p28._1._2));
						} else {
							break _v12_6;
						}
					case 'Dictionary':
						if (_p28._0.ctor === 'Dictionary') {
							return A2(_elm_lang$virtual_dom$VirtualDom_Expando$Dictionary, _p28._0._0, _p28._1._1);
						} else {
							break _v12_6;
						}
					case 'Record':
						if (_p28._0.ctor === 'Record') {
							return A2(
								_elm_lang$virtual_dom$VirtualDom_Expando$Record,
								_p28._0._0,
								A2(
									_elm_lang$core$Dict$map,
									_elm_lang$virtual_dom$VirtualDom_Expando$mergeDictHelp(_p28._0._1),
									_p28._1._1));
						} else {
							break _v12_6;
						}
					default:
						if (_p28._0.ctor === 'Constructor') {
							return A3(
								_elm_lang$virtual_dom$VirtualDom_Expando$Constructor,
								_p28._1._0,
								_p28._0._1,
								A2(_elm_lang$virtual_dom$VirtualDom_Expando$mergeListHelp, _p28._0._2, _p28._1._2));
						} else {
							break _v12_6;
						}
				}
			} else {
				break _v12_6;
			}
		} while(false);
		return $new;
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$mergeDictHelp = F3(
	function (oldDict, key, value) {
		var _p29 = A2(_elm_lang$core$Dict$get, key, oldDict);
		if (_p29.ctor === 'Nothing') {
			return value;
		} else {
			return A2(_elm_lang$virtual_dom$VirtualDom_Expando$mergeHelp, _p29._0, value);
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$mergeListHelp = F2(
	function (olds, news) {
		var _p30 = {ctor: '_Tuple2', _0: olds, _1: news};
		if (_p30._0.ctor === '[]') {
			return news;
		} else {
			if (_p30._1.ctor === '[]') {
				return news;
			} else {
				return {
					ctor: '::',
					_0: A2(_elm_lang$virtual_dom$VirtualDom_Expando$mergeHelp, _p30._0._0, _p30._1._0),
					_1: A2(_elm_lang$virtual_dom$VirtualDom_Expando$mergeListHelp, _p30._0._1, _p30._1._1)
				};
			}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$merge = F2(
	function (value, expando) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Expando$mergeHelp,
			expando,
			_elm_lang$virtual_dom$Native_Debug.init(value));
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$update = F2(
	function (msg, value) {
		var _p31 = value;
		switch (_p31.ctor) {
			case 'S':
				return _elm_lang$core$Native_Utils.crashCase(
					'VirtualDom.Expando',
					{
						start: {line: 168, column: 3},
						end: {line: 235, column: 50}
					},
					_p31)('No messages for primitives');
			case 'Primitive':
				return _elm_lang$core$Native_Utils.crashCase(
					'VirtualDom.Expando',
					{
						start: {line: 168, column: 3},
						end: {line: 235, column: 50}
					},
					_p31)('No messages for primitives');
			case 'Sequence':
				var _p39 = _p31._2;
				var _p38 = _p31._0;
				var _p37 = _p31._1;
				var _p34 = msg;
				switch (_p34.ctor) {
					case 'Toggle':
						return A3(_elm_lang$virtual_dom$VirtualDom_Expando$Sequence, _p38, !_p37, _p39);
					case 'Index':
						if (_p34._0.ctor === 'None') {
							return A3(
								_elm_lang$virtual_dom$VirtualDom_Expando$Sequence,
								_p38,
								_p37,
								A3(
									_elm_lang$virtual_dom$VirtualDom_Expando$updateIndex,
									_p34._1,
									_elm_lang$virtual_dom$VirtualDom_Expando$update(_p34._2),
									_p39));
						} else {
							return _elm_lang$core$Native_Utils.crashCase(
								'VirtualDom.Expando',
								{
									start: {line: 176, column: 7},
									end: {line: 188, column: 46}
								},
								_p34)('No redirected indexes on sequences');
						}
					default:
						return _elm_lang$core$Native_Utils.crashCase(
							'VirtualDom.Expando',
							{
								start: {line: 176, column: 7},
								end: {line: 188, column: 46}
							},
							_p34)('No field on sequences');
				}
			case 'Dictionary':
				var _p51 = _p31._1;
				var _p50 = _p31._0;
				var _p40 = msg;
				switch (_p40.ctor) {
					case 'Toggle':
						return A2(_elm_lang$virtual_dom$VirtualDom_Expando$Dictionary, !_p50, _p51);
					case 'Index':
						var _p48 = _p40._2;
						var _p47 = _p40._1;
						var _p41 = _p40._0;
						switch (_p41.ctor) {
							case 'None':
								return _elm_lang$core$Native_Utils.crashCase(
									'VirtualDom.Expando',
									{
										start: {line: 196, column: 11},
										end: {line: 206, column: 81}
									},
									_p41)('must have redirect for dictionaries');
							case 'Key':
								return A2(
									_elm_lang$virtual_dom$VirtualDom_Expando$Dictionary,
									_p50,
									A3(
										_elm_lang$virtual_dom$VirtualDom_Expando$updateIndex,
										_p47,
										function (_p43) {
											var _p44 = _p43;
											return {
												ctor: '_Tuple2',
												_0: A2(_elm_lang$virtual_dom$VirtualDom_Expando$update, _p48, _p44._0),
												_1: _p44._1
											};
										},
										_p51));
							default:
								return A2(
									_elm_lang$virtual_dom$VirtualDom_Expando$Dictionary,
									_p50,
									A3(
										_elm_lang$virtual_dom$VirtualDom_Expando$updateIndex,
										_p47,
										function (_p45) {
											var _p46 = _p45;
											return {
												ctor: '_Tuple2',
												_0: _p46._0,
												_1: A2(_elm_lang$virtual_dom$VirtualDom_Expando$update, _p48, _p46._1)
											};
										},
										_p51));
						}
					default:
						return _elm_lang$core$Native_Utils.crashCase(
							'VirtualDom.Expando',
							{
								start: {line: 191, column: 7},
								end: {line: 209, column: 50}
							},
							_p40)('no field for dictionaries');
				}
			case 'Record':
				var _p55 = _p31._1;
				var _p54 = _p31._0;
				var _p52 = msg;
				switch (_p52.ctor) {
					case 'Toggle':
						return A2(_elm_lang$virtual_dom$VirtualDom_Expando$Record, !_p54, _p55);
					case 'Index':
						return _elm_lang$core$Native_Utils.crashCase(
							'VirtualDom.Expando',
							{
								start: {line: 212, column: 7},
								end: {line: 220, column: 77}
							},
							_p52)('No index for records');
					default:
						return A2(
							_elm_lang$virtual_dom$VirtualDom_Expando$Record,
							_p54,
							A3(
								_elm_lang$core$Dict$update,
								_p52._0,
								_elm_lang$virtual_dom$VirtualDom_Expando$updateField(_p52._1),
								_p55));
				}
			default:
				var _p61 = _p31._2;
				var _p60 = _p31._0;
				var _p59 = _p31._1;
				var _p56 = msg;
				switch (_p56.ctor) {
					case 'Toggle':
						return A3(_elm_lang$virtual_dom$VirtualDom_Expando$Constructor, _p60, !_p59, _p61);
					case 'Index':
						if (_p56._0.ctor === 'None') {
							return A3(
								_elm_lang$virtual_dom$VirtualDom_Expando$Constructor,
								_p60,
								_p59,
								A3(
									_elm_lang$virtual_dom$VirtualDom_Expando$updateIndex,
									_p56._1,
									_elm_lang$virtual_dom$VirtualDom_Expando$update(_p56._2),
									_p61));
						} else {
							return _elm_lang$core$Native_Utils.crashCase(
								'VirtualDom.Expando',
								{
									start: {line: 223, column: 7},
									end: {line: 235, column: 50}
								},
								_p56)('No redirected indexes on sequences');
						}
					default:
						return _elm_lang$core$Native_Utils.crashCase(
							'VirtualDom.Expando',
							{
								start: {line: 223, column: 7},
								end: {line: 235, column: 50}
							},
							_p56)('No field for constructors');
				}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$updateField = F2(
	function (msg, maybeExpando) {
		var _p62 = maybeExpando;
		if (_p62.ctor === 'Nothing') {
			return _elm_lang$core$Native_Utils.crashCase(
				'VirtualDom.Expando',
				{
					start: {line: 253, column: 3},
					end: {line: 258, column: 32}
				},
				_p62)('key does not exist');
		} else {
			return _elm_lang$core$Maybe$Just(
				A2(_elm_lang$virtual_dom$VirtualDom_Expando$update, msg, _p62._0));
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$Primitive = function (a) {
	return {ctor: 'Primitive', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Expando$S = function (a) {
	return {ctor: 'S', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Expando$ArraySeq = {ctor: 'ArraySeq'};
var _elm_lang$virtual_dom$VirtualDom_Expando$SetSeq = {ctor: 'SetSeq'};
var _elm_lang$virtual_dom$VirtualDom_Expando$ListSeq = {ctor: 'ListSeq'};
var _elm_lang$virtual_dom$VirtualDom_Expando$Field = F2(
	function (a, b) {
		return {ctor: 'Field', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$Index = F3(
	function (a, b, c) {
		return {ctor: 'Index', _0: a, _1: b, _2: c};
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$Toggle = {ctor: 'Toggle'};
var _elm_lang$virtual_dom$VirtualDom_Expando$Value = {ctor: 'Value'};
var _elm_lang$virtual_dom$VirtualDom_Expando$Key = {ctor: 'Key'};
var _elm_lang$virtual_dom$VirtualDom_Expando$None = {ctor: 'None'};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewConstructorEntry = F2(
	function (index, value) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$map,
			A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$None, index),
			A2(
				_elm_lang$virtual_dom$VirtualDom_Expando$view,
				_elm_lang$core$Maybe$Just(
					_elm_lang$core$Basics$toString(index)),
				value));
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$view = F2(
	function (maybeKey, expando) {
		var _p64 = expando;
		switch (_p64.ctor) {
			case 'S':
				return A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Expando$leftPad(maybeKey),
						_1: {ctor: '[]'}
					},
					A3(
						_elm_lang$virtual_dom$VirtualDom_Expando$lineStarter,
						maybeKey,
						_elm_lang$core$Maybe$Nothing,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$span,
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Expando$red,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p64._0),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}));
			case 'Primitive':
				return A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Expando$leftPad(maybeKey),
						_1: {ctor: '[]'}
					},
					A3(
						_elm_lang$virtual_dom$VirtualDom_Expando$lineStarter,
						maybeKey,
						_elm_lang$core$Maybe$Nothing,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$span,
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Expando$blue,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p64._0),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}));
			case 'Sequence':
				return A4(_elm_lang$virtual_dom$VirtualDom_Expando$viewSequence, maybeKey, _p64._0, _p64._1, _p64._2);
			case 'Dictionary':
				return A3(_elm_lang$virtual_dom$VirtualDom_Expando$viewDictionary, maybeKey, _p64._0, _p64._1);
			case 'Record':
				return A3(_elm_lang$virtual_dom$VirtualDom_Expando$viewRecord, maybeKey, _p64._0, _p64._1);
			default:
				return A4(_elm_lang$virtual_dom$VirtualDom_Expando$viewConstructor, maybeKey, _p64._0, _p64._1, _p64._2);
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewConstructor = F4(
	function (maybeKey, maybeName, isClosed, valueList) {
		var _p65 = function () {
			var _p66 = valueList;
			if (_p66.ctor === '[]') {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Nothing,
					_1: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$div,
						{ctor: '[]'},
						{ctor: '[]'})
				};
			} else {
				if (_p66._1.ctor === '[]') {
					var _p67 = _p66._0;
					switch (_p67.ctor) {
						case 'S':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Nothing,
								_1: A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$div,
									{ctor: '[]'},
									{ctor: '[]'})
							};
						case 'Primitive':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Nothing,
								_1: A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$div,
									{ctor: '[]'},
									{ctor: '[]'})
							};
						case 'Sequence':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(isClosed),
								_1: isClosed ? A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$div,
									{ctor: '[]'},
									{ctor: '[]'}) : A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$map,
									A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$None, 0),
									_elm_lang$virtual_dom$VirtualDom_Expando$viewSequenceOpen(_p67._2))
							};
						case 'Dictionary':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(isClosed),
								_1: isClosed ? A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$div,
									{ctor: '[]'},
									{ctor: '[]'}) : A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$map,
									A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$None, 0),
									_elm_lang$virtual_dom$VirtualDom_Expando$viewDictionaryOpen(_p67._1))
							};
						case 'Record':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(isClosed),
								_1: isClosed ? A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$div,
									{ctor: '[]'},
									{ctor: '[]'}) : A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$map,
									A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$None, 0),
									_elm_lang$virtual_dom$VirtualDom_Expando$viewRecordOpen(_p67._1))
							};
						default:
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(isClosed),
								_1: isClosed ? A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$div,
									{ctor: '[]'},
									{ctor: '[]'}) : A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$map,
									A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$None, 0),
									_elm_lang$virtual_dom$VirtualDom_Expando$viewConstructorOpen(_p67._2))
							};
					}
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Maybe$Just(isClosed),
						_1: isClosed ? A2(
							_elm_lang$virtual_dom$VirtualDom_Helpers$div,
							{ctor: '[]'},
							{ctor: '[]'}) : _elm_lang$virtual_dom$VirtualDom_Expando$viewConstructorOpen(valueList)
					};
				}
			}
		}();
		var maybeIsClosed = _p65._0;
		var openHtml = _p65._1;
		var tinyArgs = A2(
			_elm_lang$core$List$map,
			function (_p68) {
				return _elm_lang$core$Tuple$second(
					_elm_lang$virtual_dom$VirtualDom_Expando$viewExtraTiny(_p68));
			},
			valueList);
		var description = function () {
			var _p69 = {ctor: '_Tuple2', _0: maybeName, _1: tinyArgs};
			if (_p69._0.ctor === 'Nothing') {
				if (_p69._1.ctor === '[]') {
					return {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('()'),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('( '),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$span,
								{ctor: '[]'},
								_p69._1._0),
							_1: A3(
								_elm_lang$core$List$foldr,
								F2(
									function (args, rest) {
										return {
											ctor: '::',
											_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(', '),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$virtual_dom$VirtualDom_Helpers$span,
													{ctor: '[]'},
													args),
												_1: rest
											}
										};
									}),
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' )'),
									_1: {ctor: '[]'}
								},
								_p69._1._1)
						}
					};
				}
			} else {
				if (_p69._1.ctor === '[]') {
					return {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p69._0._0),
						_1: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(
							A2(_elm_lang$core$Basics_ops['++'], _p69._0._0, ' ')),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$span,
								{ctor: '[]'},
								_p69._1._0),
							_1: A3(
								_elm_lang$core$List$foldr,
								F2(
									function (args, rest) {
										return {
											ctor: '::',
											_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' '),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$virtual_dom$VirtualDom_Helpers$span,
													{ctor: '[]'},
													args),
												_1: rest
											}
										};
									}),
								{ctor: '[]'},
								_p69._1._1)
						}
					};
				}
			}
		}();
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Expando$leftPad(maybeKey),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Expando$Toggle),
						_1: {ctor: '[]'}
					},
					A3(_elm_lang$virtual_dom$VirtualDom_Expando$lineStarter, maybeKey, maybeIsClosed, description)),
				_1: {
					ctor: '::',
					_0: openHtml,
					_1: {ctor: '[]'}
				}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewConstructorOpen = function (valueList) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{ctor: '[]'},
		A2(_elm_lang$core$List$indexedMap, _elm_lang$virtual_dom$VirtualDom_Expando$viewConstructorEntry, valueList));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewDictionaryOpen = function (keyValuePairs) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{ctor: '[]'},
		A2(_elm_lang$core$List$indexedMap, _elm_lang$virtual_dom$VirtualDom_Expando$viewDictionaryEntry, keyValuePairs));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewDictionaryEntry = F2(
	function (index, _p70) {
		var _p71 = _p70;
		var _p74 = _p71._1;
		var _p73 = _p71._0;
		var _p72 = _p73;
		switch (_p72.ctor) {
			case 'S':
				return A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$map,
					A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$Value, index),
					A2(
						_elm_lang$virtual_dom$VirtualDom_Expando$view,
						_elm_lang$core$Maybe$Just(_p72._0),
						_p74));
			case 'Primitive':
				return A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$map,
					A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$Value, index),
					A2(
						_elm_lang$virtual_dom$VirtualDom_Expando$view,
						_elm_lang$core$Maybe$Just(_p72._0),
						_p74));
			default:
				return A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$virtual_dom$VirtualDom_Helpers$map,
							A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$Key, index),
							A2(
								_elm_lang$virtual_dom$VirtualDom_Expando$view,
								_elm_lang$core$Maybe$Just('key'),
								_p73)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$map,
								A2(_elm_lang$virtual_dom$VirtualDom_Expando$Index, _elm_lang$virtual_dom$VirtualDom_Expando$Value, index),
								A2(
									_elm_lang$virtual_dom$VirtualDom_Expando$view,
									_elm_lang$core$Maybe$Just('value'),
									_p74)),
							_1: {ctor: '[]'}
						}
					});
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewRecordOpen = function (record) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{ctor: '[]'},
		A2(
			_elm_lang$core$List$map,
			_elm_lang$virtual_dom$VirtualDom_Expando$viewRecordEntry,
			_elm_lang$core$Dict$toList(record)));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewRecordEntry = function (_p75) {
	var _p76 = _p75;
	var _p77 = _p76._0;
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$map,
		_elm_lang$virtual_dom$VirtualDom_Expando$Field(_p77),
		A2(
			_elm_lang$virtual_dom$VirtualDom_Expando$view,
			_elm_lang$core$Maybe$Just(_p77),
			_p76._1));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewSequenceOpen = function (values) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{ctor: '[]'},
		A2(_elm_lang$core$List$indexedMap, _elm_lang$virtual_dom$VirtualDom_Expando$viewConstructorEntry, values));
};
var _elm_lang$virtual_dom$VirtualDom_Expando$viewDictionary = F3(
	function (maybeKey, isClosed, keyValuePairs) {
		var starter = A2(
			_elm_lang$core$Basics_ops['++'],
			'Dict(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(
					_elm_lang$core$List$length(keyValuePairs)),
				')'));
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Expando$leftPad(maybeKey),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Expando$Toggle),
						_1: {ctor: '[]'}
					},
					A3(
						_elm_lang$virtual_dom$VirtualDom_Expando$lineStarter,
						maybeKey,
						_elm_lang$core$Maybe$Just(isClosed),
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(starter),
							_1: {ctor: '[]'}
						})),
				_1: {
					ctor: '::',
					_0: isClosed ? _elm_lang$virtual_dom$VirtualDom_Helpers$text('') : _elm_lang$virtual_dom$VirtualDom_Expando$viewDictionaryOpen(keyValuePairs),
					_1: {ctor: '[]'}
				}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewRecord = F3(
	function (maybeKey, isClosed, record) {
		var _p78 = isClosed ? {
			ctor: '_Tuple3',
			_0: _elm_lang$core$Tuple$second(
				_elm_lang$virtual_dom$VirtualDom_Expando$viewTinyRecord(record)),
			_1: _elm_lang$virtual_dom$VirtualDom_Helpers$text(''),
			_2: _elm_lang$virtual_dom$VirtualDom_Helpers$text('')
		} : {
			ctor: '_Tuple3',
			_0: {
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('{'),
				_1: {ctor: '[]'}
			},
			_1: _elm_lang$virtual_dom$VirtualDom_Expando$viewRecordOpen(record),
			_2: A2(
				_elm_lang$virtual_dom$VirtualDom_Helpers$div,
				{
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Expando$leftPad(
						_elm_lang$core$Maybe$Just(
							{ctor: '_Tuple0'})),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('}'),
					_1: {ctor: '[]'}
				})
		};
		var start = _p78._0;
		var middle = _p78._1;
		var end = _p78._2;
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Expando$leftPad(maybeKey),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Expando$Toggle),
						_1: {ctor: '[]'}
					},
					A3(
						_elm_lang$virtual_dom$VirtualDom_Expando$lineStarter,
						maybeKey,
						_elm_lang$core$Maybe$Just(isClosed),
						start)),
				_1: {
					ctor: '::',
					_0: middle,
					_1: {
						ctor: '::',
						_0: end,
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Expando$viewSequence = F4(
	function (maybeKey, seqType, isClosed, valueList) {
		var starter = A2(
			_elm_lang$virtual_dom$VirtualDom_Expando$seqTypeToString,
			_elm_lang$core$List$length(valueList),
			seqType);
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Expando$leftPad(maybeKey),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Expando$Toggle),
						_1: {ctor: '[]'}
					},
					A3(
						_elm_lang$virtual_dom$VirtualDom_Expando$lineStarter,
						maybeKey,
						_elm_lang$core$Maybe$Just(isClosed),
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(starter),
							_1: {ctor: '[]'}
						})),
				_1: {
					ctor: '::',
					_0: isClosed ? _elm_lang$virtual_dom$VirtualDom_Helpers$text('') : _elm_lang$virtual_dom$VirtualDom_Expando$viewSequenceOpen(valueList),
					_1: {ctor: '[]'}
				}
			});
	});

var _elm_lang$virtual_dom$VirtualDom_Report$some = function (list) {
	return !_elm_lang$core$List$isEmpty(list);
};
var _elm_lang$virtual_dom$VirtualDom_Report$TagChanges = F4(
	function (a, b, c, d) {
		return {removed: a, changed: b, added: c, argsMatch: d};
	});
var _elm_lang$virtual_dom$VirtualDom_Report$emptyTagChanges = function (argsMatch) {
	return A4(
		_elm_lang$virtual_dom$VirtualDom_Report$TagChanges,
		{ctor: '[]'},
		{ctor: '[]'},
		{ctor: '[]'},
		argsMatch);
};
var _elm_lang$virtual_dom$VirtualDom_Report$hasTagChanges = function (tagChanges) {
	return _elm_lang$core$Native_Utils.eq(
		tagChanges,
		A4(
			_elm_lang$virtual_dom$VirtualDom_Report$TagChanges,
			{ctor: '[]'},
			{ctor: '[]'},
			{ctor: '[]'},
			true));
};
var _elm_lang$virtual_dom$VirtualDom_Report$SomethingChanged = function (a) {
	return {ctor: 'SomethingChanged', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Report$MessageChanged = F2(
	function (a, b) {
		return {ctor: 'MessageChanged', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Report$VersionChanged = F2(
	function (a, b) {
		return {ctor: 'VersionChanged', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Report$CorruptHistory = {ctor: 'CorruptHistory'};
var _elm_lang$virtual_dom$VirtualDom_Report$UnionChange = F2(
	function (a, b) {
		return {ctor: 'UnionChange', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Report$AliasChange = function (a) {
	return {ctor: 'AliasChange', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Report$Fine = {ctor: 'Fine'};
var _elm_lang$virtual_dom$VirtualDom_Report$Risky = {ctor: 'Risky'};
var _elm_lang$virtual_dom$VirtualDom_Report$Impossible = {ctor: 'Impossible'};
var _elm_lang$virtual_dom$VirtualDom_Report$worstCase = F2(
	function (status, statusList) {
		worstCase:
		while (true) {
			var _p0 = statusList;
			if (_p0.ctor === '[]') {
				return status;
			} else {
				switch (_p0._0.ctor) {
					case 'Impossible':
						return _elm_lang$virtual_dom$VirtualDom_Report$Impossible;
					case 'Risky':
						var _v1 = _elm_lang$virtual_dom$VirtualDom_Report$Risky,
							_v2 = _p0._1;
						status = _v1;
						statusList = _v2;
						continue worstCase;
					default:
						var _v3 = status,
							_v4 = _p0._1;
						status = _v3;
						statusList = _v4;
						continue worstCase;
				}
			}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Report$evaluateChange = function (change) {
	var _p1 = change;
	if (_p1.ctor === 'AliasChange') {
		return _elm_lang$virtual_dom$VirtualDom_Report$Impossible;
	} else {
		return ((!_p1._1.argsMatch) || (_elm_lang$virtual_dom$VirtualDom_Report$some(_p1._1.changed) || _elm_lang$virtual_dom$VirtualDom_Report$some(_p1._1.removed))) ? _elm_lang$virtual_dom$VirtualDom_Report$Impossible : (_elm_lang$virtual_dom$VirtualDom_Report$some(_p1._1.added) ? _elm_lang$virtual_dom$VirtualDom_Report$Risky : _elm_lang$virtual_dom$VirtualDom_Report$Fine);
	}
};
var _elm_lang$virtual_dom$VirtualDom_Report$evaluate = function (report) {
	var _p2 = report;
	switch (_p2.ctor) {
		case 'CorruptHistory':
			return _elm_lang$virtual_dom$VirtualDom_Report$Impossible;
		case 'VersionChanged':
			return _elm_lang$virtual_dom$VirtualDom_Report$Impossible;
		case 'MessageChanged':
			return _elm_lang$virtual_dom$VirtualDom_Report$Impossible;
		default:
			return A2(
				_elm_lang$virtual_dom$VirtualDom_Report$worstCase,
				_elm_lang$virtual_dom$VirtualDom_Report$Fine,
				A2(_elm_lang$core$List$map, _elm_lang$virtual_dom$VirtualDom_Report$evaluateChange, _p2._0));
	}
};

var _elm_lang$virtual_dom$VirtualDom_Metadata$encodeDict = F2(
	function (f, dict) {
		return _elm_lang$core$Json_Encode$object(
			_elm_lang$core$Dict$toList(
				A2(
					_elm_lang$core$Dict$map,
					F2(
						function (key, value) {
							return f(value);
						}),
					dict)));
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$encodeUnion = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'args',
				_1: _elm_lang$core$Json_Encode$list(
					A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, _p1.args))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'tags',
					_1: A2(
						_elm_lang$virtual_dom$VirtualDom_Metadata$encodeDict,
						function (_p2) {
							return _elm_lang$core$Json_Encode$list(
								A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, _p2));
						},
						_p1.tags)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$encodeAlias = function (_p3) {
	var _p4 = _p3;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'args',
				_1: _elm_lang$core$Json_Encode$list(
					A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, _p4.args))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'type',
					_1: _elm_lang$core$Json_Encode$string(_p4.tipe)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$encodeTypes = function (_p5) {
	var _p6 = _p5;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'message',
				_1: _elm_lang$core$Json_Encode$string(_p6.message)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'aliases',
					_1: A2(_elm_lang$virtual_dom$VirtualDom_Metadata$encodeDict, _elm_lang$virtual_dom$VirtualDom_Metadata$encodeAlias, _p6.aliases)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'unions',
						_1: A2(_elm_lang$virtual_dom$VirtualDom_Metadata$encodeDict, _elm_lang$virtual_dom$VirtualDom_Metadata$encodeUnion, _p6.unions)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$encodeVersions = function (_p7) {
	var _p8 = _p7;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'elm',
				_1: _elm_lang$core$Json_Encode$string(_p8.elm)
			},
			_1: {ctor: '[]'}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$encode = function (_p9) {
	var _p10 = _p9;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'versions',
				_1: _elm_lang$virtual_dom$VirtualDom_Metadata$encodeVersions(_p10.versions)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'types',
					_1: _elm_lang$virtual_dom$VirtualDom_Metadata$encodeTypes(_p10.types)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$checkTag = F4(
	function (tag, old, $new, changes) {
		return _elm_lang$core$Native_Utils.eq(old, $new) ? changes : _elm_lang$core$Native_Utils.update(
			changes,
			{
				changed: {ctor: '::', _0: tag, _1: changes.changed}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$addTag = F3(
	function (tag, _p11, changes) {
		return _elm_lang$core$Native_Utils.update(
			changes,
			{
				added: {ctor: '::', _0: tag, _1: changes.added}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$removeTag = F3(
	function (tag, _p12, changes) {
		return _elm_lang$core$Native_Utils.update(
			changes,
			{
				removed: {ctor: '::', _0: tag, _1: changes.removed}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$checkUnion = F4(
	function (name, old, $new, changes) {
		var tagChanges = A6(
			_elm_lang$core$Dict$merge,
			_elm_lang$virtual_dom$VirtualDom_Metadata$removeTag,
			_elm_lang$virtual_dom$VirtualDom_Metadata$checkTag,
			_elm_lang$virtual_dom$VirtualDom_Metadata$addTag,
			old.tags,
			$new.tags,
			_elm_lang$virtual_dom$VirtualDom_Report$emptyTagChanges(
				_elm_lang$core$Native_Utils.eq(old.args, $new.args)));
		return _elm_lang$virtual_dom$VirtualDom_Report$hasTagChanges(tagChanges) ? changes : {
			ctor: '::',
			_0: A2(_elm_lang$virtual_dom$VirtualDom_Report$UnionChange, name, tagChanges),
			_1: changes
		};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$checkAlias = F4(
	function (name, old, $new, changes) {
		return (_elm_lang$core$Native_Utils.eq(old.tipe, $new.tipe) && _elm_lang$core$Native_Utils.eq(old.args, $new.args)) ? changes : {
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Report$AliasChange(name),
			_1: changes
		};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$ignore = F3(
	function (key, value, report) {
		return report;
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$checkTypes = F2(
	function (old, $new) {
		return (!_elm_lang$core$Native_Utils.eq(old.message, $new.message)) ? A2(_elm_lang$virtual_dom$VirtualDom_Report$MessageChanged, old.message, $new.message) : _elm_lang$virtual_dom$VirtualDom_Report$SomethingChanged(
			A6(
				_elm_lang$core$Dict$merge,
				_elm_lang$virtual_dom$VirtualDom_Metadata$ignore,
				_elm_lang$virtual_dom$VirtualDom_Metadata$checkUnion,
				_elm_lang$virtual_dom$VirtualDom_Metadata$ignore,
				old.unions,
				$new.unions,
				A6(
					_elm_lang$core$Dict$merge,
					_elm_lang$virtual_dom$VirtualDom_Metadata$ignore,
					_elm_lang$virtual_dom$VirtualDom_Metadata$checkAlias,
					_elm_lang$virtual_dom$VirtualDom_Metadata$ignore,
					old.aliases,
					$new.aliases,
					{ctor: '[]'})));
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$check = F2(
	function (old, $new) {
		return (!_elm_lang$core$Native_Utils.eq(old.versions.elm, $new.versions.elm)) ? A2(_elm_lang$virtual_dom$VirtualDom_Report$VersionChanged, old.versions.elm, $new.versions.elm) : A2(_elm_lang$virtual_dom$VirtualDom_Metadata$checkTypes, old.types, $new.types);
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$hasProblem = F2(
	function (tipe, _p13) {
		var _p14 = _p13;
		return A2(_elm_lang$core$String$contains, _p14._1, tipe) ? _elm_lang$core$Maybe$Just(_p14._0) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$Metadata = F2(
	function (a, b) {
		return {versions: a, types: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$Versions = function (a) {
	return {elm: a};
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$decodeVersions = A2(
	_elm_lang$core$Json_Decode$map,
	_elm_lang$virtual_dom$VirtualDom_Metadata$Versions,
	A2(_elm_lang$core$Json_Decode$field, 'elm', _elm_lang$core$Json_Decode$string));
var _elm_lang$virtual_dom$VirtualDom_Metadata$Types = F3(
	function (a, b, c) {
		return {message: a, aliases: b, unions: c};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$Alias = F2(
	function (a, b) {
		return {args: a, tipe: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$decodeAlias = A3(
	_elm_lang$core$Json_Decode$map2,
	_elm_lang$virtual_dom$VirtualDom_Metadata$Alias,
	A2(
		_elm_lang$core$Json_Decode$field,
		'args',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
	A2(_elm_lang$core$Json_Decode$field, 'type', _elm_lang$core$Json_Decode$string));
var _elm_lang$virtual_dom$VirtualDom_Metadata$Union = F2(
	function (a, b) {
		return {args: a, tags: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$decodeUnion = A3(
	_elm_lang$core$Json_Decode$map2,
	_elm_lang$virtual_dom$VirtualDom_Metadata$Union,
	A2(
		_elm_lang$core$Json_Decode$field,
		'args',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
	A2(
		_elm_lang$core$Json_Decode$field,
		'tags',
		_elm_lang$core$Json_Decode$dict(
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string))));
var _elm_lang$virtual_dom$VirtualDom_Metadata$decodeTypes = A4(
	_elm_lang$core$Json_Decode$map3,
	_elm_lang$virtual_dom$VirtualDom_Metadata$Types,
	A2(_elm_lang$core$Json_Decode$field, 'message', _elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode$field,
		'aliases',
		_elm_lang$core$Json_Decode$dict(_elm_lang$virtual_dom$VirtualDom_Metadata$decodeAlias)),
	A2(
		_elm_lang$core$Json_Decode$field,
		'unions',
		_elm_lang$core$Json_Decode$dict(_elm_lang$virtual_dom$VirtualDom_Metadata$decodeUnion)));
var _elm_lang$virtual_dom$VirtualDom_Metadata$decoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_elm_lang$virtual_dom$VirtualDom_Metadata$Metadata,
	A2(_elm_lang$core$Json_Decode$field, 'versions', _elm_lang$virtual_dom$VirtualDom_Metadata$decodeVersions),
	A2(_elm_lang$core$Json_Decode$field, 'types', _elm_lang$virtual_dom$VirtualDom_Metadata$decodeTypes));
var _elm_lang$virtual_dom$VirtualDom_Metadata$Error = F2(
	function (a, b) {
		return {message: a, problems: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$ProblemType = F2(
	function (a, b) {
		return {name: a, problems: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$VirtualDom = {ctor: 'VirtualDom'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$Program = {ctor: 'Program'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$Request = {ctor: 'Request'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$Socket = {ctor: 'Socket'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$Process = {ctor: 'Process'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$Task = {ctor: 'Task'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$Decoder = {ctor: 'Decoder'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$Function = {ctor: 'Function'};
var _elm_lang$virtual_dom$VirtualDom_Metadata$problemTable = {
	ctor: '::',
	_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$Function, _1: '->'},
	_1: {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$Decoder, _1: 'Json.Decode.Decoder'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$Task, _1: 'Task.Task'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$Process, _1: 'Process.Id'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$Socket, _1: 'WebSocket.LowLevel.WebSocket'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$Request, _1: 'Http.Request'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$Program, _1: 'Platform.Program'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$VirtualDom, _1: 'VirtualDom.Node'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _elm_lang$virtual_dom$VirtualDom_Metadata$VirtualDom, _1: 'VirtualDom.Attribute'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$findProblems = function (tipe) {
	return A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$virtual_dom$VirtualDom_Metadata$hasProblem(tipe),
		_elm_lang$virtual_dom$VirtualDom_Metadata$problemTable);
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$collectBadAliases = F3(
	function (name, _p15, list) {
		var _p16 = _p15;
		var _p17 = _elm_lang$virtual_dom$VirtualDom_Metadata$findProblems(_p16.tipe);
		if (_p17.ctor === '[]') {
			return list;
		} else {
			return {
				ctor: '::',
				_0: A2(_elm_lang$virtual_dom$VirtualDom_Metadata$ProblemType, name, _p17),
				_1: list
			};
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$collectBadUnions = F3(
	function (name, _p18, list) {
		var _p19 = _p18;
		var _p20 = A2(
			_elm_lang$core$List$concatMap,
			_elm_lang$virtual_dom$VirtualDom_Metadata$findProblems,
			_elm_lang$core$List$concat(
				_elm_lang$core$Dict$values(_p19.tags)));
		if (_p20.ctor === '[]') {
			return list;
		} else {
			return {
				ctor: '::',
				_0: A2(_elm_lang$virtual_dom$VirtualDom_Metadata$ProblemType, name, _p20),
				_1: list
			};
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Metadata$isPortable = function (_p21) {
	var _p22 = _p21;
	var _p24 = _p22.types;
	var badAliases = A3(
		_elm_lang$core$Dict$foldl,
		_elm_lang$virtual_dom$VirtualDom_Metadata$collectBadAliases,
		{ctor: '[]'},
		_p24.aliases);
	var _p23 = A3(_elm_lang$core$Dict$foldl, _elm_lang$virtual_dom$VirtualDom_Metadata$collectBadUnions, badAliases, _p24.unions);
	if (_p23.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			A2(_elm_lang$virtual_dom$VirtualDom_Metadata$Error, _p24.message, _p23));
	}
};
var _elm_lang$virtual_dom$VirtualDom_Metadata$decode = function (value) {
	var _p25 = A2(_elm_lang$core$Json_Decode$decodeValue, _elm_lang$virtual_dom$VirtualDom_Metadata$decoder, value);
	if (_p25.ctor === 'Err') {
		return _elm_lang$core$Native_Utils.crashCase(
			'VirtualDom.Metadata',
			{
				start: {line: 229, column: 3},
				end: {line: 239, column: 20}
			},
			_p25)('Compiler is generating bad metadata. Report this at <https://github.com/elm-lang/virtual-dom/issues>.');
	} else {
		var _p28 = _p25._0;
		var _p27 = _elm_lang$virtual_dom$VirtualDom_Metadata$isPortable(_p28);
		if (_p27.ctor === 'Nothing') {
			return _elm_lang$core$Result$Ok(_p28);
		} else {
			return _elm_lang$core$Result$Err(_p27._0);
		}
	}
};

var _elm_lang$virtual_dom$VirtualDom_History$viewMessage = F3(
	function (currentIndex, index, msg) {
		var messageName = _elm_lang$virtual_dom$Native_Debug.messageToString(msg);
		var className = _elm_lang$core$Native_Utils.eq(currentIndex, index) ? 'messages-entry messages-entry-selected' : 'messages-entry';
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class(className),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$on,
						'click',
						_elm_lang$core$Json_Decode$succeed(index)),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$span,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('messages-entry-content'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$virtual_dom$VirtualDom_Helpers$attribute, 'title', messageName),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(messageName),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$span,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('messages-entry-index'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(
								_elm_lang$core$Basics$toString(index)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_History$consMsg = F3(
	function (currentIndex, msg, _p0) {
		var _p1 = _p0;
		var _p2 = _p1._0;
		return {
			ctor: '_Tuple2',
			_0: _p2 - 1,
			_1: {
				ctor: '::',
				_0: A4(_elm_lang$virtual_dom$VirtualDom_Helpers$lazy3, _elm_lang$virtual_dom$VirtualDom_History$viewMessage, currentIndex, _p2, msg),
				_1: _p1._1
			}
		};
	});
var _elm_lang$virtual_dom$VirtualDom_History$viewSnapshot = F3(
	function (currentIndex, index, _p3) {
		var _p4 = _p3;
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{ctor: '[]'},
			_elm_lang$core$Tuple$second(
				A3(
					_elm_lang$core$Array$foldl,
					_elm_lang$virtual_dom$VirtualDom_History$consMsg(currentIndex),
					{
						ctor: '_Tuple2',
						_0: index - 1,
						_1: {ctor: '[]'}
					},
					_p4.messages)));
	});
var _elm_lang$virtual_dom$VirtualDom_History$undone = function (getResult) {
	var _p5 = getResult;
	if (_p5.ctor === 'Done') {
		return {ctor: '_Tuple2', _0: _p5._1, _1: _p5._0};
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'VirtualDom.History',
			{
				start: {line: 195, column: 3},
				end: {line: 200, column: 39}
			},
			_p5)('Bug in History.get');
	}
};
var _elm_lang$virtual_dom$VirtualDom_History$elmToJs = _elm_lang$virtual_dom$Native_Debug.unsafeCoerce;
var _elm_lang$virtual_dom$VirtualDom_History$encodeHelp = F2(
	function (snapshot, allMessages) {
		return A3(
			_elm_lang$core$Array$foldl,
			F2(
				function (elm, msgs) {
					return {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_History$elmToJs(elm),
						_1: msgs
					};
				}),
			allMessages,
			snapshot.messages);
	});
var _elm_lang$virtual_dom$VirtualDom_History$encode = function (_p7) {
	var _p8 = _p7;
	var recentJson = A2(
		_elm_lang$core$List$map,
		_elm_lang$virtual_dom$VirtualDom_History$elmToJs,
		_elm_lang$core$List$reverse(_p8.recent.messages));
	return _elm_lang$core$Json_Encode$list(
		A3(_elm_lang$core$Array$foldr, _elm_lang$virtual_dom$VirtualDom_History$encodeHelp, recentJson, _p8.snapshots));
};
var _elm_lang$virtual_dom$VirtualDom_History$jsToElm = _elm_lang$virtual_dom$Native_Debug.unsafeCoerce;
var _elm_lang$virtual_dom$VirtualDom_History$initialModel = function (_p9) {
	var _p10 = _p9;
	var _p11 = A2(_elm_lang$core$Array$get, 0, _p10.snapshots);
	if (_p11.ctor === 'Just') {
		return _p11._0.model;
	} else {
		return _p10.recent.model;
	}
};
var _elm_lang$virtual_dom$VirtualDom_History$size = function (history) {
	return history.numMessages;
};
var _elm_lang$virtual_dom$VirtualDom_History$maxSnapshotSize = 64;
var _elm_lang$virtual_dom$VirtualDom_History$consSnapshot = F3(
	function (currentIndex, snapshot, _p12) {
		var _p13 = _p12;
		var _p14 = _p13._0;
		var nextIndex = _p14 - _elm_lang$virtual_dom$VirtualDom_History$maxSnapshotSize;
		var currentIndexHelp = ((_elm_lang$core$Native_Utils.cmp(nextIndex, currentIndex) < 1) && (_elm_lang$core$Native_Utils.cmp(currentIndex, _p14) < 0)) ? currentIndex : -1;
		return {
			ctor: '_Tuple2',
			_0: _p14 - _elm_lang$virtual_dom$VirtualDom_History$maxSnapshotSize,
			_1: {
				ctor: '::',
				_0: A4(_elm_lang$virtual_dom$VirtualDom_Helpers$lazy3, _elm_lang$virtual_dom$VirtualDom_History$viewSnapshot, currentIndexHelp, _p14, snapshot),
				_1: _p13._1
			}
		};
	});
var _elm_lang$virtual_dom$VirtualDom_History$viewSnapshots = F2(
	function (currentIndex, snapshots) {
		var highIndex = _elm_lang$virtual_dom$VirtualDom_History$maxSnapshotSize * _elm_lang$core$Array$length(snapshots);
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{ctor: '[]'},
			_elm_lang$core$Tuple$second(
				A3(
					_elm_lang$core$Array$foldr,
					_elm_lang$virtual_dom$VirtualDom_History$consSnapshot(currentIndex),
					{
						ctor: '_Tuple2',
						_0: highIndex,
						_1: {ctor: '[]'}
					},
					snapshots)));
	});
var _elm_lang$virtual_dom$VirtualDom_History$view = F2(
	function (maybeIndex, _p15) {
		var _p16 = _p15;
		var _p17 = function () {
			var _p18 = maybeIndex;
			if (_p18.ctor === 'Nothing') {
				return {ctor: '_Tuple2', _0: -1, _1: 'debugger-sidebar-messages'};
			} else {
				return {ctor: '_Tuple2', _0: _p18._0, _1: 'debugger-sidebar-messages-paused'};
			}
		}();
		var index = _p17._0;
		var className = _p17._1;
		var oldStuff = A3(_elm_lang$virtual_dom$VirtualDom_Helpers$lazy2, _elm_lang$virtual_dom$VirtualDom_History$viewSnapshots, index, _p16.snapshots);
		var newStuff = _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldl,
				_elm_lang$virtual_dom$VirtualDom_History$consMsg(index),
				{
					ctor: '_Tuple2',
					_0: _p16.numMessages - 1,
					_1: {ctor: '[]'}
				},
				_p16.recent.messages));
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class(className),
				_1: {ctor: '[]'}
			},
			{ctor: '::', _0: oldStuff, _1: newStuff});
	});
var _elm_lang$virtual_dom$VirtualDom_History$History = F3(
	function (a, b, c) {
		return {snapshots: a, recent: b, numMessages: c};
	});
var _elm_lang$virtual_dom$VirtualDom_History$RecentHistory = F3(
	function (a, b, c) {
		return {model: a, messages: b, numMessages: c};
	});
var _elm_lang$virtual_dom$VirtualDom_History$empty = function (model) {
	return A3(
		_elm_lang$virtual_dom$VirtualDom_History$History,
		_elm_lang$core$Array$empty,
		A3(
			_elm_lang$virtual_dom$VirtualDom_History$RecentHistory,
			model,
			{ctor: '[]'},
			0),
		0);
};
var _elm_lang$virtual_dom$VirtualDom_History$Snapshot = F2(
	function (a, b) {
		return {model: a, messages: b};
	});
var _elm_lang$virtual_dom$VirtualDom_History$addRecent = F3(
	function (msg, newModel, _p19) {
		var _p20 = _p19;
		var _p23 = _p20.numMessages;
		var _p22 = _p20.model;
		var _p21 = _p20.messages;
		return _elm_lang$core$Native_Utils.eq(_p23, _elm_lang$virtual_dom$VirtualDom_History$maxSnapshotSize) ? {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Maybe$Just(
				A2(
					_elm_lang$virtual_dom$VirtualDom_History$Snapshot,
					_p22,
					_elm_lang$core$Array$fromList(_p21))),
			_1: A3(
				_elm_lang$virtual_dom$VirtualDom_History$RecentHistory,
				newModel,
				{
					ctor: '::',
					_0: msg,
					_1: {ctor: '[]'}
				},
				1)
		} : {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Maybe$Nothing,
			_1: A3(
				_elm_lang$virtual_dom$VirtualDom_History$RecentHistory,
				_p22,
				{ctor: '::', _0: msg, _1: _p21},
				_p23 + 1)
		};
	});
var _elm_lang$virtual_dom$VirtualDom_History$add = F3(
	function (msg, model, _p24) {
		var _p25 = _p24;
		var _p28 = _p25.snapshots;
		var _p27 = _p25.numMessages;
		var _p26 = A3(_elm_lang$virtual_dom$VirtualDom_History$addRecent, msg, model, _p25.recent);
		if (_p26._0.ctor === 'Just') {
			return A3(
				_elm_lang$virtual_dom$VirtualDom_History$History,
				A2(_elm_lang$core$Array$push, _p26._0._0, _p28),
				_p26._1,
				_p27 + 1);
		} else {
			return A3(_elm_lang$virtual_dom$VirtualDom_History$History, _p28, _p26._1, _p27 + 1);
		}
	});
var _elm_lang$virtual_dom$VirtualDom_History$decoder = F2(
	function (initialModel, update) {
		var addMessage = F2(
			function (rawMsg, _p29) {
				var _p30 = _p29;
				var _p31 = _p30._0;
				var msg = _elm_lang$virtual_dom$VirtualDom_History$jsToElm(rawMsg);
				return {
					ctor: '_Tuple2',
					_0: A2(update, msg, _p31),
					_1: A3(_elm_lang$virtual_dom$VirtualDom_History$add, msg, _p31, _p30._1)
				};
			});
		var updateModel = function (rawMsgs) {
			return A3(
				_elm_lang$core$List$foldl,
				addMessage,
				{
					ctor: '_Tuple2',
					_0: initialModel,
					_1: _elm_lang$virtual_dom$VirtualDom_History$empty(initialModel)
				},
				rawMsgs);
		};
		return A2(
			_elm_lang$core$Json_Decode$map,
			updateModel,
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value));
	});
var _elm_lang$virtual_dom$VirtualDom_History$Done = F2(
	function (a, b) {
		return {ctor: 'Done', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_History$Stepping = F2(
	function (a, b) {
		return {ctor: 'Stepping', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_History$getHelp = F3(
	function (update, msg, getResult) {
		var _p32 = getResult;
		if (_p32.ctor === 'Done') {
			return getResult;
		} else {
			var _p34 = _p32._0;
			var _p33 = _p32._1;
			return _elm_lang$core$Native_Utils.eq(_p34, 0) ? A2(
				_elm_lang$virtual_dom$VirtualDom_History$Done,
				msg,
				_elm_lang$core$Tuple$first(
					A2(update, msg, _p33))) : A2(
				_elm_lang$virtual_dom$VirtualDom_History$Stepping,
				_p34 - 1,
				_elm_lang$core$Tuple$first(
					A2(update, msg, _p33)));
		}
	});
var _elm_lang$virtual_dom$VirtualDom_History$get = F3(
	function (update, index, _p35) {
		var _p36 = _p35;
		var _p39 = _p36.recent;
		var snapshotMax = _p36.numMessages - _p39.numMessages;
		if (_elm_lang$core$Native_Utils.cmp(index, snapshotMax) > -1) {
			return _elm_lang$virtual_dom$VirtualDom_History$undone(
				A3(
					_elm_lang$core$List$foldr,
					_elm_lang$virtual_dom$VirtualDom_History$getHelp(update),
					A2(_elm_lang$virtual_dom$VirtualDom_History$Stepping, index - snapshotMax, _p39.model),
					_p39.messages));
		} else {
			var _p37 = A2(_elm_lang$core$Array$get, (index / _elm_lang$virtual_dom$VirtualDom_History$maxSnapshotSize) | 0, _p36.snapshots);
			if (_p37.ctor === 'Nothing') {
				return _elm_lang$core$Native_Utils.crashCase(
					'VirtualDom.History',
					{
						start: {line: 165, column: 7},
						end: {line: 171, column: 95}
					},
					_p37)('UI should only let you ask for real indexes!');
			} else {
				return _elm_lang$virtual_dom$VirtualDom_History$undone(
					A3(
						_elm_lang$core$Array$foldr,
						_elm_lang$virtual_dom$VirtualDom_History$getHelp(update),
						A2(
							_elm_lang$virtual_dom$VirtualDom_History$Stepping,
							A2(_elm_lang$core$Basics$rem, index, _elm_lang$virtual_dom$VirtualDom_History$maxSnapshotSize),
							_p37._0.model),
						_p37._0.messages));
			}
		}
	});

var _elm_lang$virtual_dom$VirtualDom_Overlay$styles = A3(
	_elm_lang$virtual_dom$VirtualDom_Helpers$node,
	'style',
	{ctor: '[]'},
	{
		ctor: '::',
		_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('\n\n.elm-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  color: white;\n  pointer-events: none;\n  font-family: \'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif;\n}\n\n.elm-overlay-resume {\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n  text-align: center;\n  pointer-events: auto;\n  background-color: rgba(200, 200, 200, 0.7);\n}\n\n.elm-overlay-resume-words {\n  position: absolute;\n  top: calc(50% - 40px);\n  font-size: 80px;\n  line-height: 80px;\n  height: 80px;\n  width: 100%;\n}\n\n.elm-mini-controls {\n  position: fixed;\n  bottom: 0;\n  right: 6px;\n  border-radius: 4px;\n  background-color: rgb(61, 61, 61);\n  font-family: monospace;\n  pointer-events: auto;\n}\n\n.elm-mini-controls-button {\n  padding: 6px;\n  cursor: pointer;\n  text-align: center;\n  min-width: 24ch;\n}\n\n.elm-mini-controls-import-export {\n  padding: 4px 0;\n  font-size: 0.8em;\n  text-align: center;\n  background-color: rgb(50, 50, 50);\n}\n\n.elm-overlay-message {\n  position: absolute;\n  width: 600px;\n  height: 100%;\n  padding-left: calc(50% - 300px);\n  padding-right: calc(50% - 300px);\n  background-color: rgba(200, 200, 200, 0.7);\n  pointer-events: auto;\n}\n\n.elm-overlay-message-title {\n  font-size: 36px;\n  height: 80px;\n  background-color: rgb(50, 50, 50);\n  padding-left: 22px;\n  vertical-align: middle;\n  line-height: 80px;\n}\n\n.elm-overlay-message-details {\n  padding: 8px 20px;\n  overflow-y: auto;\n  max-height: calc(100% - 156px);\n  background-color: rgb(61, 61, 61);\n}\n\n.elm-overlay-message-details-type {\n  font-size: 1.5em;\n}\n\n.elm-overlay-message-details ul {\n  list-style-type: none;\n  padding-left: 20px;\n}\n\n.elm-overlay-message-details ul ul {\n  list-style-type: disc;\n  padding-left: 2em;\n}\n\n.elm-overlay-message-details li {\n  margin: 8px 0;\n}\n\n.elm-overlay-message-buttons {\n  height: 60px;\n  line-height: 60px;\n  text-align: right;\n  background-color: rgb(50, 50, 50);\n}\n\n.elm-overlay-message-buttons button {\n  margin-right: 20px;\n}\n\n'),
		_1: {ctor: '[]'}
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$button = F2(
	function (msg, label) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$span,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(msg),
				_1: {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'cursor', _1: 'pointer'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(label),
				_1: {ctor: '[]'}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewImportExport = F3(
	function (props, importMsg, exportMsg) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			props,
			{
				ctor: '::',
				_0: A2(_elm_lang$virtual_dom$VirtualDom_Overlay$button, importMsg, 'Import'),
				_1: {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' / '),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$virtual_dom$VirtualDom_Overlay$button, exportMsg, 'Export'),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewMiniControls = F2(
	function (config, numMsgs) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-mini-controls'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(config.open),
						_1: {
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-mini-controls-button'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Explore History (',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(numMsgs),
									')'))),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A3(
						_elm_lang$virtual_dom$VirtualDom_Overlay$viewImportExport,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-mini-controls-import-export'),
							_1: {ctor: '[]'}
						},
						config.importHistory,
						config.exportHistory),
					_1: {ctor: '[]'}
				}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$addCommas = function (items) {
	var _p0 = items;
	if (_p0.ctor === '[]') {
		return '';
	} else {
		if (_p0._1.ctor === '[]') {
			return _p0._0;
		} else {
			if (_p0._1._1.ctor === '[]') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_p0._0,
					A2(_elm_lang$core$Basics_ops['++'], ' and ', _p0._1._0));
			} else {
				return A2(
					_elm_lang$core$String$join,
					', ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p0._1,
						{
							ctor: '::',
							_0: A2(_elm_lang$core$Basics_ops['++'], ' and ', _p0._0),
							_1: {ctor: '[]'}
						}));
			}
		}
	}
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$problemToString = function (problem) {
	var _p1 = problem;
	switch (_p1.ctor) {
		case 'Function':
			return 'functions';
		case 'Decoder':
			return 'JSON decoders';
		case 'Task':
			return 'tasks';
		case 'Process':
			return 'processes';
		case 'Socket':
			return 'web sockets';
		case 'Request':
			return 'HTTP requests';
		case 'Program':
			return 'programs';
		default:
			return 'virtual DOM values';
	}
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$goodNews2 = '\nfunction can pattern match on that data and call whatever functions, JSON\ndecoders, etc. you need. This makes the code much more explicit and easy to\nfollow for other readers (or you in a few months!)\n';
var _elm_lang$virtual_dom$VirtualDom_Overlay$goodNews1 = '\nThe good news is that having values like this in your message type is not\nso great in the long run. You are better off using simpler data, like\n';
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode = function (name) {
	return A3(
		_elm_lang$virtual_dom$VirtualDom_Helpers$node,
		'code',
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(name),
			_1: {ctor: '[]'}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewMention = F2(
	function (tags, verbed) {
		var _p2 = A2(
			_elm_lang$core$List$map,
			_elm_lang$virtual_dom$VirtualDom_Overlay$viewCode,
			_elm_lang$core$List$reverse(tags));
		if (_p2.ctor === '[]') {
			return _elm_lang$virtual_dom$VirtualDom_Helpers$text('');
		} else {
			if (_p2._1.ctor === '[]') {
				return A3(
					_elm_lang$virtual_dom$VirtualDom_Helpers$node,
					'li',
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(verbed),
						_1: {
							ctor: '::',
							_0: _p2._0,
							_1: {
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('.'),
								_1: {ctor: '[]'}
							}
						}
					});
			} else {
				if (_p2._1._1.ctor === '[]') {
					return A3(
						_elm_lang$virtual_dom$VirtualDom_Helpers$node,
						'li',
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(verbed),
							_1: {
								ctor: '::',
								_0: _p2._1._0,
								_1: {
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' and '),
									_1: {
										ctor: '::',
										_0: _p2._0,
										_1: {
											ctor: '::',
											_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('.'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						});
				} else {
					return A3(
						_elm_lang$virtual_dom$VirtualDom_Helpers$node,
						'li',
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(verbed),
							_1: A2(
								_elm_lang$core$Basics_ops['++'],
								A2(
									_elm_lang$core$List$intersperse,
									_elm_lang$virtual_dom$VirtualDom_Helpers$text(', '),
									_elm_lang$core$List$reverse(_p2._1)),
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(', and '),
									_1: {
										ctor: '::',
										_0: _p2._0,
										_1: {
											ctor: '::',
											_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('.'),
											_1: {ctor: '[]'}
										}
									}
								})
						});
				}
			}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewChange = function (change) {
	return A3(
		_elm_lang$virtual_dom$VirtualDom_Helpers$node,
		'li',
		{ctor: '[]'},
		function () {
			var _p3 = change;
			if (_p3.ctor === 'AliasChange') {
				return {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$span,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-message-details-type'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode(_p3._0),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$span,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-message-details-type'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode(_p3._0),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A3(
							_elm_lang$virtual_dom$VirtualDom_Helpers$node,
							'ul',
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(_elm_lang$virtual_dom$VirtualDom_Overlay$viewMention, _p3._1.removed, 'Removed '),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$virtual_dom$VirtualDom_Overlay$viewMention, _p3._1.changed, 'Changed '),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$virtual_dom$VirtualDom_Overlay$viewMention, _p3._1.added, 'Added '),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _p3._1.argsMatch ? _elm_lang$virtual_dom$VirtualDom_Helpers$text('') : _elm_lang$virtual_dom$VirtualDom_Helpers$text('This may be due to the fact that the type variable names changed.'),
							_1: {ctor: '[]'}
						}
					}
				};
			}
		}());
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewProblemType = function (_p4) {
	var _p5 = _p4;
	return A3(
		_elm_lang$virtual_dom$VirtualDom_Helpers$node,
		'li',
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode(_p5.name),
			_1: {
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						' can contain ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$virtual_dom$VirtualDom_Overlay$addCommas(
								A2(_elm_lang$core$List$map, _elm_lang$virtual_dom$VirtualDom_Overlay$problemToString, _p5.problems)),
							'.'))),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewBadMetadata = function (_p6) {
	var _p7 = _p6;
	return {
		ctor: '::',
		_0: A3(
			_elm_lang$virtual_dom$VirtualDom_Helpers$node,
			'p',
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('The '),
				_1: {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode(_p7.message),
					_1: {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' type of your program cannot be reliably serialized for history files.'),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {
			ctor: '::',
			_0: A3(
				_elm_lang$virtual_dom$VirtualDom_Helpers$node,
				'p',
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('Functions cannot be serialized, nor can values that contain functions. This is a problem in these places:'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A3(
					_elm_lang$virtual_dom$VirtualDom_Helpers$node,
					'ul',
					{ctor: '[]'},
					A2(_elm_lang$core$List$map, _elm_lang$virtual_dom$VirtualDom_Overlay$viewProblemType, _p7.problems)),
				_1: {
					ctor: '::',
					_0: A3(
						_elm_lang$virtual_dom$VirtualDom_Helpers$node,
						'p',
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_elm_lang$virtual_dom$VirtualDom_Overlay$goodNews1),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$a,
									{
										ctor: '::',
										_0: _elm_lang$virtual_dom$VirtualDom_Helpers$href('https://guide.elm-lang.org/types/union_types.html'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('union types'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(', in your messages. From there, your '),
									_1: {
										ctor: '::',
										_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode('update'),
										_1: {
											ctor: '::',
											_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_elm_lang$virtual_dom$VirtualDom_Overlay$goodNews2),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	};
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$explanationRisky = '\nThis history seems old. It will work with this program, but some\nmessages have been added since the history was created:\n';
var _elm_lang$virtual_dom$VirtualDom_Overlay$explanationBad = '\nThe messages in this history do not match the messages handled by your\nprogram. I noticed changes in the following types:\n';
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewReport = F2(
	function (isBad, report) {
		var _p8 = report;
		switch (_p8.ctor) {
			case 'CorruptHistory':
				return {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('Looks like this history file is corrupt. I cannot understand it.'),
					_1: {ctor: '[]'}
				};
			case 'VersionChanged':
				return {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'This history was created with Elm ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p8._0,
								A2(
									_elm_lang$core$Basics_ops['++'],
									', but you are using Elm ',
									A2(_elm_lang$core$Basics_ops['++'], _p8._1, ' right now.'))))),
					_1: {ctor: '[]'}
				};
			case 'MessageChanged':
				return {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(
						A2(_elm_lang$core$Basics_ops['++'], 'To import some other history, the overall message type must', ' be the same. The old history has ')),
					_1: {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode(_p8._0),
						_1: {
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' messages, but the new program works with '),
							_1: {
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewCode(_p8._1),
								_1: {
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' messages.'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				};
			default:
				return {
					ctor: '::',
					_0: A3(
						_elm_lang$virtual_dom$VirtualDom_Helpers$node,
						'p',
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(
								isBad ? _elm_lang$virtual_dom$VirtualDom_Overlay$explanationBad : _elm_lang$virtual_dom$VirtualDom_Overlay$explanationRisky),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A3(
							_elm_lang$virtual_dom$VirtualDom_Helpers$node,
							'ul',
							{ctor: '[]'},
							A2(_elm_lang$core$List$map, _elm_lang$virtual_dom$VirtualDom_Overlay$viewChange, _p8._0)),
						_1: {ctor: '[]'}
					}
				};
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewResume = function (config) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-resume'),
			_1: {
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(config.resume),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$virtual_dom$VirtualDom_Helpers$div,
				{
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-resume-words'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('Click to Resume'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$uploadDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}),
	A2(_elm_lang$core$Json_Decode$field, 'metadata', _elm_lang$virtual_dom$VirtualDom_Metadata$decoder),
	A2(_elm_lang$core$Json_Decode$field, 'history', _elm_lang$core$Json_Decode$value));
var _elm_lang$virtual_dom$VirtualDom_Overlay$close = F2(
	function (msg, state) {
		var _p9 = state;
		switch (_p9.ctor) {
			case 'None':
				return _elm_lang$core$Maybe$Nothing;
			case 'BadMetadata':
				return _elm_lang$core$Maybe$Nothing;
			case 'BadImport':
				return _elm_lang$core$Maybe$Nothing;
			default:
				var _p10 = msg;
				if (_p10.ctor === 'Cancel') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Just(_p9._1);
				}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$isBlocking = function (state) {
	var _p11 = state;
	if (_p11.ctor === 'None') {
		return false;
	} else {
		return true;
	}
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$Config = F5(
	function (a, b, c, d, e) {
		return {resume: a, open: b, importHistory: c, exportHistory: d, wrap: e};
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$RiskyImport = F2(
	function (a, b) {
		return {ctor: 'RiskyImport', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$BadImport = function (a) {
	return {ctor: 'BadImport', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$corruptImport = _elm_lang$virtual_dom$VirtualDom_Overlay$BadImport(_elm_lang$virtual_dom$VirtualDom_Report$CorruptHistory);
var _elm_lang$virtual_dom$VirtualDom_Overlay$assessImport = F2(
	function (metadata, jsonString) {
		var _p12 = A2(_elm_lang$core$Json_Decode$decodeString, _elm_lang$virtual_dom$VirtualDom_Overlay$uploadDecoder, jsonString);
		if (_p12.ctor === 'Err') {
			return _elm_lang$core$Result$Err(_elm_lang$virtual_dom$VirtualDom_Overlay$corruptImport);
		} else {
			var _p14 = _p12._0._1;
			var report = A2(_elm_lang$virtual_dom$VirtualDom_Metadata$check, _p12._0._0, metadata);
			var _p13 = _elm_lang$virtual_dom$VirtualDom_Report$evaluate(report);
			switch (_p13.ctor) {
				case 'Impossible':
					return _elm_lang$core$Result$Err(
						_elm_lang$virtual_dom$VirtualDom_Overlay$BadImport(report));
				case 'Risky':
					return _elm_lang$core$Result$Err(
						A2(_elm_lang$virtual_dom$VirtualDom_Overlay$RiskyImport, report, _p14));
				default:
					return _elm_lang$core$Result$Ok(_p14);
			}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$BadMetadata = function (a) {
	return {ctor: 'BadMetadata', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$badMetadata = _elm_lang$virtual_dom$VirtualDom_Overlay$BadMetadata;
var _elm_lang$virtual_dom$VirtualDom_Overlay$None = {ctor: 'None'};
var _elm_lang$virtual_dom$VirtualDom_Overlay$none = _elm_lang$virtual_dom$VirtualDom_Overlay$None;
var _elm_lang$virtual_dom$VirtualDom_Overlay$Proceed = {ctor: 'Proceed'};
var _elm_lang$virtual_dom$VirtualDom_Overlay$Cancel = {ctor: 'Cancel'};
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewButtons = function (buttons) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-message-buttons'),
			_1: {ctor: '[]'}
		},
		function () {
			var _p15 = buttons;
			if (_p15.ctor === 'Accept') {
				return {
					ctor: '::',
					_0: A3(
						_elm_lang$virtual_dom$VirtualDom_Helpers$node,
						'button',
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Overlay$Proceed),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p15._0),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: A3(
						_elm_lang$virtual_dom$VirtualDom_Helpers$node,
						'button',
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Overlay$Cancel),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p15._0),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A3(
							_elm_lang$virtual_dom$VirtualDom_Helpers$node,
							'button',
							{
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Overlay$Proceed),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(_p15._1),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				};
			}
		}());
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$Message = {ctor: 'Message'};
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewMessage = F4(
	function (config, title, details, buttons) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$virtual_dom$VirtualDom_Overlay$Message,
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-message'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$virtual_dom$VirtualDom_Helpers$div,
							{
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-message-title'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(title),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$virtual_dom$VirtualDom_Helpers$div,
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay-message-details'),
									_1: {ctor: '[]'}
								},
								details),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$virtual_dom$VirtualDom_Helpers$map,
									config.wrap,
									_elm_lang$virtual_dom$VirtualDom_Overlay$viewButtons(buttons)),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		};
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$Pause = {ctor: 'Pause'};
var _elm_lang$virtual_dom$VirtualDom_Overlay$Normal = {ctor: 'Normal'};
var _elm_lang$virtual_dom$VirtualDom_Overlay$Choose = F2(
	function (a, b) {
		return {ctor: 'Choose', _0: a, _1: b};
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$Accept = function (a) {
	return {ctor: 'Accept', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Overlay$viewHelp = F5(
	function (config, isPaused, isOpen, numMsgs, state) {
		var _p16 = state;
		switch (_p16.ctor) {
			case 'None':
				var miniControls = isOpen ? {ctor: '[]'} : {
					ctor: '::',
					_0: A2(_elm_lang$virtual_dom$VirtualDom_Overlay$viewMiniControls, config, numMsgs),
					_1: {ctor: '[]'}
				};
				return {
					ctor: '_Tuple2',
					_0: isPaused ? _elm_lang$virtual_dom$VirtualDom_Overlay$Pause : _elm_lang$virtual_dom$VirtualDom_Overlay$Normal,
					_1: (isPaused && (!isOpen)) ? {
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Overlay$viewResume(config),
						_1: miniControls
					} : miniControls
				};
			case 'BadMetadata':
				return A4(
					_elm_lang$virtual_dom$VirtualDom_Overlay$viewMessage,
					config,
					'Cannot use Import or Export',
					_elm_lang$virtual_dom$VirtualDom_Overlay$viewBadMetadata(_p16._0),
					_elm_lang$virtual_dom$VirtualDom_Overlay$Accept('Ok'));
			case 'BadImport':
				return A4(
					_elm_lang$virtual_dom$VirtualDom_Overlay$viewMessage,
					config,
					'Cannot Import History',
					A2(_elm_lang$virtual_dom$VirtualDom_Overlay$viewReport, true, _p16._0),
					_elm_lang$virtual_dom$VirtualDom_Overlay$Accept('Ok'));
			default:
				return A4(
					_elm_lang$virtual_dom$VirtualDom_Overlay$viewMessage,
					config,
					'Warning',
					A2(_elm_lang$virtual_dom$VirtualDom_Overlay$viewReport, false, _p16._0),
					A2(_elm_lang$virtual_dom$VirtualDom_Overlay$Choose, 'Cancel', 'Import Anyway'));
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Overlay$view = F5(
	function (config, isPaused, isOpen, numMsgs, state) {
		var _p17 = A5(_elm_lang$virtual_dom$VirtualDom_Overlay$viewHelp, config, isPaused, isOpen, numMsgs, state);
		var block = _p17._0;
		var nodes = _p17._1;
		return {
			ctor: '_Tuple2',
			_0: block,
			_1: A2(
				_elm_lang$virtual_dom$VirtualDom_Helpers$div,
				{
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('elm-overlay'),
					_1: {ctor: '[]'}
				},
				{ctor: '::', _0: _elm_lang$virtual_dom$VirtualDom_Overlay$styles, _1: nodes})
		};
	});

var _elm_lang$virtual_dom$VirtualDom_Debug$styles = A3(
	_elm_lang$virtual_dom$VirtualDom_Helpers$node,
	'style',
	{ctor: '[]'},
	{
		ctor: '::',
		_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('\n\nhtml {\n    overflow: hidden;\n    height: 100%;\n}\n\nbody {\n    height: 100%;\n    overflow: auto;\n}\n\n#debugger {\n  width: 100%\n  height: 100%;\n  font-family: monospace;\n}\n\n#values {\n  display: block;\n  float: left;\n  height: 100%;\n  width: calc(100% - 30ch);\n  margin: 0;\n  overflow: auto;\n  cursor: default;\n}\n\n.debugger-sidebar {\n  display: block;\n  float: left;\n  width: 30ch;\n  height: 100%;\n  color: white;\n  background-color: rgb(61, 61, 61);\n}\n\n.debugger-sidebar-controls {\n  width: 100%;\n  text-align: center;\n  background-color: rgb(50, 50, 50);\n}\n\n.debugger-sidebar-controls-import-export {\n  width: 100%;\n  height: 24px;\n  line-height: 24px;\n  font-size: 12px;\n}\n\n.debugger-sidebar-controls-resume {\n  width: 100%;\n  height: 30px;\n  line-height: 30px;\n  cursor: pointer;\n}\n\n.debugger-sidebar-controls-resume:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n.debugger-sidebar-messages {\n  width: 100%;\n  overflow-y: auto;\n  height: calc(100% - 24px);\n}\n\n.debugger-sidebar-messages-paused {\n  width: 100%;\n  overflow-y: auto;\n  height: calc(100% - 54px);\n}\n\n.messages-entry {\n  cursor: pointer;\n  width: 100%;\n}\n\n.messages-entry:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n.messages-entry-selected, .messages-entry-selected:hover {\n  background-color: rgb(10, 10, 10);\n}\n\n.messages-entry-content {\n  width: calc(100% - 7ch);\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 1ch;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n}\n\n.messages-entry-index {\n  color: #666;\n  width: 5ch;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-right: 1ch;\n  text-align: right;\n  display: block;\n  float: right;\n}\n\n'),
		_1: {ctor: '[]'}
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$button = F2(
	function (msg, label) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$span,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(msg),
				_1: {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Helpers$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'cursor', _1: 'pointer'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(label),
				_1: {ctor: '[]'}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$getLatestModel = function (state) {
	var _p0 = state;
	if (_p0.ctor === 'Running') {
		return _p0._0;
	} else {
		return _p0._2;
	}
};
var _elm_lang$virtual_dom$VirtualDom_Debug$withGoodMetadata = F2(
	function (model, func) {
		var _p1 = model.metadata;
		if (_p1.ctor === 'Ok') {
			return func(_p1._0);
		} else {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{
						overlay: _elm_lang$virtual_dom$VirtualDom_Overlay$badMetadata(_p1._0)
					}),
				{ctor: '[]'});
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$Model = F6(
	function (a, b, c, d, e, f) {
		return {history: a, state: b, expando: c, metadata: d, overlay: e, isDebuggerOpen: f};
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$Paused = F3(
	function (a, b, c) {
		return {ctor: 'Paused', _0: a, _1: b, _2: c};
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$Running = function (a) {
	return {ctor: 'Running', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Debug$loadNewHistory = F3(
	function (rawHistory, userUpdate, model) {
		var pureUserUpdate = F2(
			function (msg, userModel) {
				return _elm_lang$core$Tuple$first(
					A2(userUpdate, msg, userModel));
			});
		var initialUserModel = _elm_lang$virtual_dom$VirtualDom_History$initialModel(model.history);
		var decoder = A2(_elm_lang$virtual_dom$VirtualDom_History$decoder, initialUserModel, pureUserUpdate);
		var _p2 = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, rawHistory);
		if (_p2.ctor === 'Err') {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{overlay: _elm_lang$virtual_dom$VirtualDom_Overlay$corruptImport}),
				{ctor: '[]'});
		} else {
			var _p3 = _p2._0._0;
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{
						history: _p2._0._1,
						state: _elm_lang$virtual_dom$VirtualDom_Debug$Running(_p3),
						expando: _elm_lang$virtual_dom$VirtualDom_Expando$init(_p3),
						overlay: _elm_lang$virtual_dom$VirtualDom_Overlay$none
					}),
				{ctor: '[]'});
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$OverlayMsg = function (a) {
	return {ctor: 'OverlayMsg', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Debug$Upload = function (a) {
	return {ctor: 'Upload', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Debug$upload = A2(_elm_lang$core$Task$perform, _elm_lang$virtual_dom$VirtualDom_Debug$Upload, _elm_lang$virtual_dom$Native_Debug.upload);
var _elm_lang$virtual_dom$VirtualDom_Debug$Export = {ctor: 'Export'};
var _elm_lang$virtual_dom$VirtualDom_Debug$Import = {ctor: 'Import'};
var _elm_lang$virtual_dom$VirtualDom_Debug$Down = {ctor: 'Down'};
var _elm_lang$virtual_dom$VirtualDom_Debug$Up = {ctor: 'Up'};
var _elm_lang$virtual_dom$VirtualDom_Debug$Close = {ctor: 'Close'};
var _elm_lang$virtual_dom$VirtualDom_Debug$Open = {ctor: 'Open'};
var _elm_lang$virtual_dom$VirtualDom_Debug$Jump = function (a) {
	return {ctor: 'Jump', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Debug$Resume = {ctor: 'Resume'};
var _elm_lang$virtual_dom$VirtualDom_Debug$overlayConfig = {resume: _elm_lang$virtual_dom$VirtualDom_Debug$Resume, open: _elm_lang$virtual_dom$VirtualDom_Debug$Open, importHistory: _elm_lang$virtual_dom$VirtualDom_Debug$Import, exportHistory: _elm_lang$virtual_dom$VirtualDom_Debug$Export, wrap: _elm_lang$virtual_dom$VirtualDom_Debug$OverlayMsg};
var _elm_lang$virtual_dom$VirtualDom_Debug$viewIn = function (_p4) {
	var _p5 = _p4;
	var isPaused = function () {
		var _p6 = _p5.state;
		if (_p6.ctor === 'Running') {
			return false;
		} else {
			return true;
		}
	}();
	return A5(
		_elm_lang$virtual_dom$VirtualDom_Overlay$view,
		_elm_lang$virtual_dom$VirtualDom_Debug$overlayConfig,
		isPaused,
		_p5.isDebuggerOpen,
		_elm_lang$virtual_dom$VirtualDom_History$size(_p5.history),
		_p5.overlay);
};
var _elm_lang$virtual_dom$VirtualDom_Debug$resumeButton = A2(
	_elm_lang$virtual_dom$VirtualDom_Helpers$div,
	{
		ctor: '::',
		_0: _elm_lang$virtual_dom$VirtualDom_Helpers$onClick(_elm_lang$virtual_dom$VirtualDom_Debug$Resume),
		_1: {
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('debugger-sidebar-controls-resume'),
			_1: {ctor: '[]'}
		}
	},
	{
		ctor: '::',
		_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text('Resume'),
		_1: {ctor: '[]'}
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$viewResumeButton = function (maybeIndex) {
	var _p7 = maybeIndex;
	if (_p7.ctor === 'Nothing') {
		return _elm_lang$virtual_dom$VirtualDom_Helpers$text('');
	} else {
		return _elm_lang$virtual_dom$VirtualDom_Debug$resumeButton;
	}
};
var _elm_lang$virtual_dom$VirtualDom_Debug$playButton = function (maybeIndex) {
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('debugger-sidebar-controls'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Debug$viewResumeButton(maybeIndex),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$div,
					{
						ctor: '::',
						_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('debugger-sidebar-controls-import-export'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(_elm_lang$virtual_dom$VirtualDom_Debug$button, _elm_lang$virtual_dom$VirtualDom_Debug$Import, 'Import'),
						_1: {
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom_Helpers$text(' / '),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$virtual_dom$VirtualDom_Debug$button, _elm_lang$virtual_dom$VirtualDom_Debug$Export, 'Export'),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Debug$viewSidebar = F2(
	function (state, history) {
		var maybeIndex = function () {
			var _p8 = state;
			if (_p8.ctor === 'Running') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(_p8._0);
			}
		}();
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$div,
			{
				ctor: '::',
				_0: _elm_lang$virtual_dom$VirtualDom_Helpers$class('debugger-sidebar'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$virtual_dom$VirtualDom_Helpers$map,
					_elm_lang$virtual_dom$VirtualDom_Debug$Jump,
					A2(_elm_lang$virtual_dom$VirtualDom_History$view, maybeIndex, history)),
				_1: {
					ctor: '::',
					_0: _elm_lang$virtual_dom$VirtualDom_Debug$playButton(maybeIndex),
					_1: {ctor: '[]'}
				}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$ExpandoMsg = function (a) {
	return {ctor: 'ExpandoMsg', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Debug$viewOut = function (_p9) {
	var _p10 = _p9;
	return A2(
		_elm_lang$virtual_dom$VirtualDom_Helpers$div,
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Helpers$id('debugger'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom_Debug$styles,
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$virtual_dom$VirtualDom_Debug$viewSidebar, _p10.state, _p10.history),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$virtual_dom$VirtualDom_Helpers$map,
						_elm_lang$virtual_dom$VirtualDom_Debug$ExpandoMsg,
						A2(
							_elm_lang$virtual_dom$VirtualDom_Helpers$div,
							{
								ctor: '::',
								_0: _elm_lang$virtual_dom$VirtualDom_Helpers$id('values'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(_elm_lang$virtual_dom$VirtualDom_Expando$view, _elm_lang$core$Maybe$Nothing, _p10.expando),
								_1: {ctor: '[]'}
							})),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _elm_lang$virtual_dom$VirtualDom_Debug$UserMsg = function (a) {
	return {ctor: 'UserMsg', _0: a};
};
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapInit = F2(
	function (metadata, _p11) {
		var _p12 = _p11;
		var _p13 = _p12._0;
		return A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			{
				history: _elm_lang$virtual_dom$VirtualDom_History$empty(_p13),
				state: _elm_lang$virtual_dom$VirtualDom_Debug$Running(_p13),
				expando: _elm_lang$virtual_dom$VirtualDom_Expando$init(_p13),
				metadata: _elm_lang$virtual_dom$VirtualDom_Metadata$decode(metadata),
				overlay: _elm_lang$virtual_dom$VirtualDom_Overlay$none,
				isDebuggerOpen: false
			},
			{
				ctor: '::',
				_0: A2(_elm_lang$core$Platform_Cmd$map, _elm_lang$virtual_dom$VirtualDom_Debug$UserMsg, _p12._1),
				_1: {ctor: '[]'}
			});
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapSubs = F2(
	function (userSubscriptions, _p14) {
		var _p15 = _p14;
		return A2(
			_elm_lang$core$Platform_Sub$map,
			_elm_lang$virtual_dom$VirtualDom_Debug$UserMsg,
			userSubscriptions(
				_elm_lang$virtual_dom$VirtualDom_Debug$getLatestModel(_p15.state)));
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapView = F2(
	function (userView, _p16) {
		var _p17 = _p16;
		var currentModel = function () {
			var _p18 = _p17.state;
			if (_p18.ctor === 'Running') {
				return _p18._0;
			} else {
				return _p18._1;
			}
		}();
		return A2(
			_elm_lang$virtual_dom$VirtualDom_Helpers$map,
			_elm_lang$virtual_dom$VirtualDom_Debug$UserMsg,
			userView(currentModel));
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$NoOp = {ctor: 'NoOp'};
var _elm_lang$virtual_dom$VirtualDom_Debug$download = F2(
	function (metadata, history) {
		var json = _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'metadata',
					_1: _elm_lang$virtual_dom$VirtualDom_Metadata$encode(metadata)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'history',
						_1: _elm_lang$virtual_dom$VirtualDom_History$encode(history)
					},
					_1: {ctor: '[]'}
				}
			});
		var historyLength = _elm_lang$virtual_dom$VirtualDom_History$size(history);
		return A2(
			_elm_lang$core$Task$perform,
			function (_p19) {
				return _elm_lang$virtual_dom$VirtualDom_Debug$NoOp;
			},
			A2(_elm_lang$virtual_dom$Native_Debug.download, historyLength, json));
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$runIf = F2(
	function (bool, task) {
		return bool ? A2(
			_elm_lang$core$Task$perform,
			_elm_lang$core$Basics$always(_elm_lang$virtual_dom$VirtualDom_Debug$NoOp),
			task) : _elm_lang$core$Platform_Cmd$none;
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$updateUserMsg = F4(
	function (userUpdate, scrollTask, userMsg, _p20) {
		var _p21 = _p20;
		var _p25 = _p21.state;
		var _p24 = _p21;
		var userModel = _elm_lang$virtual_dom$VirtualDom_Debug$getLatestModel(_p25);
		var newHistory = A3(_elm_lang$virtual_dom$VirtualDom_History$add, userMsg, userModel, _p21.history);
		var _p22 = A2(userUpdate, userMsg, userModel);
		var newUserModel = _p22._0;
		var userCmds = _p22._1;
		var commands = A2(_elm_lang$core$Platform_Cmd$map, _elm_lang$virtual_dom$VirtualDom_Debug$UserMsg, userCmds);
		var _p23 = _p25;
		if (_p23.ctor === 'Running') {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					_p24,
					{
						history: newHistory,
						state: _elm_lang$virtual_dom$VirtualDom_Debug$Running(newUserModel),
						expando: A2(_elm_lang$virtual_dom$VirtualDom_Expando$merge, newUserModel, _p21.expando)
					}),
				{
					ctor: '::',
					_0: commands,
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$virtual_dom$VirtualDom_Debug$runIf, _p24.isDebuggerOpen, scrollTask),
						_1: {ctor: '[]'}
					}
				});
		} else {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					_p24,
					{
						history: newHistory,
						state: A3(_elm_lang$virtual_dom$VirtualDom_Debug$Paused, _p23._0, _p23._1, newUserModel)
					}),
				{
					ctor: '::',
					_0: commands,
					_1: {ctor: '[]'}
				});
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapUpdate = F4(
	function (userUpdate, scrollTask, msg, model) {
		wrapUpdate:
		while (true) {
			var _p26 = msg;
			switch (_p26.ctor) {
				case 'NoOp':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				case 'UserMsg':
					return A4(_elm_lang$virtual_dom$VirtualDom_Debug$updateUserMsg, userUpdate, scrollTask, _p26._0, model);
				case 'ExpandoMsg':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								expando: A2(_elm_lang$virtual_dom$VirtualDom_Expando$update, _p26._0, model.expando)
							}),
						{ctor: '[]'});
				case 'Resume':
					var _p27 = model.state;
					if (_p27.ctor === 'Running') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					} else {
						var _p28 = _p27._2;
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									state: _elm_lang$virtual_dom$VirtualDom_Debug$Running(_p28),
									expando: A2(_elm_lang$virtual_dom$VirtualDom_Expando$merge, _p28, model.expando)
								}),
							{
								ctor: '::',
								_0: A2(_elm_lang$virtual_dom$VirtualDom_Debug$runIf, model.isDebuggerOpen, scrollTask),
								_1: {ctor: '[]'}
							});
					}
				case 'Jump':
					var _p30 = _p26._0;
					var _p29 = A3(_elm_lang$virtual_dom$VirtualDom_History$get, userUpdate, _p30, model.history);
					var indexModel = _p29._0;
					var indexMsg = _p29._1;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: A3(
									_elm_lang$virtual_dom$VirtualDom_Debug$Paused,
									_p30,
									indexModel,
									_elm_lang$virtual_dom$VirtualDom_Debug$getLatestModel(model.state)),
								expando: A2(_elm_lang$virtual_dom$VirtualDom_Expando$merge, indexModel, model.expando)
							}),
						{ctor: '[]'});
				case 'Open':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{isDebuggerOpen: true}),
						{ctor: '[]'});
				case 'Close':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{isDebuggerOpen: false}),
						{ctor: '[]'});
				case 'Up':
					var index = function () {
						var _p31 = model.state;
						if (_p31.ctor === 'Paused') {
							return _p31._0;
						} else {
							return _elm_lang$virtual_dom$VirtualDom_History$size(model.history);
						}
					}();
					if (_elm_lang$core$Native_Utils.cmp(index, 0) > 0) {
						var _v17 = userUpdate,
							_v18 = scrollTask,
							_v19 = _elm_lang$virtual_dom$VirtualDom_Debug$Jump(index - 1),
							_v20 = model;
						userUpdate = _v17;
						scrollTask = _v18;
						msg = _v19;
						model = _v20;
						continue wrapUpdate;
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					}
				case 'Down':
					var _p32 = model.state;
					if (_p32.ctor === 'Running') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					} else {
						var _p33 = _p32._0;
						if (_elm_lang$core$Native_Utils.eq(
							_p33,
							_elm_lang$virtual_dom$VirtualDom_History$size(model.history) - 1)) {
							var _v22 = userUpdate,
								_v23 = scrollTask,
								_v24 = _elm_lang$virtual_dom$VirtualDom_Debug$Resume,
								_v25 = model;
							userUpdate = _v22;
							scrollTask = _v23;
							msg = _v24;
							model = _v25;
							continue wrapUpdate;
						} else {
							var _v26 = userUpdate,
								_v27 = scrollTask,
								_v28 = _elm_lang$virtual_dom$VirtualDom_Debug$Jump(_p33 + 1),
								_v29 = model;
							userUpdate = _v26;
							scrollTask = _v27;
							msg = _v28;
							model = _v29;
							continue wrapUpdate;
						}
					}
				case 'Import':
					return A2(
						_elm_lang$virtual_dom$VirtualDom_Debug$withGoodMetadata,
						model,
						function (_p34) {
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{
									ctor: '::',
									_0: _elm_lang$virtual_dom$VirtualDom_Debug$upload,
									_1: {ctor: '[]'}
								});
						});
				case 'Export':
					return A2(
						_elm_lang$virtual_dom$VirtualDom_Debug$withGoodMetadata,
						model,
						function (metadata) {
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{
									ctor: '::',
									_0: A2(_elm_lang$virtual_dom$VirtualDom_Debug$download, metadata, model.history),
									_1: {ctor: '[]'}
								});
						});
				case 'Upload':
					return A2(
						_elm_lang$virtual_dom$VirtualDom_Debug$withGoodMetadata,
						model,
						function (metadata) {
							var _p35 = A2(_elm_lang$virtual_dom$VirtualDom_Overlay$assessImport, metadata, _p26._0);
							if (_p35.ctor === 'Err') {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									_elm_lang$core$Native_Utils.update(
										model,
										{overlay: _p35._0}),
									{ctor: '[]'});
							} else {
								return A3(_elm_lang$virtual_dom$VirtualDom_Debug$loadNewHistory, _p35._0, userUpdate, model);
							}
						});
				default:
					var _p36 = A2(_elm_lang$virtual_dom$VirtualDom_Overlay$close, _p26._0, model.overlay);
					if (_p36.ctor === 'Nothing') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{overlay: _elm_lang$virtual_dom$VirtualDom_Overlay$none}),
							{ctor: '[]'});
					} else {
						return A3(_elm_lang$virtual_dom$VirtualDom_Debug$loadNewHistory, _p36._0, userUpdate, model);
					}
			}
		}
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$wrap = F2(
	function (metadata, _p37) {
		var _p38 = _p37;
		return {
			init: A2(_elm_lang$virtual_dom$VirtualDom_Debug$wrapInit, metadata, _p38.init),
			view: _elm_lang$virtual_dom$VirtualDom_Debug$wrapView(_p38.view),
			update: _elm_lang$virtual_dom$VirtualDom_Debug$wrapUpdate(_p38.update),
			viewIn: _elm_lang$virtual_dom$VirtualDom_Debug$viewIn,
			viewOut: _elm_lang$virtual_dom$VirtualDom_Debug$viewOut,
			subscriptions: _elm_lang$virtual_dom$VirtualDom_Debug$wrapSubs(_p38.subscriptions)
		};
	});
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags = F2(
	function (metadata, _p39) {
		var _p40 = _p39;
		return {
			init: function (flags) {
				return A2(
					_elm_lang$virtual_dom$VirtualDom_Debug$wrapInit,
					metadata,
					_p40.init(flags));
			},
			view: _elm_lang$virtual_dom$VirtualDom_Debug$wrapView(_p40.view),
			update: _elm_lang$virtual_dom$VirtualDom_Debug$wrapUpdate(_p40.update),
			viewIn: _elm_lang$virtual_dom$VirtualDom_Debug$viewIn,
			viewOut: _elm_lang$virtual_dom$VirtualDom_Debug$viewOut,
			subscriptions: _elm_lang$virtual_dom$VirtualDom_Debug$wrapSubs(_p40.subscriptions)
		};
	});

var _elm_lang$virtual_dom$VirtualDom$programWithFlags = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.programWithFlags, _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags, impl);
};
var _elm_lang$virtual_dom$VirtualDom$program = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, impl);
};
var _elm_lang$virtual_dom$VirtualDom$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom$mapProperty = _elm_lang$virtual_dom$Native_VirtualDom.mapProperty;
var _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;
var _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom$Property = {ctor: 'Property'};

var _elm_lang$html$Html$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;
var _elm_lang$html$Html$program = _elm_lang$virtual_dom$VirtualDom$program;
var _elm_lang$html$Html$beginnerProgram = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$html$Html$program(
		{
			init: A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_p1.model,
				{ctor: '[]'}),
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p1.update, msg, model),
						{ctor: '[]'});
				}),
			view: _p1.view,
			subscriptions: function (_p2) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _elm_lang$html$Html$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;
var _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');
var _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');
var _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');
var _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');
var _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');
var _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');
var _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');
var _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');
var _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');
var _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');
var _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');
var _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');
var _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');
var _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');
var _elm_lang$html$Html$main_ = _elm_lang$html$Html$node('main');
var _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');
var _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');
var _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');
var _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');
var _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');
var _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');
var _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');
var _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');
var _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');
var _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');
var _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');
var _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');
var _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');
var _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');
var _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');
var _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');
var _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');
var _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');
var _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');
var _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');
var _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');
var _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');
var _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');
var _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');
var _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');
var _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');
var _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');
var _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');
var _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');
var _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');
var _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');
var _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');
var _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');
var _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');
var _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');
var _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');
var _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');
var _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');
var _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');
var _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');
var _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');
var _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');
var _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');
var _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');
var _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');
var _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');
var _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');
var _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');
var _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');
var _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');
var _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');
var _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');
var _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');
var _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');
var _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');
var _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');
var _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');
var _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');
var _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');
var _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');
var _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');
var _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');
var _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');
var _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');
var _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');
var _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');
var _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');
var _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');
var _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');
var _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');
var _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');
var _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');
var _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');
var _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');
var _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');
var _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');
var _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');
var _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');
var _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');
var _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');
var _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');
var _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');
var _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');

var _elm_lang$html$Html_Attributes$map = _elm_lang$virtual_dom$VirtualDom$mapProperty;
var _elm_lang$html$Html_Attributes$attribute = _elm_lang$virtual_dom$VirtualDom$attribute;
var _elm_lang$html$Html_Attributes$contextmenu = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'contextmenu', value);
};
var _elm_lang$html$Html_Attributes$draggable = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'draggable', value);
};
var _elm_lang$html$Html_Attributes$itemprop = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'itemprop', value);
};
var _elm_lang$html$Html_Attributes$tabindex = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'tabIndex',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$charset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'charset', value);
};
var _elm_lang$html$Html_Attributes$height = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'height',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$width = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'width',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$formaction = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'formAction', value);
};
var _elm_lang$html$Html_Attributes$list = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'list', value);
};
var _elm_lang$html$Html_Attributes$minlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'minLength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$maxlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'maxlength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$size = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'size',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$form = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'form', value);
};
var _elm_lang$html$Html_Attributes$cols = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'cols',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rows = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rows',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$challenge = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'challenge', value);
};
var _elm_lang$html$Html_Attributes$media = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'media', value);
};
var _elm_lang$html$Html_Attributes$rel = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'rel', value);
};
var _elm_lang$html$Html_Attributes$datetime = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'datetime', value);
};
var _elm_lang$html$Html_Attributes$pubdate = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'pubdate', value);
};
var _elm_lang$html$Html_Attributes$colspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'colspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rowspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rowspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$manifest = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'manifest', value);
};
var _elm_lang$html$Html_Attributes$property = _elm_lang$virtual_dom$VirtualDom$property;
var _elm_lang$html$Html_Attributes$stringProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _elm_lang$html$Html_Attributes$class = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'className', name);
};
var _elm_lang$html$Html_Attributes$id = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'id', name);
};
var _elm_lang$html$Html_Attributes$title = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'title', name);
};
var _elm_lang$html$Html_Attributes$accesskey = function ($char) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'accessKey',
		_elm_lang$core$String$fromChar($char));
};
var _elm_lang$html$Html_Attributes$dir = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dir', value);
};
var _elm_lang$html$Html_Attributes$dropzone = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dropzone', value);
};
var _elm_lang$html$Html_Attributes$lang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'lang', value);
};
var _elm_lang$html$Html_Attributes$content = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'content', value);
};
var _elm_lang$html$Html_Attributes$httpEquiv = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'httpEquiv', value);
};
var _elm_lang$html$Html_Attributes$language = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'language', value);
};
var _elm_lang$html$Html_Attributes$src = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'src', value);
};
var _elm_lang$html$Html_Attributes$alt = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'alt', value);
};
var _elm_lang$html$Html_Attributes$preload = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'preload', value);
};
var _elm_lang$html$Html_Attributes$poster = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'poster', value);
};
var _elm_lang$html$Html_Attributes$kind = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'kind', value);
};
var _elm_lang$html$Html_Attributes$srclang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srclang', value);
};
var _elm_lang$html$Html_Attributes$sandbox = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'sandbox', value);
};
var _elm_lang$html$Html_Attributes$srcdoc = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srcdoc', value);
};
var _elm_lang$html$Html_Attributes$type_ = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'type', value);
};
var _elm_lang$html$Html_Attributes$value = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'value', value);
};
var _elm_lang$html$Html_Attributes$defaultValue = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'defaultValue', value);
};
var _elm_lang$html$Html_Attributes$placeholder = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'placeholder', value);
};
var _elm_lang$html$Html_Attributes$accept = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'accept', value);
};
var _elm_lang$html$Html_Attributes$acceptCharset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'acceptCharset', value);
};
var _elm_lang$html$Html_Attributes$action = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'action', value);
};
var _elm_lang$html$Html_Attributes$autocomplete = function (bool) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'autocomplete',
		bool ? 'on' : 'off');
};
var _elm_lang$html$Html_Attributes$enctype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'enctype', value);
};
var _elm_lang$html$Html_Attributes$method = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'method', value);
};
var _elm_lang$html$Html_Attributes$name = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'name', value);
};
var _elm_lang$html$Html_Attributes$pattern = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'pattern', value);
};
var _elm_lang$html$Html_Attributes$for = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'htmlFor', value);
};
var _elm_lang$html$Html_Attributes$max = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'max', value);
};
var _elm_lang$html$Html_Attributes$min = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'min', value);
};
var _elm_lang$html$Html_Attributes$step = function (n) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'step', n);
};
var _elm_lang$html$Html_Attributes$wrap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'wrap', value);
};
var _elm_lang$html$Html_Attributes$usemap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'useMap', value);
};
var _elm_lang$html$Html_Attributes$shape = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'shape', value);
};
var _elm_lang$html$Html_Attributes$coords = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'coords', value);
};
var _elm_lang$html$Html_Attributes$keytype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'keytype', value);
};
var _elm_lang$html$Html_Attributes$align = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'align', value);
};
var _elm_lang$html$Html_Attributes$cite = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'cite', value);
};
var _elm_lang$html$Html_Attributes$href = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'href', value);
};
var _elm_lang$html$Html_Attributes$target = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'target', value);
};
var _elm_lang$html$Html_Attributes$downloadAs = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'download', value);
};
var _elm_lang$html$Html_Attributes$hreflang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'hreflang', value);
};
var _elm_lang$html$Html_Attributes$ping = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'ping', value);
};
var _elm_lang$html$Html_Attributes$start = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'start',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$headers = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'headers', value);
};
var _elm_lang$html$Html_Attributes$scope = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'scope', value);
};
var _elm_lang$html$Html_Attributes$boolProperty = F2(
	function (name, bool) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$bool(bool));
	});
var _elm_lang$html$Html_Attributes$hidden = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'hidden', bool);
};
var _elm_lang$html$Html_Attributes$contenteditable = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'contentEditable', bool);
};
var _elm_lang$html$Html_Attributes$spellcheck = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'spellcheck', bool);
};
var _elm_lang$html$Html_Attributes$async = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'async', bool);
};
var _elm_lang$html$Html_Attributes$defer = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'defer', bool);
};
var _elm_lang$html$Html_Attributes$scoped = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'scoped', bool);
};
var _elm_lang$html$Html_Attributes$autoplay = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autoplay', bool);
};
var _elm_lang$html$Html_Attributes$controls = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'controls', bool);
};
var _elm_lang$html$Html_Attributes$loop = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'loop', bool);
};
var _elm_lang$html$Html_Attributes$default = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'default', bool);
};
var _elm_lang$html$Html_Attributes$seamless = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'seamless', bool);
};
var _elm_lang$html$Html_Attributes$checked = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'checked', bool);
};
var _elm_lang$html$Html_Attributes$selected = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'selected', bool);
};
var _elm_lang$html$Html_Attributes$autofocus = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autofocus', bool);
};
var _elm_lang$html$Html_Attributes$disabled = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'disabled', bool);
};
var _elm_lang$html$Html_Attributes$multiple = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'multiple', bool);
};
var _elm_lang$html$Html_Attributes$novalidate = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'noValidate', bool);
};
var _elm_lang$html$Html_Attributes$readonly = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'readOnly', bool);
};
var _elm_lang$html$Html_Attributes$required = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'required', bool);
};
var _elm_lang$html$Html_Attributes$ismap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'isMap', value);
};
var _elm_lang$html$Html_Attributes$download = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'download', bool);
};
var _elm_lang$html$Html_Attributes$reversed = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'reversed', bool);
};
var _elm_lang$html$Html_Attributes$classList = function (list) {
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$second, list))));
};
var _elm_lang$html$Html_Attributes$style = _elm_lang$virtual_dom$VirtualDom$style;

//import Native.Scheduler //

var _elm_lang$core$Native_Time = function() {

var now = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
{
	callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
});

function setInterval_(interval, task)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = setInterval(function() {
			_elm_lang$core$Native_Scheduler.rawSpawn(task);
		}, interval);

		return function() { clearInterval(id); };
	});
}

return {
	now: now,
	setInterval_: F2(setInterval_)
};

}();
var _elm_lang$core$Time$setInterval = _elm_lang$core$Native_Time.setInterval_;
var _elm_lang$core$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		var _p0 = intervals;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Task$succeed(processes);
		} else {
			var _p1 = _p0._0;
			var spawnRest = function (id) {
				return A3(
					_elm_lang$core$Time$spawnHelp,
					router,
					_p0._1,
					A3(_elm_lang$core$Dict$insert, _p1, id, processes));
			};
			var spawnTimer = _elm_lang$core$Native_Scheduler.spawn(
				A2(
					_elm_lang$core$Time$setInterval,
					_p1,
					A2(_elm_lang$core$Platform$sendToSelf, router, _p1)));
			return A2(_elm_lang$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var _elm_lang$core$Time$addMySub = F2(
	function (_p2, state) {
		var _p3 = _p2;
		var _p6 = _p3._1;
		var _p5 = _p3._0;
		var _p4 = A2(_elm_lang$core$Dict$get, _p5, state);
		if (_p4.ctor === 'Nothing') {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{
					ctor: '::',
					_0: _p6,
					_1: {ctor: '[]'}
				},
				state);
		} else {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{ctor: '::', _0: _p6, _1: _p4._0},
				state);
		}
	});
var _elm_lang$core$Time$inMilliseconds = function (t) {
	return t;
};
var _elm_lang$core$Time$millisecond = 1;
var _elm_lang$core$Time$second = 1000 * _elm_lang$core$Time$millisecond;
var _elm_lang$core$Time$minute = 60 * _elm_lang$core$Time$second;
var _elm_lang$core$Time$hour = 60 * _elm_lang$core$Time$minute;
var _elm_lang$core$Time$inHours = function (t) {
	return t / _elm_lang$core$Time$hour;
};
var _elm_lang$core$Time$inMinutes = function (t) {
	return t / _elm_lang$core$Time$minute;
};
var _elm_lang$core$Time$inSeconds = function (t) {
	return t / _elm_lang$core$Time$second;
};
var _elm_lang$core$Time$now = _elm_lang$core$Native_Time.now;
var _elm_lang$core$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _p7 = A2(_elm_lang$core$Dict$get, interval, state.taggers);
		if (_p7.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var tellTaggers = function (time) {
				return _elm_lang$core$Task$sequence(
					A2(
						_elm_lang$core$List$map,
						function (tagger) {
							return A2(
								_elm_lang$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						_p7._0));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p8) {
					return _elm_lang$core$Task$succeed(state);
				},
				A2(_elm_lang$core$Task$andThen, tellTaggers, _elm_lang$core$Time$now));
		}
	});
var _elm_lang$core$Time$subscription = _elm_lang$core$Native_Platform.leaf('Time');
var _elm_lang$core$Time$State = F2(
	function (a, b) {
		return {taggers: a, processes: b};
	});
var _elm_lang$core$Time$init = _elm_lang$core$Task$succeed(
	A2(_elm_lang$core$Time$State, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty));
var _elm_lang$core$Time$onEffects = F3(
	function (router, subs, _p9) {
		var _p10 = _p9;
		var rightStep = F3(
			function (_p12, id, _p11) {
				var _p13 = _p11;
				return {
					ctor: '_Tuple3',
					_0: _p13._0,
					_1: _p13._1,
					_2: A2(
						_elm_lang$core$Task$andThen,
						function (_p14) {
							return _p13._2;
						},
						_elm_lang$core$Native_Scheduler.kill(id))
				};
			});
		var bothStep = F4(
			function (interval, taggers, id, _p15) {
				var _p16 = _p15;
				return {
					ctor: '_Tuple3',
					_0: _p16._0,
					_1: A3(_elm_lang$core$Dict$insert, interval, id, _p16._1),
					_2: _p16._2
				};
			});
		var leftStep = F3(
			function (interval, taggers, _p17) {
				var _p18 = _p17;
				return {
					ctor: '_Tuple3',
					_0: {ctor: '::', _0: interval, _1: _p18._0},
					_1: _p18._1,
					_2: _p18._2
				};
			});
		var newTaggers = A3(_elm_lang$core$List$foldl, _elm_lang$core$Time$addMySub, _elm_lang$core$Dict$empty, subs);
		var _p19 = A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			_p10.processes,
			{
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Dict$empty,
				_2: _elm_lang$core$Task$succeed(
					{ctor: '_Tuple0'})
			});
		var spawnList = _p19._0;
		var existingDict = _p19._1;
		var killTask = _p19._2;
		return A2(
			_elm_lang$core$Task$andThen,
			function (newProcesses) {
				return _elm_lang$core$Task$succeed(
					A2(_elm_lang$core$Time$State, newTaggers, newProcesses));
			},
			A2(
				_elm_lang$core$Task$andThen,
				function (_p20) {
					return A3(_elm_lang$core$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var _elm_lang$core$Time$Every = F2(
	function (a, b) {
		return {ctor: 'Every', _0: a, _1: b};
	});
var _elm_lang$core$Time$every = F2(
	function (interval, tagger) {
		return _elm_lang$core$Time$subscription(
			A2(_elm_lang$core$Time$Every, interval, tagger));
	});
var _elm_lang$core$Time$subMap = F2(
	function (f, _p21) {
		var _p22 = _p21;
		return A2(
			_elm_lang$core$Time$Every,
			_p22._0,
			function (_p23) {
				return f(
					_p22._1(_p23));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Time'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Time$init, onEffects: _elm_lang$core$Time$onEffects, onSelfMsg: _elm_lang$core$Time$onSelfMsg, tag: 'sub', subMap: _elm_lang$core$Time$subMap};

var _elm_lang$core$Process$kill = _elm_lang$core$Native_Scheduler.kill;
var _elm_lang$core$Process$sleep = _elm_lang$core$Native_Scheduler.sleep;
var _elm_lang$core$Process$spawn = _elm_lang$core$Native_Scheduler.spawn;

var _debois$elm_mdl$Material_Helpers$noAttr = A2(_elm_lang$html$Html_Attributes$attribute, 'data-elm-mdl-noop', '');
var _debois$elm_mdl$Material_Helpers$aria = F2(
	function (name, value) {
		return value ? A2(
			_elm_lang$html$Html_Attributes$attribute,
			A2(_elm_lang$core$Basics_ops['++'], 'aria-', name),
			'true') : _debois$elm_mdl$Material_Helpers$noAttr;
	});
var _debois$elm_mdl$Material_Helpers$delay = F2(
	function (t, x) {
		return A2(
			_elm_lang$core$Task$perform,
			_elm_lang$core$Basics$always(x),
			_elm_lang$core$Process$sleep(t));
	});
var _debois$elm_mdl$Material_Helpers$cssTransitionStep = function (x) {
	return A2(_debois$elm_mdl$Material_Helpers$delay, 50, x);
};
var _debois$elm_mdl$Material_Helpers$cmd = function (msg) {
	return A2(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$always(msg),
		_elm_lang$core$Task$succeed(msg));
};
var _debois$elm_mdl$Material_Helpers$lift = F6(
	function (get, set, fwd, update, action, model) {
		var _p0 = A2(
			update,
			action,
			get(model));
		var submodel_ = _p0._0;
		var e = _p0._1;
		return {
			ctor: '_Tuple2',
			_0: A2(set, model, submodel_),
			_1: A2(_elm_lang$core$Platform_Cmd$map, fwd, e)
		};
	});
var _debois$elm_mdl$Material_Helpers$lift_ = F5(
	function (get, set, update, action, model) {
		return {
			ctor: '_Tuple2',
			_0: A2(
				set,
				model,
				A2(
					update,
					action,
					get(model))),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _debois$elm_mdl$Material_Helpers$map2nd = F2(
	function (f, _p1) {
		var _p2 = _p1;
		return {
			ctor: '_Tuple2',
			_0: _p2._0,
			_1: f(_p2._1)
		};
	});
var _debois$elm_mdl$Material_Helpers$map1st = F2(
	function (f, _p3) {
		var _p4 = _p3;
		return {
			ctor: '_Tuple2',
			_0: f(_p4._0),
			_1: _p4._1
		};
	});
var _debois$elm_mdl$Material_Helpers$blurOn = function (evt) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		A2(_elm_lang$core$Basics_ops['++'], 'on', evt),
		'this.blur()');
};
var _debois$elm_mdl$Material_Helpers$effect = F2(
	function (e, x) {
		return {ctor: '_Tuple2', _0: x, _1: e};
	});
var _debois$elm_mdl$Material_Helpers$pure = _debois$elm_mdl$Material_Helpers$effect(_elm_lang$core$Platform_Cmd$none);
var _debois$elm_mdl$Material_Helpers$filter = F3(
	function (elem, attr, html) {
		return A2(
			elem,
			attr,
			A2(
				_elm_lang$core$List$filterMap,
				function (x) {
					return x;
				},
				html));
	});

var _debois$elm_mdl$Material_Component$subs = F5(
	function (ctor, get, subscriptions, lift, model) {
		return _elm_lang$core$Platform_Sub$batch(
			A3(
				_elm_lang$core$Dict$foldl,
				F3(
					function (idx, model, ss) {
						return {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Platform_Sub$map,
								function (_p0) {
									return lift(
										A2(ctor, idx, _p0));
								},
								subscriptions(model)),
							_1: ss
						};
					}),
				{ctor: '[]'},
				get(model)));
	});
var _debois$elm_mdl$Material_Component$generalise = F4(
	function (update, lift, msg, model) {
		return A2(
			_debois$elm_mdl$Material_Helpers$map2nd,
			_elm_lang$core$Platform_Cmd$map(lift),
			A2(
				_debois$elm_mdl$Material_Helpers$map1st,
				_elm_lang$core$Maybe$Just,
				A2(update, msg, model)));
	});
var _debois$elm_mdl$Material_Component$react = F8(
	function (get, set, ctor, update, lift, msg, idx, store) {
		return A2(
			_debois$elm_mdl$Material_Helpers$map1st,
			_elm_lang$core$Maybe$map(
				A2(set, idx, store)),
			A3(
				update,
				function (_p1) {
					return lift(
						A2(ctor, idx, _p1));
				},
				msg,
				A2(get, idx, store)));
	});
var _debois$elm_mdl$Material_Component$react1 = F7(
	function (get, set, ctor, update, lift, msg, store) {
		return A2(
			_debois$elm_mdl$Material_Helpers$map1st,
			_elm_lang$core$Maybe$map(
				set(store)),
			A3(
				update,
				function (_p2) {
					return lift(
						ctor(_p2));
				},
				msg,
				get(store)));
	});
var _debois$elm_mdl$Material_Component$render = F6(
	function (get_model, view, ctor, lift, idx, store) {
		return A2(
			view,
			function (_p3) {
				return lift(
					A2(ctor, idx, _p3));
			},
			A2(get_model, idx, store));
	});
var _debois$elm_mdl$Material_Component$render1 = F5(
	function (get_model, view, ctor, lift, store) {
		return A2(
			view,
			function (_p4) {
				return lift(
					ctor(_p4));
			},
			get_model(store));
	});
var _debois$elm_mdl$Material_Component$indexed = F3(
	function (get_model, set_model, model0) {
		var set_ = F3(
			function (idx, store, model) {
				return A2(
					set_model,
					A3(
						_elm_lang$core$Dict$insert,
						idx,
						model,
						get_model(store)),
					store);
			});
		var get_ = F2(
			function (idx, store) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					model0,
					A2(
						_elm_lang$core$Dict$get,
						idx,
						get_model(store)));
			});
		return {ctor: '_Tuple2', _0: get_, _1: set_};
	});
var _debois$elm_mdl$Material_Component$Dispatch = function (a) {
	return {ctor: 'Dispatch', _0: a};
};
var _debois$elm_mdl$Material_Component$TabsMsg = F2(
	function (a, b) {
		return {ctor: 'TabsMsg', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Component$TooltipMsg = F2(
	function (a, b) {
		return {ctor: 'TooltipMsg', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Component$TogglesMsg = F2(
	function (a, b) {
		return {ctor: 'TogglesMsg', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Component$LayoutMsg = function (a) {
	return {ctor: 'LayoutMsg', _0: a};
};
var _debois$elm_mdl$Material_Component$MenuMsg = F2(
	function (a, b) {
		return {ctor: 'MenuMsg', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Component$TextfieldMsg = F2(
	function (a, b) {
		return {ctor: 'TextfieldMsg', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Component$ButtonMsg = F2(
	function (a, b) {
		return {ctor: 'ButtonMsg', _0: a, _1: b};
	});

var _elm_lang$html$Html_Events$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$html$Html_Events$targetChecked = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'checked',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$bool);
var _elm_lang$html$Html_Events$targetValue = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'value',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _elm_lang$html$Html_Events$defaultOptions = _elm_lang$virtual_dom$VirtualDom$defaultOptions;
var _elm_lang$html$Html_Events$onWithOptions = _elm_lang$virtual_dom$VirtualDom$onWithOptions;
var _elm_lang$html$Html_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$html$Html_Events$onFocus = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'focus',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onBlur = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'blur',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onSubmitOptions = _elm_lang$core$Native_Utils.update(
	_elm_lang$html$Html_Events$defaultOptions,
	{preventDefault: true});
var _elm_lang$html$Html_Events$onSubmit = function (msg) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'submit',
		_elm_lang$html$Html_Events$onSubmitOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onCheck = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetChecked));
};
var _elm_lang$html$Html_Events$onInput = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetValue));
};
var _elm_lang$html$Html_Events$onMouseOut = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseout',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseOver = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseover',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseLeave = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseEnter = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseenter',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseUp = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseDown = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mousedown',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onDoubleClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'dblclick',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});

var _debois$elm_mdl$Material_Dispatch$split = F4(
	function (k0, same, differ, xs) {
		split:
		while (true) {
			var _p0 = xs;
			if (_p0.ctor === '[]') {
				return {ctor: '_Tuple2', _0: same, _1: differ};
			} else {
				var _p1 = _p0._1;
				if (_elm_lang$core$Native_Utils.eq(_p0._0._0, k0)) {
					var _v1 = k0,
						_v2 = {ctor: '::', _0: _p0._0._1, _1: same},
						_v3 = differ,
						_v4 = _p1;
					k0 = _v1;
					same = _v2;
					differ = _v3;
					xs = _v4;
					continue split;
				} else {
					var _v5 = k0,
						_v6 = same,
						_v7 = {ctor: '::', _0: _p0._0, _1: differ},
						_v8 = _p1;
					k0 = _v5;
					same = _v6;
					differ = _v7;
					xs = _v8;
					continue split;
				}
			}
		}
	});
var _debois$elm_mdl$Material_Dispatch$group_ = F2(
	function (acc, items) {
		group_:
		while (true) {
			var _p2 = items;
			if (_p2.ctor === '[]') {
				return acc;
			} else {
				if (_p2._1.ctor === '[]') {
					return {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _p2._0._0,
							_1: {
								ctor: '::',
								_0: _p2._0._1,
								_1: {ctor: '[]'}
							}
						},
						_1: acc
					};
				} else {
					if ((_p2._1._0.ctor === '_Tuple2') && (_p2._1._1.ctor === '[]')) {
						var _p6 = _p2._1._0._1;
						var _p5 = _p2._0._1;
						var _p4 = _p2._1._0._0;
						var _p3 = _p2._0._0;
						return _elm_lang$core$Native_Utils.eq(_p3, _p4) ? {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: _p3,
								_1: {
									ctor: '::',
									_0: _p6,
									_1: {
										ctor: '::',
										_0: _p5,
										_1: {ctor: '[]'}
									}
								}
							},
							_1: acc
						} : {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: _p4,
								_1: {
									ctor: '::',
									_0: _p6,
									_1: {ctor: '[]'}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _p3,
									_1: {
										ctor: '::',
										_0: _p5,
										_1: {ctor: '[]'}
									}
								},
								_1: acc
							}
						};
					} else {
						var _p8 = _p2._0._0;
						var _p7 = A4(
							_debois$elm_mdl$Material_Dispatch$split,
							_p8,
							{
								ctor: '::',
								_0: _p2._0._1,
								_1: {ctor: '[]'}
							},
							{ctor: '[]'},
							_p2._1);
						var same = _p7._0;
						var different = _p7._1;
						var _v10 = {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: _p8, _1: same},
							_1: acc
						},
							_v11 = different;
						acc = _v10;
						items = _v11;
						continue group_;
					}
				}
			}
		}
	});
var _debois$elm_mdl$Material_Dispatch$group = _debois$elm_mdl$Material_Dispatch$group_(
	{ctor: '[]'});
var _debois$elm_mdl$Material_Dispatch$onSingle = function (_p9) {
	var _p10 = _p9;
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		_p10._0,
		A2(_elm_lang$core$Maybe$withDefault, _elm_lang$html$Html_Events$defaultOptions, _p10._1._1),
		_p10._1._0);
};
var _debois$elm_mdl$Material_Dispatch$pickOptions = function (decoders) {
	pickOptions:
	while (true) {
		var _p11 = decoders;
		if (_p11.ctor === '::') {
			if ((_p11._0.ctor === '_Tuple2') && (_p11._0._1.ctor === 'Just')) {
				return _p11._0._1._0;
			} else {
				var _v14 = _p11._1;
				decoders = _v14;
				continue pickOptions;
			}
		} else {
			return _elm_lang$html$Html_Events$defaultOptions;
		}
	}
};
var _debois$elm_mdl$Material_Dispatch$flatten = function (decoders) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		function (value) {
			return A2(
				_elm_lang$core$List$filterMap,
				function (decoder) {
					return _elm_lang$core$Result$toMaybe(
						A2(_elm_lang$core$Json_Decode$decodeValue, decoder, value));
				},
				decoders);
		},
		_elm_lang$core$Json_Decode$value);
};
var _debois$elm_mdl$Material_Dispatch$onWithOptions = F4(
	function (event, lift, options, decoders) {
		return A3(
			_elm_lang$html$Html_Events$onWithOptions,
			event,
			options,
			A2(
				_elm_lang$core$Json_Decode$map,
				lift,
				_debois$elm_mdl$Material_Dispatch$flatten(decoders)));
	});
var _debois$elm_mdl$Material_Dispatch$on = F2(
	function (event, lift) {
		return A3(_debois$elm_mdl$Material_Dispatch$onWithOptions, event, lift, _elm_lang$html$Html_Events$defaultOptions);
	});
var _debois$elm_mdl$Material_Dispatch$onMany = F2(
	function (lift, decoders) {
		var _p12 = decoders;
		if ((_p12._1.ctor === '::') && (_p12._1._1.ctor === '[]')) {
			return _debois$elm_mdl$Material_Dispatch$onSingle(
				{ctor: '_Tuple2', _0: _p12._0, _1: _p12._1._0});
		} else {
			var _p13 = _p12._1;
			return A3(
				_elm_lang$html$Html_Events$onWithOptions,
				_p12._0,
				_debois$elm_mdl$Material_Dispatch$pickOptions(_p13),
				lift(
					_debois$elm_mdl$Material_Dispatch$flatten(
						A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, _p13))));
		}
	});
var _debois$elm_mdl$Material_Dispatch$map2nd = F2(
	function (f, _p14) {
		var _p15 = _p14;
		return {
			ctor: '_Tuple2',
			_0: _p15._0,
			_1: f(_p15._1)
		};
	});
var _debois$elm_mdl$Material_Dispatch$update1 = F3(
	function (update, cmd, _p16) {
		var _p17 = _p16;
		return A2(
			_debois$elm_mdl$Material_Dispatch$map2nd,
			A2(
				_elm_lang$core$Basics$flip,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				_p17._1),
			A2(update, cmd, _p17._0));
	});
var _debois$elm_mdl$Material_Dispatch$update = F3(
	function (update, msg, model) {
		return A2(
			_debois$elm_mdl$Material_Dispatch$map2nd,
			_elm_lang$core$Platform_Cmd$batch,
			A3(
				_elm_lang$core$List$foldl,
				_debois$elm_mdl$Material_Dispatch$update1(update),
				{
					ctor: '_Tuple2',
					_0: model,
					_1: {ctor: '[]'}
				},
				msg));
	});
var _debois$elm_mdl$Material_Dispatch$cmd = function (msg) {
	return A2(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$always(msg),
		_elm_lang$core$Task$succeed(msg));
};
var _debois$elm_mdl$Material_Dispatch$forward = function (messages) {
	return _elm_lang$core$Platform_Cmd$batch(
		A2(_elm_lang$core$List$map, _debois$elm_mdl$Material_Dispatch$cmd, messages));
};
var _debois$elm_mdl$Material_Dispatch$toAttributes = function (_p18) {
	var _p19 = _p18;
	var _p21 = _p19._0;
	var _p20 = _p21.lift;
	if (_p20.ctor === 'Just') {
		return A2(
			_elm_lang$core$List$map,
			_debois$elm_mdl$Material_Dispatch$onMany(_p20._0),
			_debois$elm_mdl$Material_Dispatch$group(_p21.decoders));
	} else {
		return A2(_elm_lang$core$List$map, _debois$elm_mdl$Material_Dispatch$onSingle, _p21.decoders);
	}
};
var _debois$elm_mdl$Material_Dispatch$getDecoder = function (_p22) {
	var _p23 = _p22;
	return _p23._0.lift;
};
var _debois$elm_mdl$Material_Dispatch$Config = function (a) {
	return {ctor: 'Config', _0: a};
};
var _debois$elm_mdl$Material_Dispatch$defaultConfig = _debois$elm_mdl$Material_Dispatch$Config(
	{
		decoders: {ctor: '[]'},
		lift: _elm_lang$core$Maybe$Nothing
	});
var _debois$elm_mdl$Material_Dispatch$setDecoder = F2(
	function (f, _p24) {
		var _p25 = _p24;
		return _debois$elm_mdl$Material_Dispatch$Config(
			_elm_lang$core$Native_Utils.update(
				_p25._0,
				{
					lift: _elm_lang$core$Maybe$Just(f)
				}));
	});
var _debois$elm_mdl$Material_Dispatch$setMsg = function (_p26) {
	return _debois$elm_mdl$Material_Dispatch$setDecoder(
		_elm_lang$core$Json_Decode$map(_p26));
};
var _debois$elm_mdl$Material_Dispatch$add = F4(
	function (event, options, decoder, _p27) {
		var _p28 = _p27;
		var _p29 = _p28._0;
		return _debois$elm_mdl$Material_Dispatch$Config(
			_elm_lang$core$Native_Utils.update(
				_p29,
				{
					decoders: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: event,
							_1: {ctor: '_Tuple2', _0: decoder, _1: options}
						},
						_1: _p29.decoders
					}
				}));
	});
var _debois$elm_mdl$Material_Dispatch$clear = function (_p30) {
	var _p31 = _p30;
	return _debois$elm_mdl$Material_Dispatch$Config(
		_elm_lang$core$Native_Utils.update(
			_p31._0,
			{
				decoders: {ctor: '[]'}
			}));
};

var _debois$elm_mdl$Material_Options_Internal$addAttributes = F2(
	function (summary, attrs) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			summary.attrs,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(summary.css),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(
							A2(_elm_lang$core$String$join, ' ', summary.classes)),
						_1: {ctor: '[]'}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					attrs,
					A2(
						_elm_lang$core$Basics_ops['++'],
						summary.internal,
						_debois$elm_mdl$Material_Dispatch$toAttributes(summary.dispatch)))));
	});
var _debois$elm_mdl$Material_Options_Internal$collect1_ = F2(
	function (options, acc) {
		var _p0 = options;
		switch (_p0.ctor) {
			case 'Class':
				return _elm_lang$core$Native_Utils.update(
					acc,
					{
						classes: {ctor: '::', _0: _p0._0, _1: acc.classes}
					});
			case 'CSS':
				return _elm_lang$core$Native_Utils.update(
					acc,
					{
						css: {ctor: '::', _0: _p0._0, _1: acc.css}
					});
			case 'Attribute':
				return _elm_lang$core$Native_Utils.update(
					acc,
					{
						attrs: {ctor: '::', _0: _p0._0, _1: acc.attrs}
					});
			case 'Internal':
				return _elm_lang$core$Native_Utils.update(
					acc,
					{
						internal: {ctor: '::', _0: _p0._0, _1: acc.internal}
					});
			case 'Listener':
				return _elm_lang$core$Native_Utils.update(
					acc,
					{
						dispatch: A4(_debois$elm_mdl$Material_Dispatch$add, _p0._0, _p0._1, _p0._2, acc.dispatch)
					});
			case 'Many':
				return A3(_elm_lang$core$List$foldl, _debois$elm_mdl$Material_Options_Internal$collect1_, acc, _p0._0);
			case 'Lift':
				return _elm_lang$core$Native_Utils.update(
					acc,
					{
						dispatch: A2(_debois$elm_mdl$Material_Dispatch$setDecoder, _p0._0, acc.dispatch)
					});
			case 'Set':
				return acc;
			default:
				return acc;
		}
	});
var _debois$elm_mdl$Material_Options_Internal$collect1 = F2(
	function (option, acc) {
		var _p1 = option;
		switch (_p1.ctor) {
			case 'Class':
				return _elm_lang$core$Native_Utils.update(
					acc,
					{
						classes: {ctor: '::', _0: _p1._0, _1: acc.classes}
					});
			case 'CSS':
				return _elm_lang$core$Native_Utils.update(
					acc,
					{
						css: {ctor: '::', _0: _p1._0, _1: acc.css}
					});
			case 'Attribute':
				return _elm_lang$core$Native_Utils.update(
					acc,
					{
						attrs: {ctor: '::', _0: _p1._0, _1: acc.attrs}
					});
			case 'Internal':
				return _elm_lang$core$Native_Utils.update(
					acc,
					{
						internal: {ctor: '::', _0: _p1._0, _1: acc.internal}
					});
			case 'Many':
				return A3(_elm_lang$core$List$foldl, _debois$elm_mdl$Material_Options_Internal$collect1, acc, _p1._0);
			case 'Set':
				return _elm_lang$core$Native_Utils.update(
					acc,
					{
						config: _p1._0(acc.config)
					});
			case 'Listener':
				return _elm_lang$core$Native_Utils.update(
					acc,
					{
						dispatch: A4(_debois$elm_mdl$Material_Dispatch$add, _p1._0, _p1._1, _p1._2, acc.dispatch)
					});
			case 'Lift':
				return _elm_lang$core$Native_Utils.update(
					acc,
					{
						dispatch: A2(_debois$elm_mdl$Material_Dispatch$setDecoder, _p1._0, acc.dispatch)
					});
			default:
				return acc;
		}
	});
var _debois$elm_mdl$Material_Options_Internal$recollect = _elm_lang$core$List$foldl(_debois$elm_mdl$Material_Options_Internal$collect1);
var _debois$elm_mdl$Material_Options_Internal$apply = F4(
	function (summary, ctor, options, attrs) {
		return ctor(
			A2(
				_debois$elm_mdl$Material_Options_Internal$addAttributes,
				A2(_debois$elm_mdl$Material_Options_Internal$recollect, summary, options),
				attrs));
	});
var _debois$elm_mdl$Material_Options_Internal$Summary = F6(
	function (a, b, c, d, e, f) {
		return {classes: a, css: b, attrs: c, internal: d, dispatch: e, config: f};
	});
var _debois$elm_mdl$Material_Options_Internal$collect = function (_p2) {
	return _debois$elm_mdl$Material_Options_Internal$recollect(
		A6(
			_debois$elm_mdl$Material_Options_Internal$Summary,
			{ctor: '[]'},
			{ctor: '[]'},
			{ctor: '[]'},
			{ctor: '[]'},
			_debois$elm_mdl$Material_Dispatch$defaultConfig,
			_p2));
};
var _debois$elm_mdl$Material_Options_Internal$collect_ = A2(
	_elm_lang$core$List$foldl,
	_debois$elm_mdl$Material_Options_Internal$collect1_,
	A6(
		_debois$elm_mdl$Material_Options_Internal$Summary,
		{ctor: '[]'},
		{ctor: '[]'},
		{ctor: '[]'},
		{ctor: '[]'},
		_debois$elm_mdl$Material_Dispatch$defaultConfig,
		{ctor: '_Tuple0'}));
var _debois$elm_mdl$Material_Options_Internal$None = {ctor: 'None'};
var _debois$elm_mdl$Material_Options_Internal$Lift = function (a) {
	return {ctor: 'Lift', _0: a};
};
var _debois$elm_mdl$Material_Options_Internal$dispatch = function (lift) {
	return _debois$elm_mdl$Material_Options_Internal$Lift(
		function (_p3) {
			return A2(
				_elm_lang$core$Json_Decode$map,
				lift,
				A2(_elm_lang$core$Json_Decode$map, _debois$elm_mdl$Material_Component$Dispatch, _p3));
		});
};
var _debois$elm_mdl$Material_Options_Internal$inject = F5(
	function (view, lift, a, b, c) {
		return A3(
			view,
			a,
			b,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options_Internal$dispatch(lift),
				_1: c
			});
	});
var _debois$elm_mdl$Material_Options_Internal$Listener = F3(
	function (a, b, c) {
		return {ctor: 'Listener', _0: a, _1: b, _2: c};
	});
var _debois$elm_mdl$Material_Options_Internal$on1 = F3(
	function (event, lift, m) {
		return A3(
			_debois$elm_mdl$Material_Options_Internal$Listener,
			event,
			_elm_lang$core$Maybe$Nothing,
			A2(
				_elm_lang$core$Json_Decode$map,
				lift,
				_elm_lang$core$Json_Decode$succeed(m)));
	});
var _debois$elm_mdl$Material_Options_Internal$Set = function (a) {
	return {ctor: 'Set', _0: a};
};
var _debois$elm_mdl$Material_Options_Internal$option = _debois$elm_mdl$Material_Options_Internal$Set;
var _debois$elm_mdl$Material_Options_Internal$Many = function (a) {
	return {ctor: 'Many', _0: a};
};
var _debois$elm_mdl$Material_Options_Internal$applyContainer = F3(
	function (summary, ctor, options) {
		return A4(
			_debois$elm_mdl$Material_Options_Internal$apply,
			_elm_lang$core$Native_Utils.update(
				summary,
				{
					dispatch: _debois$elm_mdl$Material_Dispatch$clear(summary.dispatch),
					attrs: {ctor: '[]'},
					internal: {ctor: '[]'},
					config: {ctor: '_Tuple0'}
				}),
			ctor,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options_Internal$Many(summary.config.container),
				_1: options
			},
			{ctor: '[]'});
	});
var _debois$elm_mdl$Material_Options_Internal$applyInput = F3(
	function (summary, ctor, options) {
		return A4(
			_debois$elm_mdl$Material_Options_Internal$apply,
			_elm_lang$core$Native_Utils.update(
				summary,
				{
					classes: {ctor: '[]'},
					css: {ctor: '[]'},
					config: {ctor: '_Tuple0'}
				}),
			ctor,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options_Internal$Many(summary.config.input),
				_1: options
			},
			{ctor: '[]'});
	});
var _debois$elm_mdl$Material_Options_Internal$input = function (_p4) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (style, config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{
						input: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options_Internal$Many(style),
							_1: config.input
						}
					});
			})(_p4));
};
var _debois$elm_mdl$Material_Options_Internal$container = function (_p5) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (style, config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{
						container: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options_Internal$Many(style),
							_1: config.container
						}
					});
			})(_p5));
};
var _debois$elm_mdl$Material_Options_Internal$Internal = function (a) {
	return {ctor: 'Internal', _0: a};
};
var _debois$elm_mdl$Material_Options_Internal$attribute = _debois$elm_mdl$Material_Options_Internal$Internal;
var _debois$elm_mdl$Material_Options_Internal$Attribute = function (a) {
	return {ctor: 'Attribute', _0: a};
};
var _debois$elm_mdl$Material_Options_Internal$CSS = function (a) {
	return {ctor: 'CSS', _0: a};
};
var _debois$elm_mdl$Material_Options_Internal$Class = function (a) {
	return {ctor: 'Class', _0: a};
};

var _debois$elm_mdl$Material_Options$dispatch = function (_p0) {
	return _debois$elm_mdl$Material_Options_Internal$Lift(
		_elm_lang$core$Json_Decode$map(_p0));
};
var _debois$elm_mdl$Material_Options$onWithOptions = F2(
	function (evt, options) {
		return A2(
			_debois$elm_mdl$Material_Options_Internal$Listener,
			evt,
			_elm_lang$core$Maybe$Just(options));
	});
var _debois$elm_mdl$Material_Options$on = function (event) {
	return A2(_debois$elm_mdl$Material_Options_Internal$Listener, event, _elm_lang$core$Maybe$Nothing);
};
var _debois$elm_mdl$Material_Options$on1 = F2(
	function (event, m) {
		return A2(
			_debois$elm_mdl$Material_Options$on,
			event,
			_elm_lang$core$Json_Decode$succeed(m));
	});
var _debois$elm_mdl$Material_Options$onToggle = _debois$elm_mdl$Material_Options$on1('change');
var _debois$elm_mdl$Material_Options$onClick = function (msg) {
	return A2(
		_debois$elm_mdl$Material_Options$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _debois$elm_mdl$Material_Options$onDoubleClick = function (msg) {
	return A2(
		_debois$elm_mdl$Material_Options$on,
		'dblclick',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _debois$elm_mdl$Material_Options$onMouseDown = function (msg) {
	return A2(
		_debois$elm_mdl$Material_Options$on,
		'mousedown',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _debois$elm_mdl$Material_Options$onMouseUp = function (msg) {
	return A2(
		_debois$elm_mdl$Material_Options$on,
		'mouseup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _debois$elm_mdl$Material_Options$onMouseEnter = function (msg) {
	return A2(
		_debois$elm_mdl$Material_Options$on,
		'mouseenter',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _debois$elm_mdl$Material_Options$onMouseLeave = function (msg) {
	return A2(
		_debois$elm_mdl$Material_Options$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _debois$elm_mdl$Material_Options$onMouseOver = function (msg) {
	return A2(
		_debois$elm_mdl$Material_Options$on,
		'mouseover',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _debois$elm_mdl$Material_Options$onMouseOut = function (msg) {
	return A2(
		_debois$elm_mdl$Material_Options$on,
		'mouseout',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _debois$elm_mdl$Material_Options$onCheck = function (_p1) {
	return A2(
		_debois$elm_mdl$Material_Options$on,
		'change',
		A3(_elm_lang$core$Basics$flip, _elm_lang$core$Json_Decode$map, _elm_lang$html$Html_Events$targetChecked, _p1));
};
var _debois$elm_mdl$Material_Options$onBlur = function (msg) {
	return A2(
		_debois$elm_mdl$Material_Options$on,
		'blur',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _debois$elm_mdl$Material_Options$onFocus = function (msg) {
	return A2(
		_debois$elm_mdl$Material_Options$on,
		'focus',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _debois$elm_mdl$Material_Options$onInput = function (f) {
	return A2(
		_debois$elm_mdl$Material_Options$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, f, _elm_lang$html$Html_Events$targetValue));
};
var _debois$elm_mdl$Material_Options$container = _debois$elm_mdl$Material_Options_Internal$container;
var _debois$elm_mdl$Material_Options$input = _debois$elm_mdl$Material_Options_Internal$input;
var _debois$elm_mdl$Material_Options$id = function (_p2) {
	return _debois$elm_mdl$Material_Options_Internal$Attribute(
		_elm_lang$html$Html_Attributes$id(_p2));
};
var _debois$elm_mdl$Material_Options$attr = _debois$elm_mdl$Material_Options_Internal$Attribute;
var _debois$elm_mdl$Material_Options$attribute = _debois$elm_mdl$Material_Options_Internal$Attribute;
var _debois$elm_mdl$Material_Options$stylesheet = function (css) {
	return A3(
		_elm_lang$html$Html$node,
		'style',
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(css),
			_1: {ctor: '[]'}
		});
};
var _debois$elm_mdl$Material_Options$data = F2(
	function (key, val) {
		return _debois$elm_mdl$Material_Options_Internal$Attribute(
			A2(
				_elm_lang$html$Html_Attributes$attribute,
				A2(_elm_lang$core$Basics_ops['++'], 'data-', key),
				val));
	});
var _debois$elm_mdl$Material_Options$nop = _debois$elm_mdl$Material_Options_Internal$None;
var _debois$elm_mdl$Material_Options$when = F2(
	function (guard, prop) {
		return guard ? prop : _debois$elm_mdl$Material_Options$nop;
	});
var _debois$elm_mdl$Material_Options$maybe = function (prop) {
	return A2(_elm_lang$core$Maybe$withDefault, _debois$elm_mdl$Material_Options$nop, prop);
};
var _debois$elm_mdl$Material_Options$many = _debois$elm_mdl$Material_Options_Internal$Many;
var _debois$elm_mdl$Material_Options$css = F2(
	function (key, value) {
		return _debois$elm_mdl$Material_Options_Internal$CSS(
			{ctor: '_Tuple2', _0: key, _1: value});
	});
var _debois$elm_mdl$Material_Options$center = _debois$elm_mdl$Material_Options$many(
	{
		ctor: '::',
		_0: A2(_debois$elm_mdl$Material_Options$css, 'display', 'flex'),
		_1: {
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Options$css, 'align-items', 'center'),
			_1: {
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Options$css, 'justify-content', 'center'),
				_1: {ctor: '[]'}
			}
		}
	});
var _debois$elm_mdl$Material_Options$scrim = function (opacity) {
	return A2(
		_debois$elm_mdl$Material_Options$css,
		'background',
		A2(
			_elm_lang$core$Basics_ops['++'],
			'linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(opacity),
				'))')));
};
var _debois$elm_mdl$Material_Options$cs = function (c) {
	return _debois$elm_mdl$Material_Options_Internal$Class(c);
};
var _debois$elm_mdl$Material_Options$disabled = function (v) {
	return _debois$elm_mdl$Material_Options_Internal$Attribute(
		_elm_lang$html$Html_Attributes$disabled(v));
};
var _debois$elm_mdl$Material_Options$styled_ = F3(
	function (ctor, props, attrs) {
		return ctor(
			A2(
				_debois$elm_mdl$Material_Options_Internal$addAttributes,
				_debois$elm_mdl$Material_Options_Internal$collect_(props),
				attrs));
	});
var _debois$elm_mdl$Material_Options$img = F2(
	function (options, attrs) {
		return A4(
			_debois$elm_mdl$Material_Options$styled_,
			_elm_lang$html$Html$img,
			options,
			attrs,
			{ctor: '[]'});
	});
var _debois$elm_mdl$Material_Options$styled = F2(
	function (ctor, props) {
		return ctor(
			A2(
				_debois$elm_mdl$Material_Options_Internal$addAttributes,
				_debois$elm_mdl$Material_Options_Internal$collect_(props),
				{ctor: '[]'}));
	});
var _debois$elm_mdl$Material_Options$div = _debois$elm_mdl$Material_Options$styled(_elm_lang$html$Html$div);
var _debois$elm_mdl$Material_Options$span = _debois$elm_mdl$Material_Options$styled(_elm_lang$html$Html$span);

var _debois$elm_mdl$Material_Ripple$styles = F2(
	function (m, frame) {
		var r = m.rect;
		var toPx = function (k) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(
					_elm_lang$core$Basics$round(k)),
				'px');
		};
		var offset = A2(
			_elm_lang$core$Basics_ops['++'],
			'translate(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				toPx(m.x),
				A2(
					_elm_lang$core$Basics_ops['++'],
					', ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						toPx(m.y),
						')'))));
		var rippleSize = toPx(
			(_elm_lang$core$Basics$sqrt((r.width * r.width) + (r.height * r.height)) * 2.0) + 2.0);
		var scale = _elm_lang$core$Native_Utils.eq(frame, 0) ? 'scale(0.0001, 0.0001)' : '';
		var transformString = A2(
			_elm_lang$core$Basics_ops['++'],
			'translate(-50%, -50%) ',
			A2(_elm_lang$core$Basics_ops['++'], offset, scale));
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'width', _1: rippleSize},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'height', _1: rippleSize},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: '-webkit-transform', _1: transformString},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: '-ms-transform', _1: transformString},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'transform', _1: transformString},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		};
	});
var _debois$elm_mdl$Material_Ripple$Metrics = F3(
	function (a, b, c) {
		return {rect: a, x: b, y: c};
	});
var _debois$elm_mdl$Material_Ripple$computeMetrics = function (g) {
	var rect = g.rect;
	var set = F2(
		function (x, y) {
			return _elm_lang$core$Maybe$Just(
				{ctor: '_Tuple2', _0: x - rect.left, _1: y - rect.top});
		});
	return A2(
		_elm_lang$core$Maybe$map,
		function (_p0) {
			var _p1 = _p0;
			return A3(_debois$elm_mdl$Material_Ripple$Metrics, rect, _p1._0, _p1._1);
		},
		function () {
			var _p2 = {ctor: '_Tuple4', _0: g.clientX, _1: g.clientY, _2: g.touchX, _3: g.touchY};
			_v1_3:
			do {
				if (_p2.ctor === '_Tuple4') {
					if ((_p2._0.ctor === 'Just') && (_p2._1.ctor === 'Just')) {
						if ((_p2._0._0 === 0.0) && (_p2._1._0 === 0.0)) {
							return _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: rect.width / 2.0, _1: rect.height / 2.0});
						} else {
							return A2(set, _p2._0._0, _p2._1._0);
						}
					} else {
						if ((_p2._2.ctor === 'Just') && (_p2._3.ctor === 'Just')) {
							return A2(set, _p2._2._0, _p2._3._0);
						} else {
							break _v1_3;
						}
					}
				} else {
					break _v1_3;
				}
			} while(false);
			return _elm_lang$core$Maybe$Nothing;
		}());
};
var _debois$elm_mdl$Material_Ripple$Model = F3(
	function (a, b, c) {
		return {animation: a, metrics: b, ignoringMouseDown: c};
	});
var _debois$elm_mdl$Material_Ripple$DOMState = F6(
	function (a, b, c, d, e, f) {
		return {rect: a, clientX: b, clientY: c, touchX: d, touchY: e, type_: f};
	});
var _debois$elm_mdl$Material_Ripple$geometryDecoder = A7(
	_elm_lang$core$Json_Decode$map6,
	_debois$elm_mdl$Material_Ripple$DOMState,
	A2(_elm_lang$core$Json_Decode$field, 'currentTarget', _debois$elm_dom$DOM$boundingClientRect),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode$field, 'clientX', _elm_lang$core$Json_Decode$float)),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode$field, 'clientY', _elm_lang$core$Json_Decode$float)),
	_elm_lang$core$Json_Decode$maybe(
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'touches',
				_1: {
					ctor: '::',
					_0: '0',
					_1: {
						ctor: '::',
						_0: 'clientX',
						_1: {ctor: '[]'}
					}
				}
			},
			_elm_lang$core$Json_Decode$float)),
	_elm_lang$core$Json_Decode$maybe(
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'touches',
				_1: {
					ctor: '::',
					_0: '0',
					_1: {
						ctor: '::',
						_0: 'clientY',
						_1: {ctor: '[]'}
					}
				}
			},
			_elm_lang$core$Json_Decode$float)),
	A2(_elm_lang$core$Json_Decode$field, 'type', _elm_lang$core$Json_Decode$string));
var _debois$elm_mdl$Material_Ripple$Inert = {ctor: 'Inert'};
var _debois$elm_mdl$Material_Ripple$model = {animation: _debois$elm_mdl$Material_Ripple$Inert, metrics: _elm_lang$core$Maybe$Nothing, ignoringMouseDown: false};
var _debois$elm_mdl$Material_Ripple$Frame = function (a) {
	return {ctor: 'Frame', _0: a};
};
var _debois$elm_mdl$Material_Ripple$view_ = F2(
	function (attrs, model) {
		var styling = function () {
			var _p3 = {ctor: '_Tuple2', _0: model.metrics, _1: model.animation};
			if ((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) {
				if (_p3._1.ctor === 'Frame') {
					return A2(_debois$elm_mdl$Material_Ripple$styles, _p3._0._0, _p3._1._0);
				} else {
					return A2(_debois$elm_mdl$Material_Ripple$styles, _p3._0._0, 1);
				}
			} else {
				return {ctor: '[]'};
			}
		}();
		return A2(
			_elm_lang$html$Html$span,
			attrs,
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'mdl-ripple', _1: true},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'is-animating',
										_1: !_elm_lang$core$Native_Utils.eq(
											model.animation,
											_debois$elm_mdl$Material_Ripple$Frame(0))
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'is-visible',
											_1: !_elm_lang$core$Native_Utils.eq(model.animation, _debois$elm_mdl$Material_Ripple$Inert)
										},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(styling),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			});
	});
var _debois$elm_mdl$Material_Ripple$Tick = {ctor: 'Tick'};
var _debois$elm_mdl$Material_Ripple$update = F2(
	function (action, model) {
		var _p4 = action;
		switch (_p4.ctor) {
			case 'Down':
				var _p5 = _p4._0;
				return (_elm_lang$core$Native_Utils.eq(_p5.type_, 'mousedown') && model.ignoringMouseDown) ? _debois$elm_mdl$Material_Helpers$pure(
					_elm_lang$core$Native_Utils.update(
						model,
						{ignoringMouseDown: false})) : A2(
					_debois$elm_mdl$Material_Helpers$effect,
					_debois$elm_mdl$Material_Helpers$cssTransitionStep(_debois$elm_mdl$Material_Ripple$Tick),
					_elm_lang$core$Native_Utils.update(
						model,
						{
							animation: _debois$elm_mdl$Material_Ripple$Frame(0),
							metrics: _debois$elm_mdl$Material_Ripple$computeMetrics(_p5),
							ignoringMouseDown: _elm_lang$core$Native_Utils.eq(_p5.type_, 'touchstart') ? true : model.ignoringMouseDown
						}));
			case 'Up':
				return _debois$elm_mdl$Material_Helpers$pure(
					_elm_lang$core$Native_Utils.update(
						model,
						{animation: _debois$elm_mdl$Material_Ripple$Inert}));
			default:
				return _elm_lang$core$Native_Utils.eq(
					model.animation,
					_debois$elm_mdl$Material_Ripple$Frame(0)) ? _debois$elm_mdl$Material_Helpers$pure(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							animation: _debois$elm_mdl$Material_Ripple$Frame(1)
						})) : _debois$elm_mdl$Material_Helpers$pure(model);
		}
	});
var _debois$elm_mdl$Material_Ripple$Up = {ctor: 'Up'};
var _debois$elm_mdl$Material_Ripple$up = F2(
	function (f, name) {
		return A2(
			_debois$elm_mdl$Material_Options$on,
			name,
			_elm_lang$core$Json_Decode$succeed(
				f(_debois$elm_mdl$Material_Ripple$Up)));
	});
var _debois$elm_mdl$Material_Ripple$upOn_ = F2(
	function (f, name) {
		return A2(
			_elm_lang$html$Html_Events$on,
			name,
			_elm_lang$core$Json_Decode$succeed(
				f(_debois$elm_mdl$Material_Ripple$Up)));
	});
var _debois$elm_mdl$Material_Ripple$upOn = _debois$elm_mdl$Material_Ripple$upOn_(_elm_lang$core$Basics$identity);
var _debois$elm_mdl$Material_Ripple$Down = function (a) {
	return {ctor: 'Down', _0: a};
};
var _debois$elm_mdl$Material_Ripple$downOn_ = F2(
	function (f, name) {
		return A2(
			_elm_lang$html$Html_Events$on,
			name,
			A2(
				_elm_lang$core$Json_Decode$map,
				function (_p6) {
					return f(
						_debois$elm_mdl$Material_Ripple$Down(_p6));
				},
				_debois$elm_mdl$Material_Ripple$geometryDecoder));
	});
var _debois$elm_mdl$Material_Ripple$downOn = _debois$elm_mdl$Material_Ripple$downOn_(_elm_lang$core$Basics$identity);
var _debois$elm_mdl$Material_Ripple$view = function (_p7) {
	return _debois$elm_mdl$Material_Ripple$view_(
		A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$List$append,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Ripple$upOn('mouseup'),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Ripple$upOn('mouseleave'),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Ripple$upOn('touchend'),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Ripple$upOn('blur'),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Ripple$downOn('mousedown'),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Ripple$downOn('touchstart'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			},
			_p7));
};
var _debois$elm_mdl$Material_Ripple$down = F2(
	function (f, name) {
		return A2(
			_debois$elm_mdl$Material_Options$on,
			name,
			A2(
				_elm_lang$core$Json_Decode$map,
				function (_p8) {
					return f(
						_debois$elm_mdl$Material_Ripple$Down(_p8));
				},
				_debois$elm_mdl$Material_Ripple$geometryDecoder));
	});

var _debois$elm_mdl$Material_Button$_p0 = A3(
	_debois$elm_mdl$Material_Component$indexed,
	function (_) {
		return _.button;
	},
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.update(
				y,
				{button: x});
		}),
	_debois$elm_mdl$Material_Ripple$model);
var _debois$elm_mdl$Material_Button$get = _debois$elm_mdl$Material_Button$_p0._0;
var _debois$elm_mdl$Material_Button$set = _debois$elm_mdl$Material_Button$_p0._1;
var _debois$elm_mdl$Material_Button$icon = _debois$elm_mdl$Material_Options$cs('mdl-button--icon');
var _debois$elm_mdl$Material_Button$minifab = _debois$elm_mdl$Material_Options$cs('mdl-button--mini-fab');
var _debois$elm_mdl$Material_Button$fab = _debois$elm_mdl$Material_Options$cs('mdl-button--fab');
var _debois$elm_mdl$Material_Button$raised = _debois$elm_mdl$Material_Options$cs('mdl-button--raised');
var _debois$elm_mdl$Material_Button$flat = _debois$elm_mdl$Material_Options$nop;
var _debois$elm_mdl$Material_Button$blurAndForward = function (event) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		A2(_elm_lang$core$Basics_ops['++'], 'on', event),
		'this.blur(); (function(self) { var e = document.createEvent(\'Event\'); e.initEvent(\'touchcancel\', true, true); self.lastChild.dispatchEvent(e); }(this));');
};
var _debois$elm_mdl$Material_Button$type_ = function (_p1) {
	return _debois$elm_mdl$Material_Options_Internal$attribute(
		_elm_lang$html$Html_Attributes$type_(_p1));
};
var _debois$elm_mdl$Material_Button$accent = _debois$elm_mdl$Material_Options$cs('mdl-button--accent');
var _debois$elm_mdl$Material_Button$primary = _debois$elm_mdl$Material_Options$cs('mdl-button--primary');
var _debois$elm_mdl$Material_Button$colored = _debois$elm_mdl$Material_Options$cs('mdl-button--colored');
var _debois$elm_mdl$Material_Button$plain = _debois$elm_mdl$Material_Options$nop;
var _debois$elm_mdl$Material_Button$disabled = _debois$elm_mdl$Material_Options_Internal$attribute(
	_elm_lang$html$Html_Attributes$disabled(true));
var _debois$elm_mdl$Material_Button$ripple = _debois$elm_mdl$Material_Options_Internal$option(
	function (options) {
		return _elm_lang$core$Native_Utils.update(
			options,
			{ripple: true});
	});
var _debois$elm_mdl$Material_Button$link = function (href) {
	return _debois$elm_mdl$Material_Options$many(
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Options_Internal$option(
				function (options) {
					return _elm_lang$core$Native_Utils.update(
						options,
						{link: true});
				}),
			_1: {
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options_Internal$attribute(
					_elm_lang$html$Html_Attributes$href(href)),
				_1: {ctor: '[]'}
			}
		});
};
var _debois$elm_mdl$Material_Button$defaultConfig = {ripple: false, link: false};
var _debois$elm_mdl$Material_Button$view = F4(
	function (lift, model, config, html) {
		var listeners = _debois$elm_mdl$Material_Options$many(
			{
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Ripple$down, lift, 'mousedown'),
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Ripple$down, lift, 'touchstart'),
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Ripple$up, lift, 'touchcancel'),
						_1: {
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Ripple$up, lift, 'mouseup'),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Ripple$up, lift, 'blur'),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Ripple$up, lift, 'mouseleave'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
		var summary = A2(_debois$elm_mdl$Material_Options_Internal$collect, _debois$elm_mdl$Material_Button$defaultConfig, config);
		return A5(
			_debois$elm_mdl$Material_Options_Internal$apply,
			summary,
			summary.config.link ? _elm_lang$html$Html$a : _elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$cs('mdl-button'),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Options$cs('mdl-js-button'),
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Options$when,
							summary.config.ripple,
							_debois$elm_mdl$Material_Options$cs('mdl-js-ripple-effect')),
						_1: {
							ctor: '::',
							_0: listeners,
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Helpers$blurOn('mouseup'),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Helpers$blurOn('mouseleave'),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Helpers$blurOn('touchend'),
						_1: {ctor: '[]'}
					}
				}
			},
			summary.config.ripple ? _elm_lang$core$List$concat(
				{
					ctor: '::',
					_0: html,
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$map,
								lift,
								A2(
									_debois$elm_mdl$Material_Ripple$view_,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('mdl-button__ripple-container'),
										_1: {ctor: '[]'}
									},
									model)),
							_1: {ctor: '[]'}
						},
						_1: {ctor: '[]'}
					}
				}) : html);
	});
var _debois$elm_mdl$Material_Button$render = A3(_debois$elm_mdl$Material_Component$render, _debois$elm_mdl$Material_Button$get, _debois$elm_mdl$Material_Button$view, _debois$elm_mdl$Material_Component$ButtonMsg);
var _debois$elm_mdl$Material_Button$update = function (action) {
	return _debois$elm_mdl$Material_Ripple$update(action);
};
var _debois$elm_mdl$Material_Button$react = A4(
	_debois$elm_mdl$Material_Component$react,
	_debois$elm_mdl$Material_Button$get,
	_debois$elm_mdl$Material_Button$set,
	_debois$elm_mdl$Material_Component$ButtonMsg,
	_debois$elm_mdl$Material_Component$generalise(_debois$elm_mdl$Material_Button$update));
var _debois$elm_mdl$Material_Button$defaultModel = _debois$elm_mdl$Material_Ripple$model;
var _debois$elm_mdl$Material_Button$Config = F2(
	function (a, b) {
		return {ripple: a, link: b};
	});

var _debois$elm_mdl$Material_Icon$view = F2(
	function (name, options) {
		return A3(
			_debois$elm_mdl$Material_Options$styled,
			_elm_lang$html$Html$i,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$cs('material-icons'),
				_1: options
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(name),
				_1: {ctor: '[]'}
			});
	});
var _debois$elm_mdl$Material_Icon$i = function (name) {
	return A2(
		_debois$elm_mdl$Material_Icon$view,
		name,
		{ctor: '[]'});
};
var _debois$elm_mdl$Material_Icon$size48 = A2(_debois$elm_mdl$Material_Options$css, 'font-size', '48px');
var _debois$elm_mdl$Material_Icon$size36 = A2(_debois$elm_mdl$Material_Options$css, 'font-size', '36px');
var _debois$elm_mdl$Material_Icon$size24 = A2(_debois$elm_mdl$Material_Options$css, 'font-size', '24px');
var _debois$elm_mdl$Material_Icon$size18 = A2(_debois$elm_mdl$Material_Options$css, 'font-size', '18px');
var _debois$elm_mdl$Material_Icon$defaultConfig = {};
var _debois$elm_mdl$Material_Icon$Config = {};

var _debois$elm_mdl$Material_Textfield$update = F3(
	function (_p0, action, model) {
		return A3(
			_elm_lang$core$Basics$flip,
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Platform_Cmd_ops['!'], x, y);
				}),
			{ctor: '[]'},
			function () {
				var _p1 = action;
				switch (_p1.ctor) {
					case 'Input':
						var dirty = !_elm_lang$core$Native_Utils.eq(_p1._0, '');
						return _elm_lang$core$Native_Utils.eq(dirty, model.isDirty) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
							_elm_lang$core$Native_Utils.update(
								model,
								{isDirty: dirty}));
					case 'Blur':
						return _elm_lang$core$Maybe$Just(
							_elm_lang$core$Native_Utils.update(
								model,
								{isFocused: false}));
					default:
						return _elm_lang$core$Maybe$Just(
							_elm_lang$core$Native_Utils.update(
								model,
								{isFocused: true}));
				}
			}());
	});
var _debois$elm_mdl$Material_Textfield$defaultModel = {isFocused: false, isDirty: false};
var _debois$elm_mdl$Material_Textfield$_p2 = A3(
	_debois$elm_mdl$Material_Component$indexed,
	function (_) {
		return _.textfield;
	},
	F2(
		function (x, c) {
			return _elm_lang$core$Native_Utils.update(
				c,
				{textfield: x});
		}),
	_debois$elm_mdl$Material_Textfield$defaultModel);
var _debois$elm_mdl$Material_Textfield$get = _debois$elm_mdl$Material_Textfield$_p2._0;
var _debois$elm_mdl$Material_Textfield$set = _debois$elm_mdl$Material_Textfield$_p2._1;
var _debois$elm_mdl$Material_Textfield$react = A4(_debois$elm_mdl$Material_Component$react, _debois$elm_mdl$Material_Textfield$get, _debois$elm_mdl$Material_Textfield$set, _debois$elm_mdl$Material_Component$TextfieldMsg, _debois$elm_mdl$Material_Textfield$update);
var _debois$elm_mdl$Material_Textfield$cols = function (k) {
	return _debois$elm_mdl$Material_Options_Internal$input(
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Options$attribute(
				_elm_lang$html$Html_Attributes$cols(k)),
			_1: {ctor: '[]'}
		});
};
var _debois$elm_mdl$Material_Textfield$rows = function (k) {
	return _debois$elm_mdl$Material_Options_Internal$input(
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Options$attribute(
				_elm_lang$html$Html_Attributes$rows(k)),
			_1: {ctor: '[]'}
		});
};
var _debois$elm_mdl$Material_Textfield$input = _debois$elm_mdl$Material_Options$input;
var _debois$elm_mdl$Material_Textfield$disabled = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{disabled: true});
	});
var _debois$elm_mdl$Material_Textfield$maxlength = function (k) {
	return _debois$elm_mdl$Material_Options$attribute(
		_elm_lang$html$Html_Attributes$maxlength(k));
};
var _debois$elm_mdl$Material_Textfield$autofocus = _debois$elm_mdl$Material_Options$attribute(
	_elm_lang$html$Html_Attributes$autofocus(true));
var _debois$elm_mdl$Material_Textfield$value = function (_p3) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (str, config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{
						value: _elm_lang$core$Maybe$Just(str)
					});
			})(_p3));
};
var _debois$elm_mdl$Material_Textfield$error = function (_p4) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (str, config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{
						error: _elm_lang$core$Maybe$Just(str)
					});
			})(_p4));
};
var _debois$elm_mdl$Material_Textfield$expandableIcon = function (id) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		function (config) {
			return _elm_lang$core$Native_Utils.update(
				config,
				{expandableIcon: id});
		});
};
var _debois$elm_mdl$Material_Textfield$expandable = function (id) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		function (config) {
			return _elm_lang$core$Native_Utils.update(
				config,
				{
					expandable: _elm_lang$core$Maybe$Just(id)
				});
		});
};
var _debois$elm_mdl$Material_Textfield$floatingLabel = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{labelFloat: true});
	});
var _debois$elm_mdl$Material_Textfield$label = function (_p5) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (str, config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{
						labelText: _elm_lang$core$Maybe$Just(str)
					});
			})(_p5));
};
var _debois$elm_mdl$Material_Textfield$Config = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {labelText: a, labelFloat: b, error: c, value: d, disabled: e, kind: f, expandable: g, expandableIcon: h, input: i, container: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _debois$elm_mdl$Material_Textfield$Model = F2(
	function (a, b) {
		return {isFocused: a, isDirty: b};
	});
var _debois$elm_mdl$Material_Textfield$Email = {ctor: 'Email'};
var _debois$elm_mdl$Material_Textfield$email = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{kind: _debois$elm_mdl$Material_Textfield$Email});
	});
var _debois$elm_mdl$Material_Textfield$Password = {ctor: 'Password'};
var _debois$elm_mdl$Material_Textfield$password = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{kind: _debois$elm_mdl$Material_Textfield$Password});
	});
var _debois$elm_mdl$Material_Textfield$Textarea = {ctor: 'Textarea'};
var _debois$elm_mdl$Material_Textfield$textarea = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{kind: _debois$elm_mdl$Material_Textfield$Textarea});
	});
var _debois$elm_mdl$Material_Textfield$Text = {ctor: 'Text'};
var _debois$elm_mdl$Material_Textfield$defaultConfig = {
	labelText: _elm_lang$core$Maybe$Nothing,
	labelFloat: false,
	error: _elm_lang$core$Maybe$Nothing,
	value: _elm_lang$core$Maybe$Nothing,
	disabled: false,
	kind: _debois$elm_mdl$Material_Textfield$Text,
	expandable: _elm_lang$core$Maybe$Nothing,
	expandableIcon: 'search',
	input: {ctor: '[]'},
	container: {ctor: '[]'}
};
var _debois$elm_mdl$Material_Textfield$text_ = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{kind: _debois$elm_mdl$Material_Textfield$Text});
	});
var _debois$elm_mdl$Material_Textfield$Input = function (a) {
	return {ctor: 'Input', _0: a};
};
var _debois$elm_mdl$Material_Textfield$Focus = {ctor: 'Focus'};
var _debois$elm_mdl$Material_Textfield$Blur = {ctor: 'Blur'};
var _debois$elm_mdl$Material_Textfield$view = F4(
	function (lift, model, options, _p6) {
		var _p7 = A2(_debois$elm_mdl$Material_Options_Internal$collect, _debois$elm_mdl$Material_Textfield$defaultConfig, options);
		var summary = _p7;
		var config = _p7.config;
		var labelFor = function () {
			var _p8 = config.expandable;
			if (_p8.ctor === 'Nothing') {
				return {ctor: '[]'};
			} else {
				return {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for(_p8._0),
					_1: {ctor: '[]'}
				};
			}
		}();
		var expandableId = function () {
			var _p9 = config.expandable;
			if (_p9.ctor === 'Nothing') {
				return _debois$elm_mdl$Material_Options$nop;
			} else {
				return _debois$elm_mdl$Material_Options_Internal$attribute(
					_elm_lang$html$Html_Attributes$id(_p9._0));
			}
		}();
		var expHolder = function () {
			var _p10 = config.expandable;
			if (_p10.ctor === 'Nothing') {
				return _elm_lang$core$Basics$identity;
			} else {
				return function (x) {
					return {
						ctor: '::',
						_0: A4(
							_debois$elm_mdl$Material_Options$styled_,
							_elm_lang$html$Html$label,
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$cs('mdl-button'),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$cs('mdl-js-button'),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$cs('mdl-button--icon'),
										_1: {ctor: '[]'}
									}
								}
							},
							labelFor,
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Icon$i(config.expandableIcon),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A3(
								_debois$elm_mdl$Material_Options$styled,
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$cs('mdl-textfield__expandable-holder'),
									_1: {ctor: '[]'}
								},
								x),
							_1: {ctor: '[]'}
						}
					};
				};
			}
		}();
		return A4(
			_debois$elm_mdl$Material_Options_Internal$applyContainer,
			summary,
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$cs('mdl-textfield'),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Options$cs('mdl-js-textfield'),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$cs('is-upgraded'),
						_1: {
							ctor: '::',
							_0: A3(_debois$elm_mdl$Material_Options_Internal$on1, 'focus', lift, _debois$elm_mdl$Material_Textfield$Focus),
							_1: {
								ctor: '::',
								_0: A3(_debois$elm_mdl$Material_Options_Internal$on1, 'blur', lift, _debois$elm_mdl$Material_Textfield$Blur),
								_1: {
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Options$when,
										config.labelFloat,
										_debois$elm_mdl$Material_Options$cs('mdl-textfield--floating-label')),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Options$when,
											!_elm_lang$core$Native_Utils.eq(config.error, _elm_lang$core$Maybe$Nothing),
											_debois$elm_mdl$Material_Options$cs('is-invalid')),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Options$when,
												function () {
													var _p11 = config.value;
													if (_p11.ctor === 'Just') {
														if (_p11._0 === '') {
															return false;
														} else {
															return true;
														}
													} else {
														return model.isDirty;
													}
												}(),
												_debois$elm_mdl$Material_Options$cs('is-dirty')),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Options$when,
													model.isFocused && (!config.disabled),
													_debois$elm_mdl$Material_Options$cs('is-focused')),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Options$when,
														config.disabled,
														_debois$elm_mdl$Material_Options$cs('is-disabled')),
													_1: {
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_Options$when,
															!_elm_lang$core$Native_Utils.eq(config.expandable, _elm_lang$core$Maybe$Nothing),
															_debois$elm_mdl$Material_Options$cs('mdl-textfield--expandable')),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			expHolder(
				{
					ctor: '::',
					_0: A4(
						_debois$elm_mdl$Material_Options_Internal$applyInput,
						summary,
						_elm_lang$core$Native_Utils.eq(config.kind, _debois$elm_mdl$Material_Textfield$Textarea) ? _elm_lang$html$Html$textarea : _elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$cs('mdl-textfield__input'),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'outline', 'none'),
								_1: {
									ctor: '::',
									_0: A3(_debois$elm_mdl$Material_Options_Internal$on1, 'focus', lift, _debois$elm_mdl$Material_Textfield$Focus),
									_1: {
										ctor: '::',
										_0: A3(_debois$elm_mdl$Material_Options_Internal$on1, 'blur', lift, _debois$elm_mdl$Material_Textfield$Blur),
										_1: {
											ctor: '::',
											_0: function () {
												var _p12 = config.kind;
												switch (_p12.ctor) {
													case 'Text':
														return _debois$elm_mdl$Material_Options_Internal$attribute(
															_elm_lang$html$Html_Attributes$type_('text'));
													case 'Password':
														return _debois$elm_mdl$Material_Options_Internal$attribute(
															_elm_lang$html$Html_Attributes$type_('password'));
													case 'Email':
														return _debois$elm_mdl$Material_Options_Internal$attribute(
															_elm_lang$html$Html_Attributes$type_('email'));
													default:
														return _debois$elm_mdl$Material_Options$nop;
												}
											}(),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Options$when,
													config.disabled,
													_debois$elm_mdl$Material_Options_Internal$attribute(
														_elm_lang$html$Html_Attributes$disabled(true))),
												_1: {
													ctor: '::',
													_0: expandableId,
													_1: {
														ctor: '::',
														_0: function () {
															var _p13 = config.value;
															if (_p13.ctor === 'Nothing') {
																return A2(
																	_debois$elm_mdl$Material_Options$on,
																	'input',
																	A2(
																		_elm_lang$core$Json_Decode$map,
																		function (_p14) {
																			return lift(
																				_debois$elm_mdl$Material_Textfield$Input(_p14));
																		},
																		_elm_lang$html$Html_Events$targetValue));
															} else {
																return _debois$elm_mdl$Material_Options_Internal$attribute(
																	_elm_lang$html$Html_Attributes$value(_p13._0));
															}
														}(),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$label,
							A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('mdl-textfield__label'),
									_1: {ctor: '[]'}
								},
								labelFor),
							function () {
								var _p15 = config.labelText;
								if (_p15.ctor === 'Just') {
									return {
										ctor: '::',
										_0: _elm_lang$html$Html$text(_p15._0),
										_1: {ctor: '[]'}
									};
								} else {
									return {ctor: '[]'};
								}
							}()),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Maybe$withDefault,
								A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{ctor: '[]'}),
								A2(
									_elm_lang$core$Maybe$map,
									function (e) {
										return A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('mdl-textfield__error'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(e),
												_1: {ctor: '[]'}
											});
									},
									config.error)),
							_1: {ctor: '[]'}
						}
					}
				}));
	});
var _debois$elm_mdl$Material_Textfield$render = A3(_debois$elm_mdl$Material_Component$render, _debois$elm_mdl$Material_Textfield$get, _debois$elm_mdl$Material_Textfield$view, _debois$elm_mdl$Material_Component$TextfieldMsg);

var _elm_lang$dom$Native_Dom = function() {

var fakeNode = {
	addEventListener: function() {},
	removeEventListener: function() {}
};

var onDocument = on(typeof document !== 'undefined' ? document : fakeNode);
var onWindow = on(typeof window !== 'undefined' ? window : fakeNode);

function on(node)
{
	return function(eventName, decoder, toTask)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

			function performTask(event)
			{
				var result = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, event);
				if (result.ctor === 'Ok')
				{
					_elm_lang$core$Native_Scheduler.rawSpawn(toTask(result._0));
				}
			}

			node.addEventListener(eventName, performTask);

			return function()
			{
				node.removeEventListener(eventName, performTask);
			};
		});
	};
}

var rAF = typeof requestAnimationFrame !== 'undefined'
	? requestAnimationFrame
	: function(callback) { callback(); };

function withNode(id, doStuff)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		rAF(function()
		{
			var node = document.getElementById(id);
			if (node === null)
			{
				callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NotFound', _0: id }));
				return;
			}
			callback(_elm_lang$core$Native_Scheduler.succeed(doStuff(node)));
		});
	});
}


// FOCUS

function focus(id)
{
	return withNode(id, function(node) {
		node.focus();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function blur(id)
{
	return withNode(id, function(node) {
		node.blur();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SCROLLING

function getScrollTop(id)
{
	return withNode(id, function(node) {
		return node.scrollTop;
	});
}

function setScrollTop(id, desiredScrollTop)
{
	return withNode(id, function(node) {
		node.scrollTop = desiredScrollTop;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toBottom(id)
{
	return withNode(id, function(node) {
		node.scrollTop = node.scrollHeight;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function getScrollLeft(id)
{
	return withNode(id, function(node) {
		return node.scrollLeft;
	});
}

function setScrollLeft(id, desiredScrollLeft)
{
	return withNode(id, function(node) {
		node.scrollLeft = desiredScrollLeft;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toRight(id)
{
	return withNode(id, function(node) {
		node.scrollLeft = node.scrollWidth;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SIZE

function width(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollWidth;
			case 'VisibleContent':
				return node.clientWidth;
			case 'VisibleContentWithBorders':
				return node.offsetWidth;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.right - rect.left;
		}
	});
}

function height(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollHeight;
			case 'VisibleContent':
				return node.clientHeight;
			case 'VisibleContentWithBorders':
				return node.offsetHeight;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.bottom - rect.top;
		}
	});
}

return {
	onDocument: F3(onDocument),
	onWindow: F3(onWindow),

	focus: focus,
	blur: blur,

	getScrollTop: getScrollTop,
	setScrollTop: F2(setScrollTop),
	getScrollLeft: getScrollLeft,
	setScrollLeft: F2(setScrollLeft),
	toBottom: toBottom,
	toRight: toRight,

	height: F2(height),
	width: F2(width)
};

}();

var _elm_lang$dom$Dom_LowLevel$onWindow = _elm_lang$dom$Native_Dom.onWindow;
var _elm_lang$dom$Dom_LowLevel$onDocument = _elm_lang$dom$Native_Dom.onDocument;

var _elm_lang$mouse$Mouse_ops = _elm_lang$mouse$Mouse_ops || {};
_elm_lang$mouse$Mouse_ops['&>'] = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return t2;
			},
			t1);
	});
var _elm_lang$mouse$Mouse$onSelfMsg = F3(
	function (router, _p1, state) {
		var _p2 = _p1;
		var _p3 = A2(_elm_lang$core$Dict$get, _p2.category, state);
		if (_p3.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (tagger) {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					tagger(_p2.position));
			};
			return A2(
				_elm_lang$mouse$Mouse_ops['&>'],
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p3._0.taggers)),
				_elm_lang$core$Task$succeed(state));
		}
	});
var _elm_lang$mouse$Mouse$init = _elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty);
var _elm_lang$mouse$Mouse$categorizeHelpHelp = F2(
	function (value, maybeValues) {
		var _p4 = maybeValues;
		if (_p4.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: value,
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$core$Maybe$Just(
				{ctor: '::', _0: value, _1: _p4._0});
		}
	});
var _elm_lang$mouse$Mouse$categorizeHelp = F2(
	function (subs, subDict) {
		categorizeHelp:
		while (true) {
			var _p5 = subs;
			if (_p5.ctor === '[]') {
				return subDict;
			} else {
				var _v4 = _p5._1,
					_v5 = A3(
					_elm_lang$core$Dict$update,
					_p5._0._0,
					_elm_lang$mouse$Mouse$categorizeHelpHelp(_p5._0._1),
					subDict);
				subs = _v4;
				subDict = _v5;
				continue categorizeHelp;
			}
		}
	});
var _elm_lang$mouse$Mouse$categorize = function (subs) {
	return A2(_elm_lang$mouse$Mouse$categorizeHelp, subs, _elm_lang$core$Dict$empty);
};
var _elm_lang$mouse$Mouse$subscription = _elm_lang$core$Native_Platform.leaf('Mouse');
var _elm_lang$mouse$Mouse$Position = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _elm_lang$mouse$Mouse$position = A3(
	_elm_lang$core$Json_Decode$map2,
	_elm_lang$mouse$Mouse$Position,
	A2(_elm_lang$core$Json_Decode$field, 'pageX', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'pageY', _elm_lang$core$Json_Decode$int));
var _elm_lang$mouse$Mouse$Watcher = F2(
	function (a, b) {
		return {taggers: a, pid: b};
	});
var _elm_lang$mouse$Mouse$Msg = F2(
	function (a, b) {
		return {category: a, position: b};
	});
var _elm_lang$mouse$Mouse$onEffects = F3(
	function (router, newSubs, oldState) {
		var rightStep = F3(
			function (category, taggers, task) {
				var tracker = A3(
					_elm_lang$dom$Dom_LowLevel$onDocument,
					category,
					_elm_lang$mouse$Mouse$position,
					function (_p6) {
						return A2(
							_elm_lang$core$Platform$sendToSelf,
							router,
							A2(_elm_lang$mouse$Mouse$Msg, category, _p6));
					});
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (pid) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$core$Dict$insert,
										category,
										A2(_elm_lang$mouse$Mouse$Watcher, taggers, pid),
										state));
							},
							_elm_lang$core$Process$spawn(tracker));
					},
					task);
			});
		var bothStep = F4(
			function (category, _p7, taggers, task) {
				var _p8 = _p7;
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return _elm_lang$core$Task$succeed(
							A3(
								_elm_lang$core$Dict$insert,
								category,
								A2(_elm_lang$mouse$Mouse$Watcher, taggers, _p8.pid),
								state));
					},
					task);
			});
		var leftStep = F3(
			function (category, _p9, task) {
				var _p10 = _p9;
				return A2(
					_elm_lang$mouse$Mouse_ops['&>'],
					_elm_lang$core$Process$kill(_p10.pid),
					task);
			});
		return A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			oldState,
			_elm_lang$mouse$Mouse$categorize(newSubs),
			_elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty));
	});
var _elm_lang$mouse$Mouse$MySub = F2(
	function (a, b) {
		return {ctor: 'MySub', _0: a, _1: b};
	});
var _elm_lang$mouse$Mouse$clicks = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'click', tagger));
};
var _elm_lang$mouse$Mouse$moves = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mousemove', tagger));
};
var _elm_lang$mouse$Mouse$downs = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mousedown', tagger));
};
var _elm_lang$mouse$Mouse$ups = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mouseup', tagger));
};
var _elm_lang$mouse$Mouse$subMap = F2(
	function (func, _p11) {
		var _p12 = _p11;
		return A2(
			_elm_lang$mouse$Mouse$MySub,
			_p12._0,
			function (_p13) {
				return func(
					_p12._1(_p13));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Mouse'] = {pkg: 'elm-lang/mouse', init: _elm_lang$mouse$Mouse$init, onEffects: _elm_lang$mouse$Mouse$onEffects, onSelfMsg: _elm_lang$mouse$Mouse$onSelfMsg, tag: 'sub', subMap: _elm_lang$mouse$Mouse$subMap};

var _debois$elm_mdl$Material_Menu_Geometry$Geometry = F5(
	function (a, b, c, d, e) {
		return {button: a, menu: b, container: c, offsetTops: d, offsetHeights: e};
	});
var _debois$elm_mdl$Material_Menu_Geometry$Element = F4(
	function (a, b, c, d) {
		return {offsetTop: a, offsetLeft: b, offsetHeight: c, bounds: d};
	});
var _debois$elm_mdl$Material_Menu_Geometry$element = A5(_elm_lang$core$Json_Decode$map4, _debois$elm_mdl$Material_Menu_Geometry$Element, _debois$elm_dom$DOM$offsetTop, _debois$elm_dom$DOM$offsetLeft, _debois$elm_dom$DOM$offsetHeight, _debois$elm_dom$DOM$boundingClientRect);
var _debois$elm_mdl$Material_Menu_Geometry$decode = A6(
	_elm_lang$core$Json_Decode$map5,
	_debois$elm_mdl$Material_Menu_Geometry$Geometry,
	_debois$elm_dom$DOM$target(_debois$elm_mdl$Material_Menu_Geometry$element),
	_debois$elm_dom$DOM$target(
		_debois$elm_dom$DOM$nextSibling(
			A2(_debois$elm_dom$DOM$childNode, 1, _debois$elm_mdl$Material_Menu_Geometry$element))),
	_debois$elm_dom$DOM$target(
		_debois$elm_dom$DOM$nextSibling(_debois$elm_mdl$Material_Menu_Geometry$element)),
	_debois$elm_dom$DOM$target(
		_debois$elm_dom$DOM$nextSibling(
			A2(
				_debois$elm_dom$DOM$childNode,
				1,
				_debois$elm_dom$DOM$childNodes(_debois$elm_dom$DOM$offsetTop)))),
	_debois$elm_dom$DOM$target(
		_debois$elm_dom$DOM$nextSibling(
			A2(
				_debois$elm_dom$DOM$childNode,
				1,
				_debois$elm_dom$DOM$childNodes(_debois$elm_dom$DOM$offsetHeight)))));

var _debois$elm_mdl$Material_Menu$toPx = function (_p0) {
	return A3(
		_elm_lang$core$Basics$flip,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		'px',
		_elm_lang$core$Basics$toString(_p0));
};
var _debois$elm_mdl$Material_Menu$rect = F4(
	function (x, y, w, h) {
		return function (coords) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'rect(',
				A2(_elm_lang$core$Basics_ops['++'], coords, ')'));
		}(
			A2(
				_elm_lang$core$String$join,
				' ',
				A2(
					_elm_lang$core$List$map,
					_debois$elm_mdl$Material_Menu$toPx,
					{
						ctor: '::',
						_0: x,
						_1: {
							ctor: '::',
							_0: y,
							_1: {
								ctor: '::',
								_0: w,
								_1: {
									ctor: '::',
									_0: h,
									_1: {ctor: '[]'}
								}
							}
						}
					})));
	});
var _debois$elm_mdl$Material_Menu$onKeyDown = function (action) {
	return A3(
		_debois$elm_mdl$Material_Options$onWithOptions,
		'keydown',
		{preventDefault: true, stopPropagation: false},
		A2(_elm_lang$core$Json_Decode$map, action, _elm_lang$html$Html_Events$keyCode));
};
var _debois$elm_mdl$Material_Menu$onClick = F2(
	function (decoder, action) {
		return A2(
			_elm_lang$html$Html_Events$on,
			'click',
			A2(_elm_lang$core$Json_Decode$map, action, decoder));
	});
var _debois$elm_mdl$Material_Menu$withGeometry = F2(
	function (model, f) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_debois$elm_mdl$Material_Options$nop,
			A2(_elm_lang$core$Maybe$map, f, model.geometry));
	});
var _debois$elm_mdl$Material_Menu$icon = function (_p1) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (name, config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{icon: name});
			})(_p1));
};
var _debois$elm_mdl$Material_Menu$ripple = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{ripple: true});
	});
var _debois$elm_mdl$Material_Menu$onSelect = function (_p2) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (msg, config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{
						onSelect: _elm_lang$core$Maybe$Just(msg)
					});
			})(_p2));
};
var _debois$elm_mdl$Material_Menu$disabled = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{enabled: false});
	});
var _debois$elm_mdl$Material_Menu$divider = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{divider: true});
	});
var _debois$elm_mdl$Material_Menu$defaultItemConfig = {enabled: true, divider: false, onSelect: _elm_lang$core$Maybe$Nothing};
var _debois$elm_mdl$Material_Menu$constant = {transitionDurationSeconds: 0.3, transitionDurationFraction: 0.8, closeTimeout: 150};
var _debois$elm_mdl$Material_Menu$transitionDuration = _debois$elm_mdl$Material_Menu$constant.transitionDurationSeconds * _debois$elm_mdl$Material_Menu$constant.transitionDurationFraction;
var _debois$elm_mdl$Material_Menu$Model = F4(
	function (a, b, c, d) {
		return {ripples: a, animationState: b, geometry: c, index: d};
	});
var _debois$elm_mdl$Material_Menu$Item = F2(
	function (a, b) {
		return {options: a, html: b};
	});
var _debois$elm_mdl$Material_Menu$item = _debois$elm_mdl$Material_Menu$Item;
var _debois$elm_mdl$Material_Menu$ItemConfig = F3(
	function (a, b, c) {
		return {enabled: a, divider: b, onSelect: c};
	});
var _debois$elm_mdl$Material_Menu$Config = F3(
	function (a, b, c) {
		return {alignment: a, ripple: b, icon: c};
	});
var _debois$elm_mdl$Material_Menu$Closing = {ctor: 'Closing'};
var _debois$elm_mdl$Material_Menu$Opened = {ctor: 'Opened'};
var _debois$elm_mdl$Material_Menu$clip = F3(
	function (model, config, geometry) {
		var height = geometry.menu.bounds.height;
		var width = geometry.menu.bounds.width;
		return A2(
			_debois$elm_mdl$Material_Options$css,
			'clip',
			function () {
				if (_elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Opened) || _elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Closing)) {
					return A4(_debois$elm_mdl$Material_Menu$rect, 0, width, height, 0);
				} else {
					var _p3 = config.alignment;
					switch (_p3.ctor) {
						case 'BottomRight':
							return A4(_debois$elm_mdl$Material_Menu$rect, 0, width, 0, width);
						case 'TopLeft':
							return A4(_debois$elm_mdl$Material_Menu$rect, height, 0, height, 0);
						case 'TopRight':
							return A4(_debois$elm_mdl$Material_Menu$rect, height, width, height, width);
						default:
							return '';
					}
				}
			}());
	});
var _debois$elm_mdl$Material_Menu$Opening = {ctor: 'Opening'};
var _debois$elm_mdl$Material_Menu$isActive = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Opened) || _elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Opening);
};
var _debois$elm_mdl$Material_Menu$Idle = {ctor: 'Idle'};
var _debois$elm_mdl$Material_Menu$defaultModel = {ripples: _elm_lang$core$Dict$empty, animationState: _debois$elm_mdl$Material_Menu$Idle, geometry: _elm_lang$core$Maybe$Nothing, index: _elm_lang$core$Maybe$Nothing};
var _debois$elm_mdl$Material_Menu$_p4 = A3(
	_debois$elm_mdl$Material_Component$indexed,
	function (_) {
		return _.menu;
	},
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.update(
				y,
				{menu: x});
		}),
	_debois$elm_mdl$Material_Menu$defaultModel);
var _debois$elm_mdl$Material_Menu$get = _debois$elm_mdl$Material_Menu$_p4._0;
var _debois$elm_mdl$Material_Menu$set = _debois$elm_mdl$Material_Menu$_p4._1;
var _debois$elm_mdl$Material_Menu$Key = F2(
	function (a, b) {
		return {ctor: 'Key', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Menu$Click = function (a) {
	return {ctor: 'Click', _0: a};
};
var _debois$elm_mdl$Material_Menu$subscriptions = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Opened) ? _elm_lang$mouse$Mouse$clicks(_debois$elm_mdl$Material_Menu$Click) : _elm_lang$core$Platform_Sub$none;
};
var _debois$elm_mdl$Material_Menu$subs = A3(
	_debois$elm_mdl$Material_Component$subs,
	_debois$elm_mdl$Material_Component$MenuMsg,
	function (_) {
		return _.menu;
	},
	_debois$elm_mdl$Material_Menu$subscriptions);
var _debois$elm_mdl$Material_Menu$Ripple = F2(
	function (a, b) {
		return {ctor: 'Ripple', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Menu$Tick = {ctor: 'Tick'};
var _debois$elm_mdl$Material_Menu$Close = {ctor: 'Close'};
var _debois$elm_mdl$Material_Menu$Select = F2(
	function (a, b) {
		return {ctor: 'Select', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Menu$update = F3(
	function (fwd, msg, model) {
		update:
		while (true) {
			var _p5 = msg;
			switch (_p5.ctor) {
				case 'Open':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								animationState: function () {
									var _p6 = model.animationState;
									if (_p6.ctor === 'Opened') {
										return _debois$elm_mdl$Material_Menu$Opened;
									} else {
										return _debois$elm_mdl$Material_Menu$Opening;
									}
								}(),
								geometry: _elm_lang$core$Maybe$Just(_p5._0)
							}),
						_1: _debois$elm_mdl$Material_Helpers$cmd(
							fwd(_debois$elm_mdl$Material_Menu$Tick))
					};
				case 'Tick':
					return _debois$elm_mdl$Material_Helpers$pure(
						_elm_lang$core$Native_Utils.update(
							model,
							{animationState: _debois$elm_mdl$Material_Menu$Opened}));
				case 'Close':
					return _debois$elm_mdl$Material_Helpers$pure(
						_elm_lang$core$Native_Utils.update(
							model,
							{animationState: _debois$elm_mdl$Material_Menu$Idle, geometry: _elm_lang$core$Maybe$Nothing, index: _elm_lang$core$Maybe$Nothing}));
				case 'Select':
					var cmds = A2(
						_elm_lang$core$List$filterMap,
						_elm_lang$core$Basics$identity,
						{
							ctor: '::',
							_0: _elm_lang$core$Maybe$Just(
								A2(
									_debois$elm_mdl$Material_Helpers$delay,
									_debois$elm_mdl$Material_Menu$constant.closeTimeout,
									fwd(_debois$elm_mdl$Material_Menu$Close))),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$core$Maybe$map, _debois$elm_mdl$Material_Helpers$cmd, _p5._1),
								_1: {ctor: '[]'}
							}
						});
					var model_ = _elm_lang$core$Native_Utils.update(
						model,
						{animationState: _debois$elm_mdl$Material_Menu$Closing});
					return {
						ctor: '_Tuple2',
						_0: model_,
						_1: _elm_lang$core$Platform_Cmd$batch(cmds)
					};
				case 'Ripple':
					var _p9 = _p5._0;
					var _p7 = A2(
						_debois$elm_mdl$Material_Ripple$update,
						_p5._1,
						A2(
							_elm_lang$core$Maybe$withDefault,
							_debois$elm_mdl$Material_Ripple$model,
							A2(_elm_lang$core$Dict$get, _p9, model.ripples)));
					var model_ = _p7._0;
					var effects = _p7._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								ripples: A3(_elm_lang$core$Dict$insert, _p9, model_, model.ripples)
							}),
						_1: A2(
							_elm_lang$core$Platform_Cmd$map,
							function (_p8) {
								return fwd(
									A2(_debois$elm_mdl$Material_Menu$Ripple, _p9, _p8));
							},
							effects)
					};
				case 'Click':
					if (_debois$elm_mdl$Material_Menu$isActive(model)) {
						var _p10 = model.geometry;
						if (_p10.ctor === 'Just') {
							var inside = F2(
								function (_p12, _p11) {
									var _p13 = _p12;
									var _p18 = _p13.y;
									var _p17 = _p13.x;
									var _p14 = _p11;
									var _p16 = _p14.top;
									var _p15 = _p14.left;
									return (_elm_lang$core$Native_Utils.cmp(
										_p15,
										_elm_lang$core$Basics$toFloat(_p17)) < 1) && ((_elm_lang$core$Native_Utils.cmp(
										_elm_lang$core$Basics$toFloat(_p17),
										_p15 + _p14.width) < 1) && ((_elm_lang$core$Native_Utils.cmp(
										_p16,
										_elm_lang$core$Basics$toFloat(_p18)) < 1) && (_elm_lang$core$Native_Utils.cmp(
										_elm_lang$core$Basics$toFloat(_p18),
										_p16 + _p14.height) < 1)));
								});
							if (A2(inside, _p5._0, _p10._0.menu.bounds)) {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									model,
									{ctor: '[]'});
							} else {
								var _v6 = fwd,
									_v7 = _debois$elm_mdl$Material_Menu$Close,
									_v8 = model;
								fwd = _v6;
								msg = _v7;
								model = _v8;
								continue update;
							}
						} else {
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						}
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					}
				default:
					var _p27 = _p5._0;
					var _p19 = _p5._1;
					switch (_p19) {
						case 13:
							if (_debois$elm_mdl$Material_Menu$isActive(model)) {
								var _p20 = model.index;
								if (_p20.ctor === 'Just') {
									var _p22 = _p20._0;
									var cmd = A2(
										_elm_lang$core$Maybe$andThen,
										function (_p21) {
											return function (_) {
												return _.onSelect;
											}(
												function (_) {
													return _.config;
												}(_p21));
										},
										_elm_lang$core$List$head(
											A2(_elm_lang$core$List$drop, _p22, _p27)));
									var _v11 = fwd,
										_v12 = A2(_debois$elm_mdl$Material_Menu$Select, _p22 + 1, cmd),
										_v13 = model;
									fwd = _v11;
									msg = _v12;
									model = _v13;
									continue update;
								} else {
									var _v14 = fwd,
										_v15 = _debois$elm_mdl$Material_Menu$Close,
										_v16 = model;
									fwd = _v14;
									msg = _v15;
									model = _v16;
									continue update;
								}
							} else {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									model,
									{ctor: '[]'});
							}
						case 27:
							var _v17 = fwd,
								_v18 = _debois$elm_mdl$Material_Menu$Close,
								_v19 = model;
							fwd = _v17;
							msg = _v18;
							model = _v19;
							continue update;
						case 32:
							if (_debois$elm_mdl$Material_Menu$isActive(model)) {
								var _v20 = fwd,
									_v21 = A2(_debois$elm_mdl$Material_Menu$Key, _p27, 13),
									_v22 = model;
								fwd = _v20;
								msg = _v21;
								model = _v22;
								continue update;
							} else {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									model,
									{ctor: '[]'});
							}
						case 40:
							if (_debois$elm_mdl$Material_Menu$isActive(model)) {
								var items = A2(
									_elm_lang$core$List$indexedMap,
									F2(
										function (v0, v1) {
											return {ctor: '_Tuple2', _0: v0, _1: v1};
										}),
									_p27);
								return A3(
									_elm_lang$core$Basics$flip,
									F2(
										function (x, y) {
											return A2(_elm_lang$core$Platform_Cmd_ops['!'], x, y);
										}),
									{ctor: '[]'},
									A2(
										_elm_lang$core$Maybe$withDefault,
										model,
										A2(
											_elm_lang$core$Maybe$map,
											function (_p23) {
												return function (index_) {
													return _elm_lang$core$Native_Utils.update(
														model,
														{
															index: _elm_lang$core$Maybe$Just(index_)
														});
												}(
													_elm_lang$core$Tuple$first(_p23));
											},
											_elm_lang$core$List$head(
												A2(
													_elm_lang$core$List$filter,
													function (_p24) {
														return function (_) {
															return _.enabled;
														}(
															function (_) {
																return _.config;
															}(
																_elm_lang$core$Tuple$second(_p24)));
													},
													A2(
														_elm_lang$core$List$drop,
														1 + A2(_elm_lang$core$Maybe$withDefault, -1, model.index),
														A2(_elm_lang$core$Basics_ops['++'], items, items)))))));
							} else {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									model,
									{ctor: '[]'});
							}
						case 38:
							if (_debois$elm_mdl$Material_Menu$isActive(model)) {
								var items = A2(
									_elm_lang$core$List$indexedMap,
									F2(
										function (v0, v1) {
											return {ctor: '_Tuple2', _0: v0, _1: v1};
										}),
									_p27);
								return _debois$elm_mdl$Material_Helpers$pure(
									A2(
										_elm_lang$core$Maybe$withDefault,
										model,
										A2(
											_elm_lang$core$Maybe$map,
											function (_p25) {
												return function (index_) {
													return _elm_lang$core$Native_Utils.update(
														model,
														{
															index: _elm_lang$core$Maybe$Just(index_)
														});
												}(
													_elm_lang$core$Tuple$first(_p25));
											},
											_elm_lang$core$List$head(
												A2(
													_elm_lang$core$List$filter,
													function (_p26) {
														return function (_) {
															return _.enabled;
														}(
															function (_) {
																return _.config;
															}(
																_elm_lang$core$Tuple$second(_p26)));
													},
													A2(
														_elm_lang$core$List$drop,
														_elm_lang$core$List$length(_p27) - A2(_elm_lang$core$Maybe$withDefault, 0, model.index),
														_elm_lang$core$List$reverse(
															A2(_elm_lang$core$Basics_ops['++'], items, items))))))));
							} else {
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									model,
									{ctor: '[]'});
							}
						default:
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
					}
			}
		}
	});
var _debois$elm_mdl$Material_Menu$react = F4(
	function (lift, msg, idx, store) {
		return A2(
			_debois$elm_mdl$Material_Helpers$map1st,
			function (_p28) {
				return _elm_lang$core$Maybe$Just(
					A3(_debois$elm_mdl$Material_Menu$set, idx, store, _p28));
			},
			A3(
				_debois$elm_mdl$Material_Menu$update,
				lift,
				msg,
				A2(_debois$elm_mdl$Material_Menu$get, idx, store)));
	});
var _debois$elm_mdl$Material_Menu$Open = function (a) {
	return {ctor: 'Open', _0: a};
};
var _debois$elm_mdl$Material_Menu$TopRight = {ctor: 'TopRight'};
var _debois$elm_mdl$Material_Menu$topRight = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{alignment: _debois$elm_mdl$Material_Menu$TopRight});
	});
var _debois$elm_mdl$Material_Menu$TopLeft = {ctor: 'TopLeft'};
var _debois$elm_mdl$Material_Menu$topLeft = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{alignment: _debois$elm_mdl$Material_Menu$TopLeft});
	});
var _debois$elm_mdl$Material_Menu$delay = F4(
	function (alignment, height, offsetTop, offsetHeight) {
		var t = (_elm_lang$core$Native_Utils.eq(alignment, _debois$elm_mdl$Material_Menu$TopLeft) || _elm_lang$core$Native_Utils.eq(alignment, _debois$elm_mdl$Material_Menu$TopRight)) ? ((((height - offsetTop) - offsetHeight) / height) * _debois$elm_mdl$Material_Menu$transitionDuration) : ((offsetTop / height) * _debois$elm_mdl$Material_Menu$transitionDuration);
		return A2(
			_debois$elm_mdl$Material_Options$css,
			'transition-delay',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(t),
				's'));
	});
var _debois$elm_mdl$Material_Menu$view1 = F8(
	function (lift, config, model, offsetTop, offsetHeight, index, summary, item) {
		var canSelect = summary.config.enabled && (!_elm_lang$core$Native_Utils.eq(summary.config.onSelect, _elm_lang$core$Maybe$Nothing));
		var hasRipple = config.ripple && canSelect;
		var ripple = function (_p29) {
			return lift(
				A2(_debois$elm_mdl$Material_Menu$Ripple, index, _p29));
		};
		return A5(
			_debois$elm_mdl$Material_Options_Internal$apply,
			summary,
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$cs('mdl-menu__item'),
				_1: {
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Options$when,
						config.ripple,
						_debois$elm_mdl$Material_Options$cs('mdl-js-ripple-effect')),
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Options$when,
							summary.config.divider,
							_debois$elm_mdl$Material_Options$cs('mdl-menu__item--full-bleed-divider')),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Options$when,
								_elm_lang$core$Native_Utils.eq(
									model.index,
									_elm_lang$core$Maybe$Just(index)),
								A2(_debois$elm_mdl$Material_Options$css, 'background-color', 'rgb(238,238,238)')),
							_1: {
								ctor: '::',
								_0: function () {
									var _p30 = {
										ctor: '_Tuple2',
										_0: model.geometry,
										_1: _debois$elm_mdl$Material_Menu$isActive(model)
									};
									if (((_p30.ctor === '_Tuple2') && (_p30._0.ctor === 'Just')) && (_p30._1 === true)) {
										return A4(_debois$elm_mdl$Material_Menu$delay, config.alignment, _p30._0._0.menu.bounds.height, offsetTop, offsetHeight);
									} else {
										return _debois$elm_mdl$Material_Options$nop;
									}
								}(),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'display', 'flex'),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'align-items', 'center'),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Options$when,
												canSelect,
												_debois$elm_mdl$Material_Options$onClick(
													lift(
														A2(_debois$elm_mdl$Material_Menu$Select, index, summary.config.onSelect)))),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Options$when,
													!summary.config.enabled,
													_debois$elm_mdl$Material_Options_Internal$attribute(
														A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', 'disabled'))),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options_Internal$attribute(
														A2(
															_elm_lang$html$Html_Attributes$property,
															'tabindex',
															_elm_lang$core$Json_Encode$string('-1'))),
													_1: {
														ctor: '::',
														_0: hasRipple ? _debois$elm_mdl$Material_Options$many(
															{
																ctor: '::',
																_0: _debois$elm_mdl$Material_Options_Internal$attribute(
																	A2(_debois$elm_mdl$Material_Ripple$downOn_, ripple, 'mousedown')),
																_1: {
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Options_Internal$attribute(
																		A2(_debois$elm_mdl$Material_Ripple$downOn_, ripple, 'touchstart')),
																	_1: {
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Options_Internal$attribute(
																			A2(_debois$elm_mdl$Material_Ripple$upOn_, ripple, 'mouseup')),
																		_1: {
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Options_Internal$attribute(
																				A2(_debois$elm_mdl$Material_Ripple$upOn_, ripple, 'mouseleave')),
																			_1: {
																				ctor: '::',
																				_0: _debois$elm_mdl$Material_Options_Internal$attribute(
																					A2(_debois$elm_mdl$Material_Ripple$upOn_, ripple, 'touchend')),
																				_1: {
																					ctor: '::',
																					_0: _debois$elm_mdl$Material_Options_Internal$attribute(
																						A2(_debois$elm_mdl$Material_Ripple$upOn_, ripple, 'blur')),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}) : _debois$elm_mdl$Material_Options$nop,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'},
			hasRipple ? A2(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				item.html,
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$map,
						ripple,
						A2(
							_debois$elm_mdl$Material_Ripple$view_,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('mdl-menu__item-ripple-container'),
								_1: {ctor: '[]'}
							},
							A2(
								_elm_lang$core$Maybe$withDefault,
								_debois$elm_mdl$Material_Ripple$model,
								A2(_elm_lang$core$Dict$get, index, model.ripples)))),
					_1: {ctor: '[]'}
				}) : item.html);
	});
var _debois$elm_mdl$Material_Menu$BottomRight = {ctor: 'BottomRight'};
var _debois$elm_mdl$Material_Menu$bottomRight = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{alignment: _debois$elm_mdl$Material_Menu$BottomRight});
	});
var _debois$elm_mdl$Material_Menu$BottomLeft = {ctor: 'BottomLeft'};
var _debois$elm_mdl$Material_Menu$defaultConfig = {alignment: _debois$elm_mdl$Material_Menu$BottomLeft, ripple: false, icon: 'more_vert'};
var _debois$elm_mdl$Material_Menu$bottomLeft = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{alignment: _debois$elm_mdl$Material_Menu$BottomLeft});
	});
var _debois$elm_mdl$Material_Menu$containerGeometry = F2(
	function (alignment, geometry) {
		return _debois$elm_mdl$Material_Options$many(
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Options$css,
					'width',
					_debois$elm_mdl$Material_Menu$toPx(geometry.menu.bounds.width)),
				_1: {
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Options$css,
						'height',
						_debois$elm_mdl$Material_Menu$toPx(geometry.menu.bounds.height)),
					_1: {
						ctor: '::',
						_0: (_elm_lang$core$Native_Utils.eq(alignment, _debois$elm_mdl$Material_Menu$BottomRight) || _elm_lang$core$Native_Utils.eq(alignment, _debois$elm_mdl$Material_Menu$BottomLeft)) ? A2(
							_debois$elm_mdl$Material_Options$css,
							'top',
							_debois$elm_mdl$Material_Menu$toPx(geometry.button.offsetTop + geometry.button.offsetHeight)) : _debois$elm_mdl$Material_Options$nop,
						_1: {
							ctor: '::',
							_0: function () {
								if (_elm_lang$core$Native_Utils.eq(alignment, _debois$elm_mdl$Material_Menu$BottomRight) || _elm_lang$core$Native_Utils.eq(alignment, _debois$elm_mdl$Material_Menu$TopRight)) {
									var right = function (e) {
										return e.bounds.left + e.bounds.width;
									};
									return A2(
										_debois$elm_mdl$Material_Options$css,
										'right',
										_debois$elm_mdl$Material_Menu$toPx(
											right(geometry.container) - right(geometry.menu)));
								} else {
									return _debois$elm_mdl$Material_Options$nop;
								}
							}(),
							_1: {
								ctor: '::',
								_0: function () {
									if (_elm_lang$core$Native_Utils.eq(alignment, _debois$elm_mdl$Material_Menu$TopLeft) || _elm_lang$core$Native_Utils.eq(alignment, _debois$elm_mdl$Material_Menu$TopRight)) {
										var bottom = geometry.container.bounds.top + geometry.container.bounds.height;
										return A2(
											_debois$elm_mdl$Material_Options$css,
											'bottom',
											_debois$elm_mdl$Material_Menu$toPx(bottom - geometry.button.bounds.top));
									} else {
										return _debois$elm_mdl$Material_Options$nop;
									}
								}(),
								_1: {
									ctor: '::',
									_0: (_elm_lang$core$Native_Utils.eq(alignment, _debois$elm_mdl$Material_Menu$TopLeft) || _elm_lang$core$Native_Utils.eq(alignment, _debois$elm_mdl$Material_Menu$BottomLeft)) ? A2(
										_debois$elm_mdl$Material_Options$css,
										'left',
										_debois$elm_mdl$Material_Menu$toPx(geometry.menu.offsetLeft)) : _debois$elm_mdl$Material_Options$nop,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
	});
var _debois$elm_mdl$Material_Menu$view = F4(
	function (lift, model, properties, items) {
		var itemSummaries = A2(
			_elm_lang$core$List$map,
			function (_p31) {
				return A2(
					_debois$elm_mdl$Material_Options_Internal$collect,
					_debois$elm_mdl$Material_Menu$defaultItemConfig,
					function (_) {
						return _.options;
					}(_p31));
			},
			items);
		var numItems = _elm_lang$core$List$length(items);
		var summary = A2(_debois$elm_mdl$Material_Options_Internal$collect, _debois$elm_mdl$Material_Menu$defaultConfig, properties);
		var config = summary.config;
		var alignment = function () {
			var _p32 = config.alignment;
			switch (_p32.ctor) {
				case 'BottomLeft':
					return _debois$elm_mdl$Material_Options$cs('mdl-menu--bottom-left');
				case 'BottomRight':
					return _debois$elm_mdl$Material_Options$cs('mdl-menu--bottom-right');
				case 'TopLeft':
					return _debois$elm_mdl$Material_Options$cs('mdl-menu--top-left');
				default:
					return _debois$elm_mdl$Material_Options$cs('mdl-menu--top-right');
			}
		}();
		return A5(
			_debois$elm_mdl$Material_Options_Internal$apply,
			summary,
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Options$css, 'position', 'relative'),
				_1: properties
			},
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$map,
					lift,
					A3(
						_debois$elm_mdl$Material_Options$styled,
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$cs('mdl-button'),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$cs('mdl-js-button'),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$cs('mdl-button--icon'),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Options$when,
											_debois$elm_mdl$Material_Menu$isActive(model),
											_debois$elm_mdl$Material_Menu$onKeyDown(
												_debois$elm_mdl$Material_Menu$Key(itemSummaries))),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Options$when,
												!_elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Opened),
												A2(
													_debois$elm_mdl$Material_Options$on,
													'click',
													A2(_elm_lang$core$Json_Decode$map, _debois$elm_mdl$Material_Menu$Open, _debois$elm_mdl$Material_Menu_Geometry$decode))),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Options$when,
													_debois$elm_mdl$Material_Menu$isActive(model),
													_debois$elm_mdl$Material_Options$onClick(_debois$elm_mdl$Material_Menu$Close)),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Icon$view,
								config.icon,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$cs('material-icons'),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'pointer-events', 'none'),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						})),
				_1: {
					ctor: '::',
					_0: A3(
						_debois$elm_mdl$Material_Options$styled,
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$cs('mdl-menu__container'),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$cs('is-upgraded'),
								_1: {
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Options$when,
										_elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Opened) || _elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Closing),
										_debois$elm_mdl$Material_Options$cs('is-visible')),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Menu$withGeometry,
											model,
											_debois$elm_mdl$Material_Menu$containerGeometry(config.alignment)),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: A3(
								_debois$elm_mdl$Material_Options$styled,
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$cs('mdl-menu__outline'),
									_1: {
										ctor: '::',
										_0: alignment,
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Menu$withGeometry,
												model,
												function (geometry) {
													return _debois$elm_mdl$Material_Options$many(
														{
															ctor: '::',
															_0: A2(
																_debois$elm_mdl$Material_Options$css,
																'width',
																_debois$elm_mdl$Material_Menu$toPx(geometry.menu.bounds.width)),
															_1: {
																ctor: '::',
																_0: A2(
																	_debois$elm_mdl$Material_Options$css,
																	'height',
																	_debois$elm_mdl$Material_Menu$toPx(geometry.menu.bounds.height)),
																_1: {ctor: '[]'}
															}
														});
												}),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A3(
									_debois$elm_mdl$Material_Options$styled,
									_elm_lang$html$Html$ul,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$cs('mdl-menu'),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Options$cs('mdl-js-menu'),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Options$when,
													_elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Opening) || _elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Closing),
													_debois$elm_mdl$Material_Options$cs('is-animating')),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Menu$withGeometry,
														model,
														A2(_debois$elm_mdl$Material_Menu$clip, model, config)),
													_1: {
														ctor: '::',
														_0: alignment,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									function () {
										var _p33 = model.geometry;
										if (_p33.ctor === 'Just') {
											var _p34 = _p33._0;
											return A6(
												_elm_lang$core$List$map5,
												A3(_debois$elm_mdl$Material_Menu$view1, lift, config, model),
												_p34.offsetTops,
												_p34.offsetHeights,
												A2(_elm_lang$core$List$range, 0, numItems - 1),
												itemSummaries,
												items);
										} else {
											return A4(
												_elm_lang$core$List$map3,
												A5(_debois$elm_mdl$Material_Menu$view1, lift, config, model, 0, 0),
												A2(_elm_lang$core$List$range, 0, numItems - 1),
												itemSummaries,
												items);
										}
									}()),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _debois$elm_mdl$Material_Menu$render = A3(_debois$elm_mdl$Material_Component$render, _debois$elm_mdl$Material_Menu$get, _debois$elm_mdl$Material_Menu$view, _debois$elm_mdl$Material_Component$MenuMsg);

var _debois$elm_mdl$Material_Snackbar$enqueue = F2(
	function (contents, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				queue: A2(
					_elm_lang$core$List$append,
					model.queue,
					{
						ctor: '::',
						_0: contents,
						_1: {ctor: '[]'}
					})
			});
	});
var _debois$elm_mdl$Material_Snackbar$snackbar = F3(
	function (payload, message, label) {
		return {
			message: message,
			action: _elm_lang$core$Maybe$Just(label),
			payload: payload,
			timeout: 2750,
			fade: 250
		};
	});
var _debois$elm_mdl$Material_Snackbar$toast = F2(
	function (payload, message) {
		return {message: message, action: _elm_lang$core$Maybe$Nothing, payload: payload, timeout: 2750, fade: 250};
	});
var _debois$elm_mdl$Material_Snackbar$Contents = F5(
	function (a, b, c, d, e) {
		return {message: a, action: b, payload: c, timeout: d, fade: e};
	});
var _debois$elm_mdl$Material_Snackbar$Model = F3(
	function (a, b, c) {
		return {queue: a, state: b, seq: c};
	});
var _debois$elm_mdl$Material_Snackbar$Fading = function (a) {
	return {ctor: 'Fading', _0: a};
};
var _debois$elm_mdl$Material_Snackbar$Active = function (a) {
	return {ctor: 'Active', _0: a};
};
var _debois$elm_mdl$Material_Snackbar$Inert = {ctor: 'Inert'};
var _debois$elm_mdl$Material_Snackbar$model = {
	queue: {ctor: '[]'},
	state: _debois$elm_mdl$Material_Snackbar$Inert,
	seq: -1
};
var _debois$elm_mdl$Material_Snackbar$Clicked = {ctor: 'Clicked'};
var _debois$elm_mdl$Material_Snackbar$Timeout = {ctor: 'Timeout'};
var _debois$elm_mdl$Material_Snackbar$Move = F2(
	function (a, b) {
		return {ctor: 'Move', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Snackbar$next = function (model) {
	return _elm_lang$core$Platform_Cmd$map(
		_debois$elm_mdl$Material_Snackbar$Move(model.seq));
};
var _debois$elm_mdl$Material_Snackbar$view = function (model) {
	var isActive = function () {
		var _p0 = model.state;
		switch (_p0.ctor) {
			case 'Inert':
				return false;
			case 'Active':
				return true;
			default:
				return false;
		}
	}();
	var contents = function () {
		var _p1 = model.state;
		switch (_p1.ctor) {
			case 'Inert':
				return _elm_lang$core$Maybe$Nothing;
			case 'Active':
				return _elm_lang$core$Maybe$Just(_p1._0);
			default:
				return _elm_lang$core$Maybe$Just(_p1._0);
		}
	}();
	var action = A2(
		_elm_lang$core$Maybe$andThen,
		function (_) {
			return _.action;
		},
		contents);
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'mdl-js-snackbar', _1: true},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'mdl-snackbar', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'mdl-snackbar--active', _1: isActive},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Helpers$aria, 'hidden', !isActive),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('mdl-snackbar__text'),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					A2(
						_elm_lang$core$Maybe$map,
						function (c) {
							return {
								ctor: '::',
								_0: _elm_lang$html$Html$text(c.message),
								_1: {ctor: '[]'}
							};
						},
						contents))),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('mdl-snackbar__action'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('button'),
							_1: {
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Helpers$aria,
									'hidden',
									A2(
										_elm_lang$core$Maybe$withDefault,
										true,
										A2(
											_elm_lang$core$Maybe$map,
											_elm_lang$core$Basics$always(!isActive),
											action))),
								_1: A2(
									_elm_lang$core$Maybe$withDefault,
									{ctor: '[]'},
									A2(
										_elm_lang$core$Maybe$map,
										_elm_lang$core$Basics$always(
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(
													A2(_debois$elm_mdl$Material_Snackbar$Move, model.seq, _debois$elm_mdl$Material_Snackbar$Clicked)),
												_1: {ctor: '[]'}
											}),
										action))
							}
						}
					},
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Maybe$map,
							function (action) {
								return {
									ctor: '::',
									_0: _elm_lang$html$Html$text(action),
									_1: {ctor: '[]'}
								};
							},
							action))),
				_1: {ctor: '[]'}
			}
		});
};
var _debois$elm_mdl$Material_Snackbar$Click = function (a) {
	return {ctor: 'Click', _0: a};
};
var _debois$elm_mdl$Material_Snackbar$End = function (a) {
	return {ctor: 'End', _0: a};
};
var _debois$elm_mdl$Material_Snackbar$Begin = function (a) {
	return {ctor: 'Begin', _0: a};
};
var _debois$elm_mdl$Material_Snackbar$tryDequeue = function (model) {
	var _p2 = {ctor: '_Tuple2', _0: model.state, _1: model.queue};
	if (((_p2.ctor === '_Tuple2') && (_p2._0.ctor === 'Inert')) && (_p2._1.ctor === '::')) {
		var _p3 = _p2._1._0;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					state: _debois$elm_mdl$Material_Snackbar$Active(_p3),
					queue: _p2._1._1,
					seq: model.seq + 1
				}),
			_1: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: A2(
						_elm_lang$core$Platform_Cmd$map,
						_debois$elm_mdl$Material_Snackbar$Move(model.seq + 1),
						A2(_debois$elm_mdl$Material_Helpers$delay, _p3.timeout, _debois$elm_mdl$Material_Snackbar$Timeout)),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Helpers$cmd(
							_debois$elm_mdl$Material_Snackbar$Begin(_p3.payload)),
						_1: {ctor: '[]'}
					}
				})
		};
	} else {
		return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
	}
};
var _debois$elm_mdl$Material_Snackbar$move = F2(
	function (transition, model) {
		var _p4 = {ctor: '_Tuple2', _0: model.state, _1: transition};
		_v3_4:
		do {
			if (_p4.ctor === '_Tuple2') {
				if (_p4._1.ctor === 'Clicked') {
					if (_p4._0.ctor === 'Active') {
						var _p5 = _p4._0._0;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									state: _debois$elm_mdl$Material_Snackbar$Fading(_p5)
								}),
							_1: _elm_lang$core$Platform_Cmd$batch(
								{
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Snackbar$next,
										model,
										A2(_debois$elm_mdl$Material_Helpers$delay, _p5.fade, _debois$elm_mdl$Material_Snackbar$Timeout)),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Helpers$cmd(
											_debois$elm_mdl$Material_Snackbar$Click(_p5.payload)),
										_1: {ctor: '[]'}
									}
								})
						};
					} else {
						break _v3_4;
					}
				} else {
					switch (_p4._0.ctor) {
						case 'Inert':
							return _debois$elm_mdl$Material_Snackbar$tryDequeue(model);
						case 'Active':
							var _p6 = _p4._0._0;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										state: _debois$elm_mdl$Material_Snackbar$Fading(_p6)
									}),
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Snackbar$next,
											model,
											A2(_debois$elm_mdl$Material_Helpers$delay, _p6.fade, _debois$elm_mdl$Material_Snackbar$Timeout)),
										_1: {ctor: '[]'}
									})
							};
						default:
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{state: _debois$elm_mdl$Material_Snackbar$Inert}),
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Snackbar$next,
											model,
											_debois$elm_mdl$Material_Helpers$cmd(_debois$elm_mdl$Material_Snackbar$Timeout)),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Helpers$cmd(
												_debois$elm_mdl$Material_Snackbar$End(_p4._0._0.payload)),
											_1: {ctor: '[]'}
										}
									})
							};
					}
				}
			} else {
				break _v3_4;
			}
		} while(false);
		return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _debois$elm_mdl$Material_Snackbar$update = F2(
	function (action, model) {
		var _p7 = action;
		if (_p7.ctor === 'Move') {
			return _elm_lang$core$Native_Utils.eq(_p7._0, model.seq) ? A2(_debois$elm_mdl$Material_Snackbar$move, _p7._1, model) : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _debois$elm_mdl$Material_Snackbar$add = F2(
	function (contents, model) {
		return _debois$elm_mdl$Material_Snackbar$tryDequeue(
			A2(_debois$elm_mdl$Material_Snackbar$enqueue, contents, model));
	});

var _elm_lang$html$Html_Keyed$node = _elm_lang$virtual_dom$VirtualDom$keyedNode;
var _elm_lang$html$Html_Keyed$ol = _elm_lang$html$Html_Keyed$node('ol');
var _elm_lang$html$Html_Keyed$ul = _elm_lang$html$Html_Keyed$node('ul');

var _elm_lang$window$Native_Window = function()
{

var size = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)	{
	callback(_elm_lang$core$Native_Scheduler.succeed({
		width: window.innerWidth,
		height: window.innerHeight
	}));
});

return {
	size: size
};

}();
var _elm_lang$window$Window_ops = _elm_lang$window$Window_ops || {};
_elm_lang$window$Window_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return task2;
			},
			task1);
	});
var _elm_lang$window$Window$onSelfMsg = F3(
	function (router, dimensions, state) {
		var _p1 = state;
		if (_p1.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (_p2) {
				var _p3 = _p2;
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p3._0(dimensions));
			};
			return A2(
				_elm_lang$window$Window_ops['&>'],
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p1._0.subs)),
				_elm_lang$core$Task$succeed(state));
		}
	});
var _elm_lang$window$Window$init = _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
var _elm_lang$window$Window$size = _elm_lang$window$Native_Window.size;
var _elm_lang$window$Window$width = A2(
	_elm_lang$core$Task$map,
	function (_) {
		return _.width;
	},
	_elm_lang$window$Window$size);
var _elm_lang$window$Window$height = A2(
	_elm_lang$core$Task$map,
	function (_) {
		return _.height;
	},
	_elm_lang$window$Window$size);
var _elm_lang$window$Window$onEffects = F3(
	function (router, newSubs, oldState) {
		var _p4 = {ctor: '_Tuple2', _0: oldState, _1: newSubs};
		if (_p4._0.ctor === 'Nothing') {
			if (_p4._1.ctor === '[]') {
				return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
			} else {
				return A2(
					_elm_lang$core$Task$andThen,
					function (pid) {
						return _elm_lang$core$Task$succeed(
							_elm_lang$core$Maybe$Just(
								{subs: newSubs, pid: pid}));
					},
					_elm_lang$core$Process$spawn(
						A3(
							_elm_lang$dom$Dom_LowLevel$onWindow,
							'resize',
							_elm_lang$core$Json_Decode$succeed(
								{ctor: '_Tuple0'}),
							function (_p5) {
								return A2(
									_elm_lang$core$Task$andThen,
									_elm_lang$core$Platform$sendToSelf(router),
									_elm_lang$window$Window$size);
							})));
			}
		} else {
			if (_p4._1.ctor === '[]') {
				return A2(
					_elm_lang$window$Window_ops['&>'],
					_elm_lang$core$Process$kill(_p4._0._0.pid),
					_elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing));
			} else {
				return _elm_lang$core$Task$succeed(
					_elm_lang$core$Maybe$Just(
						{subs: newSubs, pid: _p4._0._0.pid}));
			}
		}
	});
var _elm_lang$window$Window$subscription = _elm_lang$core$Native_Platform.leaf('Window');
var _elm_lang$window$Window$Size = F2(
	function (a, b) {
		return {width: a, height: b};
	});
var _elm_lang$window$Window$MySub = function (a) {
	return {ctor: 'MySub', _0: a};
};
var _elm_lang$window$Window$resizes = function (tagger) {
	return _elm_lang$window$Window$subscription(
		_elm_lang$window$Window$MySub(tagger));
};
var _elm_lang$window$Window$subMap = F2(
	function (func, _p6) {
		var _p7 = _p6;
		return _elm_lang$window$Window$MySub(
			function (_p8) {
				return func(
					_p7._0(_p8));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Window'] = {pkg: 'elm-lang/window', init: _elm_lang$window$Window$init, onEffects: _elm_lang$window$Window$onEffects, onSelfMsg: _elm_lang$window$Window$onSelfMsg, tag: 'sub', subMap: _elm_lang$window$Window$subMap};

var _debois$elm_mdl$Material_Layout$_p0 = {
	ctor: '_Tuple2',
	_0: function (_) {
		return _.layout;
	},
	_1: F2(
		function (x, s) {
			return _elm_lang$core$Native_Utils.update(
				s,
				{layout: x});
		})
};
var _debois$elm_mdl$Material_Layout$get = _debois$elm_mdl$Material_Layout$_p0._0;
var _debois$elm_mdl$Material_Layout$set = _debois$elm_mdl$Material_Layout$_p0._1;
var _debois$elm_mdl$Material_Layout$drawerView = F3(
	function (lift, isVisible, elems) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'mdl-layout__drawer', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'is-visible', _1: isVisible},
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html_Attributes$attribute,
						'aria-hidden',
						isVisible ? 'false' : 'true'),
					_1: {ctor: '[]'}
				}
			},
			elems);
	});
var _debois$elm_mdl$Material_Layout$onKeypressFilterSpaceAndEnter = A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', '\n  (function (evt) {\n     if (evt && evt.type === \"keydown\" && (evt.keyCode === 32 || evt.keyCode === 13)) {\n       evt.preventDefault();\n     }\n   })(window.event);\n  ');
var _debois$elm_mdl$Material_Layout$toList = function (x) {
	var _p1 = x;
	if (_p1.ctor === 'Nothing') {
		return {ctor: '[]'};
	} else {
		return {
			ctor: '::',
			_0: _p1._0,
			_1: {ctor: '[]'}
		};
	}
};
var _debois$elm_mdl$Material_Layout$isWaterfall = function (mode) {
	var _p2 = mode;
	if (_p2.ctor === 'Waterfall') {
		return true;
	} else {
		return false;
	}
};
var _debois$elm_mdl$Material_Layout$row = function (styles) {
	return _debois$elm_mdl$Material_Options$div(
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Options$cs('mdl-layout__header-row'),
			_1: styles
		});
};
var _debois$elm_mdl$Material_Layout$link = F2(
	function (styles, contents) {
		return A3(
			_debois$elm_mdl$Material_Options$styled,
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$cs('mdl-navigation__link'),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Options_Internal$attribute(
						A2(_elm_lang$html$Html_Attributes$attribute, 'tabindex', '1')),
					_1: styles
				}
			},
			contents);
	});
var _debois$elm_mdl$Material_Layout$href = function (url) {
	return _debois$elm_mdl$Material_Options$attribute(
		_elm_lang$html$Html_Attributes$href(url));
};
var _debois$elm_mdl$Material_Layout$navigation = F2(
	function (styles, contents) {
		return A3(
			_debois$elm_mdl$Material_Options$styled,
			_elm_lang$html$Html$nav,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$cs('mdl-navigation'),
				_1: styles
			},
			contents);
	});
var _debois$elm_mdl$Material_Layout$title = function (styles) {
	return _debois$elm_mdl$Material_Options$span(
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Options$cs('mdl-layout__title'),
			_1: styles
		});
};
var _debois$elm_mdl$Material_Layout$spacer = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('mdl-layout-spacer'),
		_1: {ctor: '[]'}
	},
	{ctor: '[]'});
var _debois$elm_mdl$Material_Layout$onSelectTab = function (_p3) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (f, config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{
						onSelectTab: _elm_lang$core$Maybe$Just(
							function (_p4) {
								return _elm_lang$html$Html_Events$onClick(
									f(_p4));
							})
					});
			})(_p3));
};
var _debois$elm_mdl$Material_Layout$moreTabs = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{moreTabs: true});
	});
var _debois$elm_mdl$Material_Layout$selectedTab = function (_p5) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (k, config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{selectedTab: k});
			})(_p5));
};
var _debois$elm_mdl$Material_Layout$transparentHeader = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{transparentHeader: true});
	});
var _debois$elm_mdl$Material_Layout$rippleTabs = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{rippleTabs: true});
	});
var _debois$elm_mdl$Material_Layout$fixedTabs = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{fixedTabs: true});
	});
var _debois$elm_mdl$Material_Layout$fixedDrawer = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{fixedDrawer: true});
	});
var _debois$elm_mdl$Material_Layout$fixedHeader = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{fixedHeader: true});
	});
var _debois$elm_mdl$Material_Layout$mainId = 'elm-mdl-layout-main';
var _debois$elm_mdl$Material_Layout$setTabsWidth_ = F2(
	function (width, model) {
		var x = model.tabScrollState;
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				tabScrollState: _elm_lang$core$Native_Utils.update(
					x,
					{
						width: _elm_lang$core$Maybe$Just(width)
					})
			});
	});
var _debois$elm_mdl$Material_Layout$setTabsWidth = F2(
	function (w, container) {
		return _elm_lang$core$Native_Utils.update(
			container,
			{
				layout: A2(_debois$elm_mdl$Material_Layout$setTabsWidth_, w, container.layout)
			});
	});
var _debois$elm_mdl$Material_Layout$defaultTabScrollState = {canScrollRight: true, canScrollLeft: false, width: _elm_lang$core$Maybe$Nothing};
var _debois$elm_mdl$Material_Layout$defaultModel = {ripples: _elm_lang$core$Dict$empty, isSmallScreen: false, isCompact: false, isAnimating: false, isScrolled: false, isDrawerOpen: false, tabScrollState: _debois$elm_mdl$Material_Layout$defaultTabScrollState};
var _debois$elm_mdl$Material_Layout$TabScrollState = F3(
	function (a, b, c) {
		return {canScrollLeft: a, canScrollRight: b, width: c};
	});
var _debois$elm_mdl$Material_Layout$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {ripples: a, isSmallScreen: b, isCompact: c, isAnimating: d, isScrolled: e, isDrawerOpen: f, tabScrollState: g};
	});
var _debois$elm_mdl$Material_Layout$Config = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {fixedHeader: a, fixedDrawer: b, fixedTabs: c, rippleTabs: d, mode: e, selectedTab: f, onSelectTab: g, transparentHeader: h, moreTabs: i};
	});
var _debois$elm_mdl$Material_Layout$Contents = F4(
	function (a, b, c, d) {
		return {header: a, drawer: b, tabs: c, main: d};
	});
var _debois$elm_mdl$Material_Layout$Ripple = F2(
	function (a, b) {
		return {ctor: 'Ripple', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Layout$NOP = {ctor: 'NOP'};
var _debois$elm_mdl$Material_Layout$TransitionEnd = {ctor: 'TransitionEnd'};
var _debois$elm_mdl$Material_Layout$TransitionHeader = function (a) {
	return {ctor: 'TransitionHeader', _0: a};
};
var _debois$elm_mdl$Material_Layout$update_ = F3(
	function (f, action, model) {
		update_:
		while (true) {
			var _p6 = action;
			switch (_p6.ctor) {
				case 'NOP':
					return _elm_lang$core$Maybe$Nothing;
				case 'Resize':
					var _p7 = _p6._0;
					var tabScrollState = A2(
						_elm_lang$core$Maybe$withDefault,
						model.tabScrollState,
						A2(
							_elm_lang$core$Maybe$map,
							function (tabsWidth) {
								var tabScrollState = model.tabScrollState;
								return _elm_lang$core$Native_Utils.update(
									tabScrollState,
									{
										canScrollRight: _elm_lang$core$Native_Utils.cmp(tabsWidth + (2 * 56), _p7) > 0
									});
							},
							model.tabScrollState.width));
					var isSmall = _elm_lang$core$Native_Utils.cmp(1024, _p7) > -1;
					return (_elm_lang$core$Native_Utils.eq(isSmall, model.isSmallScreen) && _elm_lang$core$Native_Utils.eq(tabScrollState.canScrollRight, model.tabScrollState.canScrollRight)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
						_debois$elm_mdl$Material_Helpers$pure(
							_elm_lang$core$Native_Utils.update(
								model,
								{isSmallScreen: isSmall, isDrawerOpen: (!isSmall) && model.isDrawerOpen, tabScrollState: tabScrollState})));
				case 'ToggleDrawer':
					return _elm_lang$core$Maybe$Just(
						_debois$elm_mdl$Material_Helpers$pure(
							_elm_lang$core$Native_Utils.update(
								model,
								{isDrawerOpen: !model.isDrawerOpen})));
				case 'Ripple':
					var _p9 = _p6._0;
					return _elm_lang$core$Maybe$Just(
						A2(
							_debois$elm_mdl$Material_Helpers$map2nd,
							_elm_lang$core$Platform_Cmd$map(
								function (_p8) {
									return f(
										A2(_debois$elm_mdl$Material_Layout$Ripple, _p9, _p8));
								}),
							A2(
								_debois$elm_mdl$Material_Helpers$map1st,
								function (ripple_) {
									return _elm_lang$core$Native_Utils.update(
										model,
										{
											ripples: A3(_elm_lang$core$Dict$insert, _p9, ripple_, model.ripples)
										});
								},
								A2(
									_debois$elm_mdl$Material_Ripple$update,
									_p6._1,
									A2(
										_elm_lang$core$Maybe$withDefault,
										_debois$elm_mdl$Material_Ripple$model,
										A2(_elm_lang$core$Dict$get, _p9, model.ripples))))));
				case 'ScrollTab':
					var _p10 = _p6._0;
					return (!_elm_lang$core$Native_Utils.eq(model.tabScrollState, _p10)) ? _elm_lang$core$Maybe$Just(
						_debois$elm_mdl$Material_Helpers$pure(
							_elm_lang$core$Native_Utils.update(
								model,
								{tabScrollState: _p10}))) : _elm_lang$core$Maybe$Nothing;
				case 'ScrollPane':
					var isScrolled = _elm_lang$core$Native_Utils.cmp(0.0, _p6._1) < 0;
					if (!_elm_lang$core$Native_Utils.eq(isScrolled, model.isScrolled)) {
						var _v3 = f,
							_v4 = _debois$elm_mdl$Material_Layout$TransitionHeader(
							{toCompact: isScrolled, fixedHeader: _p6._0}),
							_v5 = _elm_lang$core$Native_Utils.update(
							model,
							{isScrolled: isScrolled});
						f = _v3;
						action = _v4;
						model = _v5;
						continue update_;
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				case 'TransitionHeader':
					return (!model.isAnimating) ? _elm_lang$core$Maybe$Just(
						{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{isCompact: _p6._0.toCompact, isAnimating: (!model.isSmallScreen) || _p6._0.fixedHeader}),
							_1: _elm_lang$core$Platform_Cmd$none
						}) : _elm_lang$core$Maybe$Nothing;
				default:
					return _elm_lang$core$Maybe$Just(
						_debois$elm_mdl$Material_Helpers$pure(
							_elm_lang$core$Native_Utils.update(
								model,
								{isAnimating: false})));
			}
		}
	});
var _debois$elm_mdl$Material_Layout$update = F2(
	function (msg, model) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none},
			A3(_debois$elm_mdl$Material_Layout$update_, _elm_lang$core$Basics$identity, msg, model));
	});
var _debois$elm_mdl$Material_Layout$react = F3(
	function (lift, msg, store) {
		var _p11 = A3(
			_debois$elm_mdl$Material_Layout$update_,
			lift,
			msg,
			_debois$elm_mdl$Material_Layout$get(store));
		if ((_p11.ctor === 'Just') && (_p11._0.ctor === '_Tuple2')) {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Maybe$Just(
					A2(_debois$elm_mdl$Material_Layout$set, _p11._0._0, store)),
				_1: _p11._0._1
			};
		} else {
			return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _debois$elm_mdl$Material_Layout$ScrollPane = F2(
	function (a, b) {
		return {ctor: 'ScrollPane', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Layout$ScrollTab = function (a) {
	return {ctor: 'ScrollTab', _0: a};
};
var _debois$elm_mdl$Material_Layout$Resize = function (a) {
	return {ctor: 'Resize', _0: a};
};
var _debois$elm_mdl$Material_Layout$init = function () {
	var measureScreenSize = A2(_elm_lang$core$Task$perform, _debois$elm_mdl$Material_Layout$Resize, _elm_lang$window$Window$width);
	return {ctor: '_Tuple2', _0: _debois$elm_mdl$Material_Layout$defaultModel, _1: measureScreenSize};
}();
var _debois$elm_mdl$Material_Layout$sub0 = function (lift) {
	return A2(
		_elm_lang$core$Platform_Cmd$map,
		function (_p12) {
			return lift(
				_debois$elm_mdl$Material_Component$LayoutMsg(_p12));
		},
		_elm_lang$core$Tuple$second(_debois$elm_mdl$Material_Layout$init));
};
var _debois$elm_mdl$Material_Layout$subscriptions = function (model) {
	return _elm_lang$window$Window$resizes(
		function (_p13) {
			return _debois$elm_mdl$Material_Layout$Resize(
				function (_) {
					return _.width;
				}(_p13));
		});
};
var _debois$elm_mdl$Material_Layout$subs = function (lift) {
	return function (_p14) {
		return A2(
			_elm_lang$core$Platform_Sub$map,
			function (_p15) {
				return lift(
					_debois$elm_mdl$Material_Component$LayoutMsg(_p15));
			},
			_debois$elm_mdl$Material_Layout$subscriptions(
				_debois$elm_mdl$Material_Layout$get(_p14)));
	};
};
var _debois$elm_mdl$Material_Layout$ToggleDrawer = {ctor: 'ToggleDrawer'};
var _debois$elm_mdl$Material_Layout$drawerButton = F2(
	function (lift, isVisible) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'mdl-layout__drawer-button', _1: true},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html_Attributes$attribute,
								'aria-expanded',
								isVisible ? 'true' : 'false'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$tabindex(1),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										lift(_debois$elm_mdl$Material_Layout$ToggleDrawer)),
									_1: {
										ctor: '::',
										_0: A3(
											_elm_lang$html$Html_Events$onWithOptions,
											'keydown',
											{stopPropagation: false, preventDefault: false},
											A2(
												_elm_lang$core$Json_Decode$map,
												function (_p16) {
													return lift(
														function (key) {
															var _p17 = key;
															switch (_p17) {
																case 32:
																	return _debois$elm_mdl$Material_Layout$ToggleDrawer;
																case 13:
																	return _debois$elm_mdl$Material_Layout$ToggleDrawer;
																default:
																	return _debois$elm_mdl$Material_Layout$NOP;
															}
														}(_p16));
												},
												_elm_lang$html$Html_Events$keyCode)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Icon$i('menu'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _debois$elm_mdl$Material_Layout$obfuscator = F2(
	function (lift, isVisible) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'mdl-layout__obfuscator', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'is-visible', _1: isVisible},
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						lift(_debois$elm_mdl$Material_Layout$ToggleDrawer)),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'});
	});
var _debois$elm_mdl$Material_Layout$toggleDrawer = function (lift) {
	return function (_p18) {
		return lift(
			_debois$elm_mdl$Material_Component$LayoutMsg(_p18));
	}(_debois$elm_mdl$Material_Layout$ToggleDrawer);
};
var _debois$elm_mdl$Material_Layout$Waterfall = function (a) {
	return {ctor: 'Waterfall', _0: a};
};
var _debois$elm_mdl$Material_Layout$waterfall = function (_p19) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (b, config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{
						mode: _debois$elm_mdl$Material_Layout$Waterfall(b)
					});
			})(_p19));
};
var _debois$elm_mdl$Material_Layout$Scrolling = {ctor: 'Scrolling'};
var _debois$elm_mdl$Material_Layout$scrolling = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{mode: _debois$elm_mdl$Material_Layout$Scrolling});
	});
var _debois$elm_mdl$Material_Layout$Seamed = {ctor: 'Seamed'};
var _debois$elm_mdl$Material_Layout$seamed = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{mode: _debois$elm_mdl$Material_Layout$Seamed});
	});
var _debois$elm_mdl$Material_Layout$Standard = {ctor: 'Standard'};
var _debois$elm_mdl$Material_Layout$defaultConfig = {fixedHeader: false, fixedDrawer: false, fixedTabs: false, rippleTabs: true, mode: _debois$elm_mdl$Material_Layout$Standard, onSelectTab: _elm_lang$core$Maybe$Nothing, selectedTab: -1, moreTabs: false, transparentHeader: false};
var _debois$elm_mdl$Material_Layout$headerView = F4(
	function (lift, config, model, _p20) {
		var _p21 = _p20;
		var mode = function () {
			var _p22 = config.mode;
			switch (_p22.ctor) {
				case 'Standard':
					return _debois$elm_mdl$Material_Options$nop;
				case 'Scrolling':
					return _debois$elm_mdl$Material_Options$cs('mdl-layout__header--scroll');
				case 'Seamed':
					return _debois$elm_mdl$Material_Options$cs('mdl-layout__header--seamed');
				default:
					if (_p22._0 === true) {
						return _debois$elm_mdl$Material_Options$cs('mdl-layout__header--waterfall mdl-layout__header--waterfall-hide-top');
					} else {
						return _debois$elm_mdl$Material_Options$cs('mdl-layout__header--waterfall');
					}
			}
		}();
		return A3(
			_debois$elm_mdl$Material_Options$styled,
			_elm_lang$html$Html$header,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$cs('mdl-layout__header'),
				_1: {
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Options$when,
						_elm_lang$core$Native_Utils.eq(config.mode, _debois$elm_mdl$Material_Layout$Standard) || (_debois$elm_mdl$Material_Layout$isWaterfall(config.mode) && model.isCompact),
						_debois$elm_mdl$Material_Options$cs('is-casting-shadow')),
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Options$when,
							model.isAnimating,
							_debois$elm_mdl$Material_Options$cs('is-animating')),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Options$when,
								model.isCompact,
								_debois$elm_mdl$Material_Options$cs('is-compact')),
							_1: {
								ctor: '::',
								_0: mode,
								_1: {
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Options$when,
										config.transparentHeader,
										_debois$elm_mdl$Material_Options$cs('mdl-layout__header--transparent')),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$onClick(
											lift(
												_debois$elm_mdl$Material_Layout$TransitionHeader(
													{toCompact: false, fixedHeader: config.fixedHeader}))),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Options$on,
												'transitionend',
												_elm_lang$core$Json_Decode$succeed(
													lift(_debois$elm_mdl$Material_Layout$TransitionEnd))),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			},
			A2(
				_elm_lang$core$List$concatMap,
				function (x) {
					return x;
				},
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Layout$toList(_p21._0),
					_1: {
						ctor: '::',
						_0: _p21._1,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Layout$toList(_p21._2),
							_1: {ctor: '[]'}
						}
					}
				}));
	});
var _debois$elm_mdl$Material_Layout$Right = {ctor: 'Right'};
var _debois$elm_mdl$Material_Layout$Left = {ctor: 'Left'};
var _debois$elm_mdl$Material_Layout$tabsView = F4(
	function (lift, config, model, _p23) {
		var _p24 = _p23;
		var _p27 = _p24._1;
		var chevron = F2(
			function (direction, offset) {
				var dir = function () {
					var _p25 = direction;
					if (_p25.ctor === 'Left') {
						return 'left';
					} else {
						return 'right';
					}
				}();
				return A3(
					_debois$elm_mdl$Material_Options$styled,
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$cs('mdl-layout__tab-bar-button'),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$cs(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'mdl-layout__tab-bar-',
									A2(_elm_lang$core$Basics_ops['++'], dir, '-button'))),
							_1: {
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Options$when,
									(_elm_lang$core$Native_Utils.eq(direction, _debois$elm_mdl$Material_Layout$Left) && model.tabScrollState.canScrollLeft) || (_elm_lang$core$Native_Utils.eq(direction, _debois$elm_mdl$Material_Layout$Right) && model.tabScrollState.canScrollRight),
									_debois$elm_mdl$Material_Options$cs('is-active')),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$many(_p27),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Icon$view,
							A2(_elm_lang$core$Basics_ops['++'], 'chevron_', dir),
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Icon$size24,
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options_Internal$attribute(
										A2(
											_elm_lang$html$Html_Attributes$attribute,
											'onclick',
											A2(
												_elm_lang$core$Basics_ops['++'],
												'document.getElementsByClassName(\'mdl-layout__tab-bar\')[0].scrollLeft += ',
												_elm_lang$core$Basics$toString(offset)))),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					});
			});
		return A2(
			_debois$elm_mdl$Material_Options$div,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$cs('mdl-layout__tab-bar-container'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(chevron, _debois$elm_mdl$Material_Layout$Left, -100),
				_1: {
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Options$div,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$cs('mdl-layout__tab-bar'),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'position', 'relative'),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'scroll-behavior', 'smooth'),
									_1: {
										ctor: '::',
										_0: config.rippleTabs ? _debois$elm_mdl$Material_Options$many(
											{
												ctor: '::',
												_0: _debois$elm_mdl$Material_Options$cs('mdl-js-ripple-effect'),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options$cs('mds-js-ripple-effect--ignore-events'),
													_1: {ctor: '[]'}
												}
											}) : _debois$elm_mdl$Material_Options$nop,
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.eq(config.mode, _debois$elm_mdl$Material_Layout$Standard) ? _debois$elm_mdl$Material_Options$cs('is-casting-shadow') : _debois$elm_mdl$Material_Options$nop,
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Options$many(_p27),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options_Internal$attribute(
														A2(
															_elm_lang$html$Html_Events$on,
															'scroll',
															_debois$elm_dom$DOM$target(
																A4(
																	_elm_lang$core$Json_Decode$map3,
																	F3(
																		function (scrollWidth, clientWidth, scrollLeft) {
																			return lift(
																				_debois$elm_mdl$Material_Layout$ScrollTab(
																					{
																						canScrollLeft: _elm_lang$core$Native_Utils.cmp(scrollLeft, 0) > 0,
																						canScrollRight: _elm_lang$core$Native_Utils.cmp(scrollWidth - clientWidth, scrollLeft + 1) > 0,
																						width: _elm_lang$core$Maybe$Just(scrollWidth)
																					}));
																		}),
																	A2(_elm_lang$core$Json_Decode$field, 'scrollWidth', _elm_lang$core$Json_Decode$float),
																	A2(_elm_lang$core$Json_Decode$field, 'clientWidth', _elm_lang$core$Json_Decode$float),
																	A2(_elm_lang$core$Json_Decode$field, 'scrollLeft', _elm_lang$core$Json_Decode$float))))),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						},
						A2(
							_elm_lang$core$List$indexedMap,
							F2(
								function (tabIndex, tab) {
									return A3(
										_debois$elm_mdl$Material_Helpers$filter,
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$classList(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'mdl-layout__tab', _1: true},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'is-active',
															_1: _elm_lang$core$Native_Utils.eq(tabIndex, config.selectedTab)
														},
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$core$Maybe$withDefault,
													_debois$elm_mdl$Material_Helpers$noAttr,
													A2(
														_elm_lang$core$Maybe$map,
														F2(
															function (x, y) {
																return y(x);
															})(tabIndex),
														config.onSelectTab)),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$core$Maybe$Just(tab),
											_1: {
												ctor: '::',
												_0: config.rippleTabs ? _elm_lang$core$Maybe$Just(
													A2(
														_elm_lang$html$Html$map,
														function (_p26) {
															return lift(
																A2(_debois$elm_mdl$Material_Layout$Ripple, tabIndex, _p26));
														},
														A2(
															_debois$elm_mdl$Material_Ripple$view,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('mdl-layout__tab-ripple-container'),
																_1: {ctor: '[]'}
															},
															A2(
																_elm_lang$core$Maybe$withDefault,
																_debois$elm_mdl$Material_Ripple$model,
																A2(_elm_lang$core$Dict$get, tabIndex, model.ripples))))) : _elm_lang$core$Maybe$Nothing,
												_1: {ctor: '[]'}
											}
										});
								}),
							_p24._0)),
					_1: {
						ctor: '::',
						_0: A2(chevron, _debois$elm_mdl$Material_Layout$Right, 100),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _debois$elm_mdl$Material_Layout$view = F4(
	function (lift, model, options, _p28) {
		var _p29 = _p28;
		var _p37 = _p29.tabs;
		var _p36 = _p29.header;
		var _p35 = _p29.drawer;
		var hasDrawer = !_elm_lang$core$Native_Utils.eq(
			_p35,
			{ctor: '[]'});
		var hasTabs = !_elm_lang$core$List$isEmpty(
			_elm_lang$core$Tuple$first(_p37));
		var hasHeader = hasTabs || (!_elm_lang$core$List$isEmpty(_p36));
		var summary = A2(_debois$elm_mdl$Material_Options_Internal$collect, _debois$elm_mdl$Material_Layout$defaultConfig, options);
		var config = summary.config;
		var drawerIsFixed = config.fixedDrawer && (!model.isSmallScreen);
		var drawerIsVisible = model.isDrawerOpen && (!drawerIsFixed);
		var _p30 = function () {
			var _p31 = {ctor: '_Tuple3', _0: _p35, _1: _p36, _2: config.fixedHeader};
			if ((_p31.ctor === '_Tuple3') && (_p31._0.ctor === '::')) {
				if ((_p31._1.ctor === '::') && (_p31._2 === true)) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Maybe$Nothing,
						_1: _elm_lang$core$Maybe$Just(
							A2(_debois$elm_mdl$Material_Layout$drawerButton, lift, drawerIsVisible))
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Maybe$Just(
							A2(_debois$elm_mdl$Material_Layout$drawerButton, lift, drawerIsVisible)),
						_1: _elm_lang$core$Maybe$Nothing
					};
				}
			} else {
				return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _elm_lang$core$Maybe$Nothing};
			}
		}();
		var contentDrawerButton = _p30._0;
		var headerDrawerButton = _p30._1;
		var tabsElems = (!hasTabs) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
			A4(_debois$elm_mdl$Material_Layout$tabsView, lift, config, model, _p37));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'mdl-layout__container', _1: true},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'has-scrolling-header',
								_1: _elm_lang$core$Native_Utils.eq(config.mode, _debois$elm_mdl$Material_Layout$Scrolling)
							},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A3(
					_debois$elm_mdl$Material_Helpers$filter,
					_elm_lang$html$Html_Keyed$node('div'),
					A2(
						_elm_lang$core$List$filterMap,
						_elm_lang$core$Basics$identity,
						{
							ctor: '::',
							_0: _elm_lang$core$Maybe$Just(
								_elm_lang$html$Html_Attributes$classList(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'mdl-layout ', _1: true},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'is-upgraded', _1: true},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'is-small-screen', _1: model.isSmallScreen},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'has-drawer', _1: hasDrawer},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'has-tabs', _1: hasTabs},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'mdl-js-layout', _1: true},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'mdl-layout--fixed-drawer', _1: config.fixedDrawer && hasDrawer},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'mdl-layout--fixed-header', _1: config.fixedHeader && hasHeader},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'mdl-layout--fixed-tabs', _1: config.fixedTabs && hasTabs},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									})),
							_1: {
								ctor: '::',
								_0: drawerIsVisible ? _elm_lang$core$Maybe$Just(
									A2(
										_elm_lang$html$Html_Events$on,
										'keydown',
										A2(
											_elm_lang$core$Json_Decode$map,
											function (_p32) {
												return lift(
													function (key) {
														return _elm_lang$core$Native_Utils.eq(key, 27) ? _debois$elm_mdl$Material_Layout$ToggleDrawer : _debois$elm_mdl$Material_Layout$NOP;
													}(_p32));
											},
											_elm_lang$html$Html_Events$keyCode))) : _elm_lang$core$Maybe$Nothing,
								_1: {ctor: '[]'}
							}
						}),
					{
						ctor: '::',
						_0: hasHeader ? _elm_lang$core$Maybe$Just(
							A2(
								F2(
									function (v0, v1) {
										return {ctor: '_Tuple2', _0: v0, _1: v1};
									}),
								'elm-mdl-header',
								A4(
									_debois$elm_mdl$Material_Layout$headerView,
									lift,
									config,
									model,
									{ctor: '_Tuple3', _0: headerDrawerButton, _1: _p36, _2: tabsElems}))) : _elm_lang$core$Maybe$Nothing,
						_1: {
							ctor: '::',
							_0: (!hasDrawer) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
								{
									ctor: '_Tuple2',
									_0: 'elm-mdl-drawer',
									_1: A3(_debois$elm_mdl$Material_Layout$drawerView, lift, drawerIsVisible, _p35)
								}),
							_1: {
								ctor: '::',
								_0: (!hasDrawer) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
									{
										ctor: '_Tuple2',
										_0: 'elm-mdl-obfuscator',
										_1: A2(_debois$elm_mdl$Material_Layout$obfuscator, lift, drawerIsVisible)
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$core$Maybe$map,
										F2(
											function (v0, v1) {
												return {ctor: '_Tuple2', _0: v0, _1: v1};
											})('elm-drawer-button'),
										contentDrawerButton),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Maybe$Just(
											A2(
												F2(
													function (v0, v1) {
														return {ctor: '_Tuple2', _0: v0, _1: v1};
													}),
												_elm_lang$core$Basics$toString(config.selectedTab),
												A3(
													_debois$elm_mdl$Material_Options$styled,
													_elm_lang$html$Html$main_,
													{
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$id(_debois$elm_mdl$Material_Layout$mainId),
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Options$cs('mdl-layout__content'),
															_1: {
																ctor: '::',
																_0: A2(
																	_debois$elm_mdl$Material_Options$when,
																	_elm_lang$core$Native_Utils.eq(config.mode, _debois$elm_mdl$Material_Layout$Scrolling) && config.fixedHeader,
																	A2(_debois$elm_mdl$Material_Options$css, 'overflow-y', 'visible')),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_debois$elm_mdl$Material_Options$when,
																		_elm_lang$core$Native_Utils.eq(config.mode, _debois$elm_mdl$Material_Layout$Scrolling) && config.fixedHeader,
																		A2(_debois$elm_mdl$Material_Options$css, 'overflow-x', 'visible')),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_debois$elm_mdl$Material_Options$when,
																			_elm_lang$core$Native_Utils.eq(config.mode, _debois$elm_mdl$Material_Layout$Scrolling) && config.fixedHeader,
																			A2(_debois$elm_mdl$Material_Options$css, 'overflow', 'visible')),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_debois$elm_mdl$Material_Options$when,
																				_debois$elm_mdl$Material_Layout$isWaterfall(config.mode),
																				function (_p33) {
																					return _debois$elm_mdl$Material_Options_Internal$attribute(
																						A2(_elm_lang$html$Html_Events$on, 'scroll', _p33));
																				}(
																					A2(
																						_elm_lang$core$Json_Decode$map,
																						function (_p34) {
																							return lift(
																								A2(_debois$elm_mdl$Material_Layout$ScrollPane, config.fixedHeader, _p34));
																						},
																						_debois$elm_dom$DOM$target(_debois$elm_dom$DOM$scrollTop)))),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													},
													_p29.main))),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _debois$elm_mdl$Material_Layout$render = A3(_debois$elm_mdl$Material_Component$render1, _debois$elm_mdl$Material_Layout$get, _debois$elm_mdl$Material_Layout$view, _debois$elm_mdl$Material_Component$LayoutMsg);

var _debois$elm_mdl$Material_Toggles$group = function (_p0) {
	return _debois$elm_mdl$Material_Options$attribute(
		_elm_lang$html$Html_Attributes$name(_p0));
};
var _debois$elm_mdl$Material_Toggles$value = function (_p1) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (b, options) {
				return _elm_lang$core$Native_Utils.update(
					options,
					{value: b});
			})(_p1));
};
var _debois$elm_mdl$Material_Toggles$disabled = _debois$elm_mdl$Material_Options_Internal$attribute(
	_elm_lang$html$Html_Attributes$disabled(true));
var _debois$elm_mdl$Material_Toggles$ripple = _debois$elm_mdl$Material_Options_Internal$option(
	function (options) {
		return _elm_lang$core$Native_Utils.update(
			options,
			{ripple: true});
	});
var _debois$elm_mdl$Material_Toggles$defaultConfig = {
	value: false,
	ripple: false,
	input: {ctor: '[]'},
	container: {ctor: '[]'}
};
var _debois$elm_mdl$Material_Toggles$defaultModel = {ripple: _debois$elm_mdl$Material_Ripple$model, isFocused: false};
var _debois$elm_mdl$Material_Toggles$_p2 = A3(
	_debois$elm_mdl$Material_Component$indexed,
	function (_) {
		return _.toggles;
	},
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.update(
				y,
				{toggles: x});
		}),
	_debois$elm_mdl$Material_Toggles$defaultModel);
var _debois$elm_mdl$Material_Toggles$get = _debois$elm_mdl$Material_Toggles$_p2._0;
var _debois$elm_mdl$Material_Toggles$set = _debois$elm_mdl$Material_Toggles$_p2._1;
var _debois$elm_mdl$Material_Toggles$Model = F2(
	function (a, b) {
		return {ripple: a, isFocused: b};
	});
var _debois$elm_mdl$Material_Toggles$Config = F4(
	function (a, b, c, d) {
		return {value: a, ripple: b, input: c, container: d};
	});
var _debois$elm_mdl$Material_Toggles$SetFocus = function (a) {
	return {ctor: 'SetFocus', _0: a};
};
var _debois$elm_mdl$Material_Toggles$Ripple = function (a) {
	return {ctor: 'Ripple', _0: a};
};
var _debois$elm_mdl$Material_Toggles$update = F2(
	function (action, model) {
		var _p3 = action;
		if (_p3.ctor === 'Ripple') {
			return A2(
				_debois$elm_mdl$Material_Helpers$map2nd,
				_elm_lang$core$Platform_Cmd$map(_debois$elm_mdl$Material_Toggles$Ripple),
				A2(
					_debois$elm_mdl$Material_Helpers$map1st,
					function (r) {
						return _elm_lang$core$Native_Utils.update(
							model,
							{ripple: r});
					},
					A2(_debois$elm_mdl$Material_Ripple$update, _p3._0, model.ripple)));
		} else {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{isFocused: _p3._0}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});
var _debois$elm_mdl$Material_Toggles$react = A4(
	_debois$elm_mdl$Material_Component$react,
	_debois$elm_mdl$Material_Toggles$get,
	_debois$elm_mdl$Material_Toggles$set,
	_debois$elm_mdl$Material_Component$TogglesMsg,
	_debois$elm_mdl$Material_Component$generalise(_debois$elm_mdl$Material_Toggles$update));
var _debois$elm_mdl$Material_Toggles$top = F5(
	function (lift, kind, model, summary, elems) {
		var cfg = summary.config;
		return A4(
			_debois$elm_mdl$Material_Options_Internal$applyContainer,
			summary,
			_elm_lang$html$Html$label,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$cs(
					A2(_elm_lang$core$Basics_ops['++'], 'mdl-', kind)),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Options$cs(
						A2(_elm_lang$core$Basics_ops['++'], 'mdl-js-', kind)),
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Options$when,
							cfg.ripple,
							_debois$elm_mdl$Material_Options$cs('mdl-js-ripple-effect')),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Options$when,
								cfg.ripple,
								_debois$elm_mdl$Material_Options$cs('mdl-js-ripple-effect--ignore-events')),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$cs('is-upgraded'),
								_1: {
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Options$when,
										cfg.value,
										_debois$elm_mdl$Material_Options$cs('is-checked')),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Options$when,
											model.isFocused,
											_debois$elm_mdl$Material_Options$cs('is-focused')),
										_1: {
											ctor: '::',
											_0: A3(
												_debois$elm_mdl$Material_Options_Internal$on1,
												'focus',
												lift,
												_debois$elm_mdl$Material_Toggles$SetFocus(true)),
											_1: {
												ctor: '::',
												_0: A3(
													_debois$elm_mdl$Material_Options_Internal$on1,
													'blur',
													lift,
													_debois$elm_mdl$Material_Toggles$SetFocus(false)),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options_Internal$attribute(
														_debois$elm_mdl$Material_Helpers$blurOn('mouseup')),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			_elm_lang$core$List$concat(
				{
					ctor: '::',
					_0: elems,
					_1: {
						ctor: '::',
						_0: cfg.ripple ? {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$map,
								function (_p4) {
									return lift(
										_debois$elm_mdl$Material_Toggles$Ripple(_p4));
								},
								A2(
									_debois$elm_mdl$Material_Ripple$view,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('mdl-switch__ripple-container mdl-js-ripple-effect mdl-ripple--center'),
										_1: {ctor: '[]'}
									},
									model.ripple)),
							_1: {ctor: '[]'}
						} : {ctor: '[]'},
						_1: {ctor: '[]'}
					}
				}));
	});
var _debois$elm_mdl$Material_Toggles$viewCheckbox = F4(
	function (lift, model, config, elems) {
		var summary = A2(_debois$elm_mdl$Material_Options_Internal$collect, _debois$elm_mdl$Material_Toggles$defaultConfig, config);
		return A5(
			_debois$elm_mdl$Material_Toggles$top,
			lift,
			'checkbox',
			model,
			summary,
			{
				ctor: '::',
				_0: A4(
					_debois$elm_mdl$Material_Options_Internal$applyInput,
					summary,
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$cs('mdl-checkbox__input'),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options_Internal$attribute(
								_elm_lang$html$Html_Attributes$type_('checkbox')),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options_Internal$attribute(
									_elm_lang$html$Html_Attributes$checked(summary.config.value)),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('mdl-checkbox__label'),
							_1: {ctor: '[]'}
						},
						elems),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('mdl-checkbox__focus-helper'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('mdl-checkbox__box-outline'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('mdl-checkbox__tick-outline'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _debois$elm_mdl$Material_Toggles$checkbox = A3(_debois$elm_mdl$Material_Component$render, _debois$elm_mdl$Material_Toggles$get, _debois$elm_mdl$Material_Toggles$viewCheckbox, _debois$elm_mdl$Material_Component$TogglesMsg);
var _debois$elm_mdl$Material_Toggles$viewSwitch = F4(
	function (lift, model, config, elems) {
		var summary = A2(_debois$elm_mdl$Material_Options_Internal$collect, _debois$elm_mdl$Material_Toggles$defaultConfig, config);
		return A5(
			_debois$elm_mdl$Material_Toggles$top,
			lift,
			'switch',
			model,
			summary,
			{
				ctor: '::',
				_0: A4(
					_debois$elm_mdl$Material_Options_Internal$applyInput,
					summary,
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$cs('mdl-switch__input'),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options_Internal$attribute(
								_elm_lang$html$Html_Attributes$type_('checkbox')),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options_Internal$attribute(
									_elm_lang$html$Html_Attributes$checked(summary.config.value)),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('mdl-switch__label'),
							_1: {ctor: '[]'}
						},
						elems),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('mdl-switch__track'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('mdl-switch__thumb'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('mdl-switch__focus-helper'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _debois$elm_mdl$Material_Toggles$switch = A3(_debois$elm_mdl$Material_Component$render, _debois$elm_mdl$Material_Toggles$get, _debois$elm_mdl$Material_Toggles$viewSwitch, _debois$elm_mdl$Material_Component$TogglesMsg);
var _debois$elm_mdl$Material_Toggles$viewRadio = F4(
	function (lift, model, config, elems) {
		var summary = A2(_debois$elm_mdl$Material_Options_Internal$collect, _debois$elm_mdl$Material_Toggles$defaultConfig, config);
		return A5(
			_debois$elm_mdl$Material_Toggles$top,
			lift,
			'radio',
			model,
			summary,
			{
				ctor: '::',
				_0: A4(
					_debois$elm_mdl$Material_Options_Internal$applyInput,
					summary,
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$cs('mdl-radio__button'),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$attribute(
								_elm_lang$html$Html_Attributes$type_('radio')),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$attribute(
									_elm_lang$html$Html_Attributes$checked(summary.config.value)),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('mdl-radio__label'),
							_1: {ctor: '[]'}
						},
						elems),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('mdl-radio__outer-circle'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('mdl-radio__inner-circle'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _debois$elm_mdl$Material_Toggles$radio = A3(_debois$elm_mdl$Material_Component$render, _debois$elm_mdl$Material_Toggles$get, _debois$elm_mdl$Material_Toggles$viewRadio, _debois$elm_mdl$Material_Component$TogglesMsg);

var _debois$elm_mdl$Material_Tooltip$element = function (elem) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		function (options) {
			return _elm_lang$core$Native_Utils.update(
				options,
				{elem: elem});
		});
};
var _debois$elm_mdl$Material_Tooltip$isTooltipClass = function (path) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function ($class) {
			return A2(_elm_lang$core$String$contains, 'mdl-tooltip', $class) ? _elm_lang$core$Json_Decode$succeed(true) : _elm_lang$core$Json_Decode$succeed(false);
		},
		A2(_elm_lang$core$Json_Decode$at, path, _debois$elm_dom$DOM$className));
};
var _debois$elm_mdl$Material_Tooltip$sibling = function (d) {
	var valid = function (path) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (res) {
				return res ? A2(_elm_lang$core$Json_Decode$at, path, d) : _elm_lang$core$Json_Decode$fail('');
			},
			_debois$elm_mdl$Material_Tooltip$isTooltipClass(path));
	};
	var createPath = function (depth) {
		var parents = A2(_elm_lang$core$List$repeat, depth, 'parentElement');
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: 'target',
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				parents,
				{
					ctor: '::',
					_0: 'nextSibling',
					_1: {ctor: '[]'}
				}));
	};
	var paths = A2(
		_elm_lang$core$List$map,
		createPath,
		A2(_elm_lang$core$List$range, 0, 4));
	return _elm_lang$core$Json_Decode$oneOf(
		A2(_elm_lang$core$List$map, valid, paths));
};
var _debois$elm_mdl$Material_Tooltip$update = F2(
	function (action, model) {
		var _p0 = action;
		if (_p0.ctor === 'Enter') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{isActive: true, domState: _p0._0}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{isActive: false}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});
var _debois$elm_mdl$Material_Tooltip$calculatePos = F2(
	function (pos, domState) {
		var getValuesFor = F2(
			function (l, r) {
				return (_elm_lang$core$Native_Utils.cmp(l + r, 0) < 0) ? {ctor: '_Tuple2', _0: 0, _1: 0} : {ctor: '_Tuple2', _0: l, _1: r};
			});
		var offsetHeight = domState.offsetHeight;
		var marginTop = -1 * (offsetHeight / 2);
		var offsetWidth = domState.offsetWidth;
		var marginLeft = -1 * (offsetWidth / 2);
		var props = domState.rect;
		var left = props.left + (props.width / 2);
		var _p1 = A2(getValuesFor, left, marginLeft);
		var newLeft = _p1._0;
		var newMarginLeft = _p1._1;
		var top = props.top + (props.height / 2);
		var _p2 = A2(getValuesFor, top, marginTop);
		var newTop = _p2._0;
		var newMarginTop = _p2._1;
		var out = function () {
			var _p3 = pos;
			switch (_p3.ctor) {
				case 'Left':
					return {left: (props.left - offsetWidth) - 10, top: newTop, marginTop: newMarginTop, marginLeft: 0};
				case 'Right':
					return {left: (props.left + props.width) + 10, top: newTop, marginTop: newMarginTop, marginLeft: 0};
				case 'Top':
					return {left: newLeft, top: (props.top - offsetHeight) - 10, marginTop: 0, marginLeft: newMarginLeft};
				default:
					return {left: newLeft, top: (props.top + props.height) + 10, marginTop: 0, marginLeft: newMarginLeft};
			}
		}();
		return out;
	});
var _debois$elm_mdl$Material_Tooltip$defaultDOMState = {
	rect: {left: 0, top: 0, width: 0, height: 0},
	offsetWidth: 0,
	offsetHeight: 0
};
var _debois$elm_mdl$Material_Tooltip$defaultPos = {left: 0, top: 0, marginLeft: 0, marginTop: 0};
var _debois$elm_mdl$Material_Tooltip$defaultModel = {isActive: false, domState: _debois$elm_mdl$Material_Tooltip$defaultDOMState};
var _debois$elm_mdl$Material_Tooltip$_p4 = A3(
	_debois$elm_mdl$Material_Component$indexed,
	function (_) {
		return _.tooltip;
	},
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.update(
				y,
				{tooltip: x});
		}),
	_debois$elm_mdl$Material_Tooltip$defaultModel);
var _debois$elm_mdl$Material_Tooltip$get = _debois$elm_mdl$Material_Tooltip$_p4._0;
var _debois$elm_mdl$Material_Tooltip$set = _debois$elm_mdl$Material_Tooltip$_p4._1;
var _debois$elm_mdl$Material_Tooltip$react = A4(
	_debois$elm_mdl$Material_Component$react,
	_debois$elm_mdl$Material_Tooltip$get,
	_debois$elm_mdl$Material_Tooltip$set,
	_debois$elm_mdl$Material_Component$TooltipMsg,
	_debois$elm_mdl$Material_Component$generalise(_debois$elm_mdl$Material_Tooltip$update));
var _debois$elm_mdl$Material_Tooltip$Model = F2(
	function (a, b) {
		return {isActive: a, domState: b};
	});
var _debois$elm_mdl$Material_Tooltip$Pos = F4(
	function (a, b, c, d) {
		return {left: a, top: b, marginLeft: c, marginTop: d};
	});
var _debois$elm_mdl$Material_Tooltip$DOMState = F3(
	function (a, b, c) {
		return {rect: a, offsetWidth: b, offsetHeight: c};
	});
var _debois$elm_mdl$Material_Tooltip$stateDecoder = A4(
	_elm_lang$core$Json_Decode$map3,
	_debois$elm_mdl$Material_Tooltip$DOMState,
	_debois$elm_dom$DOM$target(_debois$elm_dom$DOM$boundingClientRect),
	_debois$elm_mdl$Material_Tooltip$sibling(_debois$elm_dom$DOM$offsetWidth),
	_debois$elm_mdl$Material_Tooltip$sibling(_debois$elm_dom$DOM$offsetHeight));
var _debois$elm_mdl$Material_Tooltip$Config = F3(
	function (a, b, c) {
		return {size: a, position: b, elem: c};
	});
var _debois$elm_mdl$Material_Tooltip$Leave = {ctor: 'Leave'};
var _debois$elm_mdl$Material_Tooltip$onMouseLeave = F2(
	function (lift, idx) {
		return A2(
			_elm_lang$html$Html_Events$on,
			'mouseleave',
			_elm_lang$core$Json_Decode$succeed(
				lift(
					A2(_debois$elm_mdl$Material_Component$TooltipMsg, idx, _debois$elm_mdl$Material_Tooltip$Leave))));
	});
var _debois$elm_mdl$Material_Tooltip$onLeave = function (lift) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseleave',
		A2(
			_elm_lang$core$Json_Decode$map,
			lift,
			_elm_lang$core$Json_Decode$succeed(_debois$elm_mdl$Material_Tooltip$Leave)));
};
var _debois$elm_mdl$Material_Tooltip$Enter = function (a) {
	return {ctor: 'Enter', _0: a};
};
var _debois$elm_mdl$Material_Tooltip$onMouseEnter = F2(
	function (lift, idx) {
		return A2(
			_elm_lang$html$Html_Events$on,
			'mouseenter',
			A2(
				_elm_lang$core$Json_Decode$map,
				function (_p5) {
					return lift(
						A2(
							_debois$elm_mdl$Material_Component$TooltipMsg,
							idx,
							_debois$elm_mdl$Material_Tooltip$Enter(_p5)));
				},
				_debois$elm_mdl$Material_Tooltip$stateDecoder));
	});
var _debois$elm_mdl$Material_Tooltip$attach = F2(
	function (lift, index) {
		return _debois$elm_mdl$Material_Options$many(
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options_Internal$attribute(
					A2(_debois$elm_mdl$Material_Tooltip$onMouseEnter, lift, index)),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Options_Internal$attribute(
						A2(_debois$elm_mdl$Material_Tooltip$onMouseLeave, lift, index)),
					_1: {ctor: '[]'}
				}
			});
	});
var _debois$elm_mdl$Material_Tooltip$onEnter = function (lift) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseenter',
		A2(
			_elm_lang$core$Json_Decode$map,
			lift,
			A2(_elm_lang$core$Json_Decode$map, _debois$elm_mdl$Material_Tooltip$Enter, _debois$elm_mdl$Material_Tooltip$stateDecoder)));
};
var _debois$elm_mdl$Material_Tooltip$Large = {ctor: 'Large'};
var _debois$elm_mdl$Material_Tooltip$large = _debois$elm_mdl$Material_Options_Internal$option(
	function (options) {
		return _elm_lang$core$Native_Utils.update(
			options,
			{size: _debois$elm_mdl$Material_Tooltip$Large});
	});
var _debois$elm_mdl$Material_Tooltip$Default = {ctor: 'Default'};
var _debois$elm_mdl$Material_Tooltip$Bottom = {ctor: 'Bottom'};
var _debois$elm_mdl$Material_Tooltip$defaultConfig = {size: _debois$elm_mdl$Material_Tooltip$Default, position: _debois$elm_mdl$Material_Tooltip$Bottom, elem: _elm_lang$html$Html$div};
var _debois$elm_mdl$Material_Tooltip$view = F4(
	function (lift, model, options, content) {
		var px = function (f) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(f),
				'px');
		};
		var summary = A2(_debois$elm_mdl$Material_Options_Internal$collect, _debois$elm_mdl$Material_Tooltip$defaultConfig, options);
		var config = summary.config;
		var pos = model.isActive ? A2(_debois$elm_mdl$Material_Tooltip$calculatePos, config.position, model.domState) : _debois$elm_mdl$Material_Tooltip$defaultPos;
		return A3(
			_debois$elm_mdl$Material_Options$styled,
			config.elem,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$cs('mdl-tooltip'),
				_1: {
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Options$when,
						model.isActive,
						_debois$elm_mdl$Material_Options$cs('is-active')),
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Options$when,
							_elm_lang$core$Native_Utils.eq(config.size, _debois$elm_mdl$Material_Tooltip$Large),
							_debois$elm_mdl$Material_Options$cs('mdl-tooltip--large')),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Options$when,
								model.isActive,
								A2(
									_debois$elm_mdl$Material_Options$css,
									'left',
									px(pos.left))),
							_1: {
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Options$when,
									model.isActive,
									A2(
										_debois$elm_mdl$Material_Options$css,
										'margin-left',
										px(pos.marginLeft))),
								_1: {
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Options$when,
										model.isActive,
										A2(
											_debois$elm_mdl$Material_Options$css,
											'top',
											px(pos.top))),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Options$when,
											model.isActive,
											A2(
												_debois$elm_mdl$Material_Options$css,
												'margin-top',
												px(pos.marginTop))),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			},
			content);
	});
var _debois$elm_mdl$Material_Tooltip$render = A3(_debois$elm_mdl$Material_Component$render, _debois$elm_mdl$Material_Tooltip$get, _debois$elm_mdl$Material_Tooltip$view, _debois$elm_mdl$Material_Component$TooltipMsg);
var _debois$elm_mdl$Material_Tooltip$bottom = _debois$elm_mdl$Material_Options_Internal$option(
	function (options) {
		return _elm_lang$core$Native_Utils.update(
			options,
			{position: _debois$elm_mdl$Material_Tooltip$Bottom});
	});
var _debois$elm_mdl$Material_Tooltip$Top = {ctor: 'Top'};
var _debois$elm_mdl$Material_Tooltip$top = _debois$elm_mdl$Material_Options_Internal$option(
	function (options) {
		return _elm_lang$core$Native_Utils.update(
			options,
			{position: _debois$elm_mdl$Material_Tooltip$Top});
	});
var _debois$elm_mdl$Material_Tooltip$Right = {ctor: 'Right'};
var _debois$elm_mdl$Material_Tooltip$right = _debois$elm_mdl$Material_Options_Internal$option(
	function (options) {
		return _elm_lang$core$Native_Utils.update(
			options,
			{position: _debois$elm_mdl$Material_Tooltip$Right});
	});
var _debois$elm_mdl$Material_Tooltip$Left = {ctor: 'Left'};
var _debois$elm_mdl$Material_Tooltip$left = _debois$elm_mdl$Material_Options_Internal$option(
	function (options) {
		return _elm_lang$core$Native_Utils.update(
			options,
			{position: _debois$elm_mdl$Material_Tooltip$Left});
	});

var _debois$elm_mdl$Material_Tabs$activeTab = function (_p0) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (k, config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{activeTab: k});
			})(_p0));
};
var _debois$elm_mdl$Material_Tabs$onSelectTab = function (_p1) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (k, config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{
						onSelectTab: _elm_lang$core$Maybe$Just(k)
					});
			})(_p1));
};
var _debois$elm_mdl$Material_Tabs$ripple = _debois$elm_mdl$Material_Options_Internal$option(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{ripple: true});
	});
var _debois$elm_mdl$Material_Tabs$defaultConfig = {ripple: false, onSelectTab: _elm_lang$core$Maybe$Nothing, activeTab: 0};
var _debois$elm_mdl$Material_Tabs$defaultModel = {ripples: _elm_lang$core$Dict$empty};
var _debois$elm_mdl$Material_Tabs$_p2 = A3(
	_debois$elm_mdl$Material_Component$indexed,
	function (_) {
		return _.tabs;
	},
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.update(
				y,
				{tabs: x});
		}),
	_debois$elm_mdl$Material_Tabs$defaultModel);
var _debois$elm_mdl$Material_Tabs$get = _debois$elm_mdl$Material_Tabs$_p2._0;
var _debois$elm_mdl$Material_Tabs$set = _debois$elm_mdl$Material_Tabs$_p2._1;
var _debois$elm_mdl$Material_Tabs$Model = function (a) {
	return {ripples: a};
};
var _debois$elm_mdl$Material_Tabs$Config = F3(
	function (a, b, c) {
		return {ripple: a, onSelectTab: b, activeTab: c};
	});
var _debois$elm_mdl$Material_Tabs$Ripple = F2(
	function (a, b) {
		return {ctor: 'Ripple', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Tabs$update = F2(
	function (action, model) {
		var _p3 = action;
		var _p5 = _p3._0;
		var _p4 = A2(
			_debois$elm_mdl$Material_Ripple$update,
			_p3._1,
			A2(
				_elm_lang$core$Maybe$withDefault,
				_debois$elm_mdl$Material_Ripple$model,
				A2(_elm_lang$core$Dict$get, _p5, model.ripples)));
		var ripple_ = _p4._0;
		var cmd = _p4._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					ripples: A3(_elm_lang$core$Dict$insert, _p5, ripple_, model.ripples)
				}),
			_1: A2(
				_elm_lang$core$Platform_Cmd$map,
				_debois$elm_mdl$Material_Tabs$Ripple(_p5),
				cmd)
		};
	});
var _debois$elm_mdl$Material_Tabs$react = A4(
	_debois$elm_mdl$Material_Component$react,
	_debois$elm_mdl$Material_Tabs$get,
	_debois$elm_mdl$Material_Tabs$set,
	_debois$elm_mdl$Material_Component$TabsMsg,
	_debois$elm_mdl$Material_Component$generalise(_debois$elm_mdl$Material_Tabs$update));
var _debois$elm_mdl$Material_Tabs$view = F5(
	function (lift, model, options, tabs, tabContent) {
		var wrapContent = A2(
			_elm_lang$html$Html_Keyed$node,
			'div',
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'mdl-tab__panel', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'is-active', _1: true},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			});
		var summary = A2(_debois$elm_mdl$Material_Options_Internal$collect, _debois$elm_mdl$Material_Tabs$defaultConfig, options);
		var config = summary.config;
		var unwrapLabel = F2(
			function (tabIdx, _p6) {
				var _p7 = _p6;
				var _p9 = _p7._0._1;
				return A3(
					_debois$elm_mdl$Material_Options$styled,
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$cs('mdl-tabs__tab'),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Options$when,
								_elm_lang$core$Native_Utils.eq(tabIdx, config.activeTab),
								_debois$elm_mdl$Material_Options$cs('is-active')),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$core$Maybe$withDefault,
									_debois$elm_mdl$Material_Options$nop,
									A2(
										_elm_lang$core$Maybe$map,
										function (t) {
											return _debois$elm_mdl$Material_Options$onClick(
												t(tabIdx));
										},
										config.onSelectTab)),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$many(_p7._0._0),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					config.ripple ? _elm_lang$core$List$concat(
						{
							ctor: '::',
							_0: _p9,
							_1: {
								ctor: '::',
								_0: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$map,
										function (_p8) {
											return lift(
												A2(_debois$elm_mdl$Material_Tabs$Ripple, tabIdx, _p8));
										},
										A2(
											_debois$elm_mdl$Material_Ripple$view,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$classList(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'mdl-tabs__ripple-container', _1: true},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'mdl-tabs__ripple-js-effect', _1: true},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											A2(
												_elm_lang$core$Maybe$withDefault,
												_debois$elm_mdl$Material_Ripple$model,
												A2(_elm_lang$core$Dict$get, tabIdx, model.ripples)))),
									_1: {ctor: '[]'}
								},
								_1: {ctor: '[]'}
							}
						}) : _p9);
			});
		var links = A3(
			_debois$elm_mdl$Material_Options$styled,
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$cs('mdl-tabs__tab-bar'),
				_1: {ctor: '[]'}
			},
			A2(_elm_lang$core$List$indexedMap, unwrapLabel, tabs));
		return A5(
			_debois$elm_mdl$Material_Options_Internal$apply,
			summary,
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$cs('mdl-tabs'),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Options$cs('mdl-js-tabs'),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$cs('is-upgraded'),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Options$when,
								config.ripple,
								_debois$elm_mdl$Material_Options$cs('mdl-js-ripple-effect')),
							_1: {
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Options$when,
									config.ripple,
									_debois$elm_mdl$Material_Options$cs('mdl-js-ripple-effect--ignore-events')),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			},
			{ctor: '[]'},
			{
				ctor: '::',
				_0: links,
				_1: {
					ctor: '::',
					_0: wrapContent(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Basics$toString(config.activeTab),
								_1: A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									tabContent)
							},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _debois$elm_mdl$Material_Tabs$render = A3(_debois$elm_mdl$Material_Component$render, _debois$elm_mdl$Material_Tabs$get, _debois$elm_mdl$Material_Tabs$view, _debois$elm_mdl$Material_Component$TabsMsg);
var _debois$elm_mdl$Material_Tabs$Label = function (a) {
	return {ctor: 'Label', _0: a};
};
var _debois$elm_mdl$Material_Tabs$label = F2(
	function (p, c) {
		return _debois$elm_mdl$Material_Tabs$Label(
			{ctor: '_Tuple2', _0: p, _1: c});
	});
var _debois$elm_mdl$Material_Tabs$textLabel = F2(
	function (p, c) {
		return A2(
			_debois$elm_mdl$Material_Tabs$label,
			p,
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(c),
				_1: {ctor: '[]'}
			});
	});

var _debois$elm_mdl$Material$init = function (lift) {
	return _debois$elm_mdl$Material_Layout$sub0(lift);
};
var _debois$elm_mdl$Material$subscriptions = F2(
	function (lift, model) {
		return _elm_lang$core$Platform_Sub$batch(
			{
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Layout$subs, lift, model.mdl),
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Menu$subs, lift, model.mdl),
					_1: {ctor: '[]'}
				}
			});
	});
var _debois$elm_mdl$Material$update_ = F3(
	function (lift, msg, store) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'ButtonMsg':
				return A4(_debois$elm_mdl$Material_Button$react, lift, _p0._1, _p0._0, store);
			case 'TextfieldMsg':
				return A4(_debois$elm_mdl$Material_Textfield$react, lift, _p0._1, _p0._0, store);
			case 'MenuMsg':
				var _p2 = _p0._0;
				return A4(
					_debois$elm_mdl$Material_Menu$react,
					function (_p1) {
						return lift(
							A2(_debois$elm_mdl$Material_Component$MenuMsg, _p2, _p1));
					},
					_p0._1,
					_p2,
					store);
			case 'LayoutMsg':
				return A3(
					_debois$elm_mdl$Material_Layout$react,
					function (_p3) {
						return lift(
							_debois$elm_mdl$Material_Component$LayoutMsg(_p3));
					},
					_p0._0,
					store);
			case 'TogglesMsg':
				return A4(_debois$elm_mdl$Material_Toggles$react, lift, _p0._1, _p0._0, store);
			case 'TooltipMsg':
				return A4(_debois$elm_mdl$Material_Tooltip$react, lift, _p0._1, _p0._0, store);
			case 'TabsMsg':
				return A4(_debois$elm_mdl$Material_Tabs$react, lift, _p0._1, _p0._0, store);
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Nothing,
					_1: _debois$elm_mdl$Material_Dispatch$forward(_p0._0)
				};
		}
	});
var _debois$elm_mdl$Material$update = F3(
	function (lift, msg, container) {
		return A2(
			_debois$elm_mdl$Material_Helpers$map1st,
			_elm_lang$core$Maybe$withDefault(container),
			A2(
				_debois$elm_mdl$Material_Helpers$map1st,
				_elm_lang$core$Maybe$map(
					function (mdl) {
						return _elm_lang$core$Native_Utils.update(
							container,
							{mdl: mdl});
					}),
				A3(
					_debois$elm_mdl$Material$update_,
					lift,
					msg,
					function (_) {
						return _.mdl;
					}(container))));
	});
var _debois$elm_mdl$Material$model = {button: _elm_lang$core$Dict$empty, textfield: _elm_lang$core$Dict$empty, menu: _elm_lang$core$Dict$empty, snackbar: _elm_lang$core$Maybe$Nothing, layout: _debois$elm_mdl$Material_Layout$defaultModel, toggles: _elm_lang$core$Dict$empty, tooltip: _elm_lang$core$Dict$empty, tabs: _elm_lang$core$Dict$empty};
var _debois$elm_mdl$Material$Model = F8(
	function (a, b, c, d, e, f, g, h) {
		return {button: a, textfield: b, menu: c, snackbar: d, layout: e, toggles: f, tooltip: g, tabs: h};
	});

var _debois$elm_mdl$Material_Chip$hasValue = function (m) {
	var _p0 = m;
	if (_p0.ctor === 'Just') {
		return true;
	} else {
		return false;
	}
};
var _debois$elm_mdl$Material_Chip$renderItem = function (item) {
	var _p1 = item;
	switch (_p1.ctor) {
		case 'Contact':
			return A3(
				_debois$elm_mdl$Material_Options$styled,
				_p1._0,
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Options$cs('mdl-chip__contact'),
					_1: _p1._1
				},
				_p1._2);
		case 'Text':
			return A3(
				_debois$elm_mdl$Material_Options$styled,
				_elm_lang$html$Html$span,
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Options$cs('mdl-chip__text'),
					_1: _p1._0
				},
				_p1._1);
		default:
			return A3(
				_debois$elm_mdl$Material_Options$styled,
				_p1._0,
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Options$cs('mdl-chip__action'),
					_1: _p1._1
				},
				_p1._2);
	}
};
var _debois$elm_mdl$Material_Chip$priority = function (item) {
	var _p2 = item;
	switch (_p2.ctor) {
		case 'Contact':
			return 0;
		case 'Text':
			return 1;
		default:
			return 2;
	}
};
var _debois$elm_mdl$Material_Chip$deleteClick = function (msg) {
	return A3(
		_debois$elm_mdl$Material_Options$onWithOptions,
		'click',
		{stopPropagation: true, preventDefault: true},
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _debois$elm_mdl$Material_Chip$deleteLink = function (_p3) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (link, config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{
						deleteLink: _elm_lang$core$Maybe$Just(
							_elm_lang$html$Html_Attributes$href(link))
					});
			})(_p3));
};
var _debois$elm_mdl$Material_Chip$deleteIcon = function (_p4) {
	return _debois$elm_mdl$Material_Options_Internal$option(
		F2(
			function (icon, config) {
				return _elm_lang$core$Native_Utils.update(
					config,
					{
						deleteIcon: _elm_lang$core$Maybe$Just(icon)
					});
			})(_p4));
};
var _debois$elm_mdl$Material_Chip$defaultConfig = {deleteIcon: _elm_lang$core$Maybe$Nothing, deleteLink: _elm_lang$core$Maybe$Nothing, deleteClick: _elm_lang$core$Maybe$Nothing};
var _debois$elm_mdl$Material_Chip$Config = F3(
	function (a, b, c) {
		return {deleteIcon: a, deleteLink: b, deleteClick: c};
	});
var _debois$elm_mdl$Material_Chip$Action = F3(
	function (a, b, c) {
		return {ctor: 'Action', _0: a, _1: b, _2: c};
	});
var _debois$elm_mdl$Material_Chip$action = _debois$elm_mdl$Material_Chip$Action;
var _debois$elm_mdl$Material_Chip$getActionElement = function (config) {
	var click = function () {
		var _p5 = config.deleteClick;
		if (_p5.ctor === 'Just') {
			return _debois$elm_mdl$Material_Options_Internal$attribute(_p5._0);
		} else {
			return _debois$elm_mdl$Material_Options$nop;
		}
	}();
	var link = function () {
		var _p6 = config.deleteLink;
		if (_p6.ctor === 'Just') {
			return _debois$elm_mdl$Material_Options_Internal$attribute(_p6._0);
		} else {
			return _debois$elm_mdl$Material_Options$nop;
		}
	}();
	var hasClick = _debois$elm_mdl$Material_Chip$hasValue(config.deleteClick);
	var hasLink = _debois$elm_mdl$Material_Chip$hasValue(config.deleteLink);
	var actionElement = hasLink ? _elm_lang$html$Html$a : _elm_lang$html$Html$span;
	var hasIcon = _debois$elm_mdl$Material_Chip$hasValue(config.deleteIcon);
	var icon = hasIcon ? A2(_elm_lang$core$Maybe$withDefault, '', config.deleteIcon) : ((hasLink || hasClick) ? A2(_elm_lang$core$Maybe$withDefault, 'cancel', config.deleteIcon) : '');
	var isDeletable = hasIcon || (hasLink || hasClick);
	return isDeletable ? _elm_lang$core$Maybe$Just(
		A3(
			_debois$elm_mdl$Material_Chip$action,
			actionElement,
			{
				ctor: '::',
				_0: link,
				_1: {
					ctor: '::',
					_0: click,
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Icon$view,
					icon,
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			})) : _elm_lang$core$Maybe$Nothing;
};
var _debois$elm_mdl$Material_Chip$chip = F3(
	function (element, props, items) {
		var isContact = A2(
			_elm_lang$core$List$any,
			function (x) {
				return _elm_lang$core$Native_Utils.eq(
					_debois$elm_mdl$Material_Chip$priority(x),
					0);
			},
			items);
		var summary = A2(_debois$elm_mdl$Material_Options_Internal$collect, _debois$elm_mdl$Material_Chip$defaultConfig, props);
		var config = summary.config;
		var action = _debois$elm_mdl$Material_Chip$getActionElement(config);
		var isDeletable = _debois$elm_mdl$Material_Chip$hasValue(action);
		var withIcon = A2(
			_elm_lang$core$Basics_ops['++'],
			function () {
				var _p7 = action;
				if (_p7.ctor === 'Just') {
					return {
						ctor: '::',
						_0: _p7._0,
						_1: {ctor: '[]'}
					};
				} else {
					return {ctor: '[]'};
				}
			}(),
			items);
		var content = A2(
			_elm_lang$core$List$map,
			_debois$elm_mdl$Material_Chip$renderItem,
			A2(_elm_lang$core$List$sortBy, _debois$elm_mdl$Material_Chip$priority, withIcon));
		return A3(
			_debois$elm_mdl$Material_Options$styled,
			element,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Options$cs('mdl-chip'),
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Options$when,
							isContact,
							_debois$elm_mdl$Material_Options$cs('mdl-chip--contact')),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Options$when,
								isDeletable,
								_debois$elm_mdl$Material_Options$cs('mdl-chip--deletable')),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options_Internal$attribute(
									_debois$elm_mdl$Material_Helpers$blurOn('mouseup')),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options_Internal$attribute(
										_debois$elm_mdl$Material_Helpers$blurOn('mouseleave')),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options_Internal$attribute(
											_debois$elm_mdl$Material_Helpers$blurOn('touchend')),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				},
				props),
			content);
	});
var _debois$elm_mdl$Material_Chip$button = function (props) {
	return A2(
		_debois$elm_mdl$Material_Chip$chip,
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Options_Internal$attribute(
				_elm_lang$html$Html_Attributes$type_('button')),
			_1: props
		});
};
var _debois$elm_mdl$Material_Chip$span = _debois$elm_mdl$Material_Chip$chip(_elm_lang$html$Html$span);
var _debois$elm_mdl$Material_Chip$Text = F2(
	function (a, b) {
		return {ctor: 'Text', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Chip$content = _debois$elm_mdl$Material_Chip$Text;
var _debois$elm_mdl$Material_Chip$text = F2(
	function (props, txt) {
		return A2(
			_debois$elm_mdl$Material_Chip$Text,
			props,
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(txt),
				_1: {ctor: '[]'}
			});
	});
var _debois$elm_mdl$Material_Chip$Contact = F3(
	function (a, b, c) {
		return {ctor: 'Contact', _0: a, _1: b, _2: c};
	});
var _debois$elm_mdl$Material_Chip$contact = _debois$elm_mdl$Material_Chip$Contact;

//import Maybe, Native.List //

var _elm_lang$core$Native_Regex = function() {

function escape(str)
{
	return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function caseInsensitive(re)
{
	return new RegExp(re.source, 'gi');
}
function regex(raw)
{
	return new RegExp(raw, 'g');
}

function contains(re, string)
{
	return string.match(re) !== null;
}

function find(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex === re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		out.push({
			match: result[0],
			submatches: _elm_lang$core$Native_List.fromArray(subs),
			index: result.index,
			number: number
		});
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

function replace(n, re, replacer, string)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		return replacer({
			match: match,
			submatches: _elm_lang$core$Native_List.fromArray(submatches),
			index: arguments[arguments.length - 2],
			number: count
		});
	}
	return string.replace(re, jsReplacer);
}

function split(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	if (n === Infinity)
	{
		return _elm_lang$core$Native_List.fromArray(str.split(re));
	}
	var string = str;
	var result;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		if (!(result = re.exec(string))) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

return {
	regex: regex,
	caseInsensitive: caseInsensitive,
	escape: escape,

	contains: F2(contains),
	find: F3(find),
	replace: F4(replace),
	split: F3(split)
};

}();

var _elm_lang$core$Regex$split = _elm_lang$core$Native_Regex.split;
var _elm_lang$core$Regex$replace = _elm_lang$core$Native_Regex.replace;
var _elm_lang$core$Regex$find = _elm_lang$core$Native_Regex.find;
var _elm_lang$core$Regex$contains = _elm_lang$core$Native_Regex.contains;
var _elm_lang$core$Regex$caseInsensitive = _elm_lang$core$Native_Regex.caseInsensitive;
var _elm_lang$core$Regex$regex = _elm_lang$core$Native_Regex.regex;
var _elm_lang$core$Regex$escape = _elm_lang$core$Native_Regex.escape;
var _elm_lang$core$Regex$Match = F4(
	function (a, b, c, d) {
		return {match: a, submatches: b, index: c, number: d};
	});
var _elm_lang$core$Regex$Regex = {ctor: 'Regex'};
var _elm_lang$core$Regex$AtMost = function (a) {
	return {ctor: 'AtMost', _0: a};
};
var _elm_lang$core$Regex$All = {ctor: 'All'};

var _debois$elm_mdl$Material_List$action2 = _debois$elm_mdl$Material_Options$cs('mdl-list__item-secondary-action');
var _debois$elm_mdl$Material_List$info2 = function (options) {
	return _debois$elm_mdl$Material_Options$span(
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Options$cs('mdl-list__item-secondary-info'),
			_1: options
		});
};
var _debois$elm_mdl$Material_List$content2 = function (options) {
	return _debois$elm_mdl$Material_Options$span(
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Options$cs('mdl-list__item-secondary-content'),
			_1: options
		});
};
var _debois$elm_mdl$Material_List$subtitle = function (options) {
	return _debois$elm_mdl$Material_Options$span(
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Options$cs('mdl-list__item-sub-title'),
			_1: options
		});
};
var _debois$elm_mdl$Material_List$body = function (options) {
	return _debois$elm_mdl$Material_Options$span(
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Options$cs('mdl-list__item-text-body'),
			_1: options
		});
};
var _debois$elm_mdl$Material_List$icon = F2(
	function (i, options) {
		return A2(
			_debois$elm_mdl$Material_Icon$view,
			i,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$cs('mdl-list__item-icon'),
				_1: options
			});
	});
var _debois$elm_mdl$Material_List$avatar = _debois$elm_mdl$Material_Options$cs('mdl-list__item-avatar');
var _debois$elm_mdl$Material_List$avatarImage = F2(
	function (src, options) {
		return A4(
			_debois$elm_mdl$Material_Options$styled_,
			_elm_lang$html$Html$img,
			{ctor: '::', _0: _debois$elm_mdl$Material_List$avatar, _1: options},
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$src(src),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'});
	});
var _debois$elm_mdl$Material_List$avatarIcon = F2(
	function (i, options) {
		return A2(
			_debois$elm_mdl$Material_Options$div,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$center,
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Options$many(options),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_List$avatar,
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Icon$i(i),
				_1: {ctor: '[]'}
			});
	});
var _debois$elm_mdl$Material_List$content = function (options) {
	return _debois$elm_mdl$Material_Options$span(
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Options$cs('mdl-list__item-primary-content'),
			_1: options
		});
};
var _debois$elm_mdl$Material_List$withSubtitle = _debois$elm_mdl$Material_Options$cs('mdl-list__item--two-line');
var _debois$elm_mdl$Material_List$withBody = _debois$elm_mdl$Material_Options$cs('mdl-list__item--three-line');
var _debois$elm_mdl$Material_List$li = function (options) {
	return A2(
		_debois$elm_mdl$Material_Options$styled,
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Options$cs('mdl-list__item'),
			_1: options
		});
};
var _debois$elm_mdl$Material_List$ul = function (options) {
	return A2(
		_debois$elm_mdl$Material_Options$styled,
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Options$cs('mdl-list'),
			_1: options
		});
};

//import Result //

var _elm_lang$core$Native_Date = function() {

function fromString(str)
{
	var date = new Date(str);
	return isNaN(date.getTime())
		? _elm_lang$core$Result$Err('Unable to parse \'' + str + '\' as a date. Dates must be in the ISO 8601 format.')
		: _elm_lang$core$Result$Ok(date);
}

var dayTable = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var monthTable =
	['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
	 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];


return {
	fromString: fromString,
	year: function(d) { return d.getFullYear(); },
	month: function(d) { return { ctor: monthTable[d.getMonth()] }; },
	day: function(d) { return d.getDate(); },
	hour: function(d) { return d.getHours(); },
	minute: function(d) { return d.getMinutes(); },
	second: function(d) { return d.getSeconds(); },
	millisecond: function(d) { return d.getMilliseconds(); },
	toTime: function(d) { return d.getTime(); },
	fromTime: function(t) { return new Date(t); },
	dayOfWeek: function(d) { return { ctor: dayTable[d.getDay()] }; }
};

}();
var _elm_lang$core$Date$millisecond = _elm_lang$core$Native_Date.millisecond;
var _elm_lang$core$Date$second = _elm_lang$core$Native_Date.second;
var _elm_lang$core$Date$minute = _elm_lang$core$Native_Date.minute;
var _elm_lang$core$Date$hour = _elm_lang$core$Native_Date.hour;
var _elm_lang$core$Date$dayOfWeek = _elm_lang$core$Native_Date.dayOfWeek;
var _elm_lang$core$Date$day = _elm_lang$core$Native_Date.day;
var _elm_lang$core$Date$month = _elm_lang$core$Native_Date.month;
var _elm_lang$core$Date$year = _elm_lang$core$Native_Date.year;
var _elm_lang$core$Date$fromTime = _elm_lang$core$Native_Date.fromTime;
var _elm_lang$core$Date$toTime = _elm_lang$core$Native_Date.toTime;
var _elm_lang$core$Date$fromString = _elm_lang$core$Native_Date.fromString;
var _elm_lang$core$Date$now = A2(_elm_lang$core$Task$map, _elm_lang$core$Date$fromTime, _elm_lang$core$Time$now);
var _elm_lang$core$Date$Date = {ctor: 'Date'};
var _elm_lang$core$Date$Sun = {ctor: 'Sun'};
var _elm_lang$core$Date$Sat = {ctor: 'Sat'};
var _elm_lang$core$Date$Fri = {ctor: 'Fri'};
var _elm_lang$core$Date$Thu = {ctor: 'Thu'};
var _elm_lang$core$Date$Wed = {ctor: 'Wed'};
var _elm_lang$core$Date$Tue = {ctor: 'Tue'};
var _elm_lang$core$Date$Mon = {ctor: 'Mon'};
var _elm_lang$core$Date$Dec = {ctor: 'Dec'};
var _elm_lang$core$Date$Nov = {ctor: 'Nov'};
var _elm_lang$core$Date$Oct = {ctor: 'Oct'};
var _elm_lang$core$Date$Sep = {ctor: 'Sep'};
var _elm_lang$core$Date$Aug = {ctor: 'Aug'};
var _elm_lang$core$Date$Jul = {ctor: 'Jul'};
var _elm_lang$core$Date$Jun = {ctor: 'Jun'};
var _elm_lang$core$Date$May = {ctor: 'May'};
var _elm_lang$core$Date$Apr = {ctor: 'Apr'};
var _elm_lang$core$Date$Mar = {ctor: 'Mar'};
var _elm_lang$core$Date$Feb = {ctor: 'Feb'};
var _elm_lang$core$Date$Jan = {ctor: 'Jan'};

var _elm_lang$core$Set$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_elm_lang$core$Dict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _elm_lang$core$Set$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _elm_lang$core$Set$toList = function (_p6) {
	var _p7 = _p6;
	return _elm_lang$core$Dict$keys(_p7._0);
};
var _elm_lang$core$Set$size = function (_p8) {
	var _p9 = _p8;
	return _elm_lang$core$Dict$size(_p9._0);
};
var _elm_lang$core$Set$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Dict$member, k, _p11._0);
	});
var _elm_lang$core$Set$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$Dict$isEmpty(_p13._0);
};
var _elm_lang$core$Set$Set_elm_builtin = function (a) {
	return {ctor: 'Set_elm_builtin', _0: a};
};
var _elm_lang$core$Set$empty = _elm_lang$core$Set$Set_elm_builtin(_elm_lang$core$Dict$empty);
var _elm_lang$core$Set$singleton = function (k) {
	return _elm_lang$core$Set$Set_elm_builtin(
		A2(
			_elm_lang$core$Dict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Set$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _elm_lang$core$Set$Set_elm_builtin(
			A3(
				_elm_lang$core$Dict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _elm_lang$core$Set$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$insert, _elm_lang$core$Set$empty, xs);
};
var _elm_lang$core$Set$map = F2(
	function (f, s) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_elm_lang$core$Set$toList(s)));
	});
var _elm_lang$core$Set$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$remove, k, _p17._0));
	});
var _elm_lang$core$Set$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$union, _p20._0, _p21._0));
	});
var _elm_lang$core$Set$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$intersect, _p24._0, _p25._0));
	});
var _elm_lang$core$Set$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$diff, _p28._0, _p29._0));
	});
var _elm_lang$core$Set$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(
				_elm_lang$core$Dict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _elm_lang$core$Set$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_elm_lang$core$Dict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Set$Set_elm_builtin(p1),
			_1: _elm_lang$core$Set$Set_elm_builtin(p2)
		};
	});

var _elm_community$json_extra$Json_Decode_Extra$when = F3(
	function (checkDecoder, check, passDecoder) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (checkVal) {
				return check(checkVal) ? passDecoder : _elm_lang$core$Json_Decode$fail(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Check failed with input `',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(checkVal),
							'`')));
			},
			checkDecoder);
	});
var _elm_community$json_extra$Json_Decode_Extra$combine = A2(
	_elm_lang$core$List$foldr,
	_elm_lang$core$Json_Decode$map2(
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			})),
	_elm_lang$core$Json_Decode$succeed(
		{ctor: '[]'}));
var _elm_community$json_extra$Json_Decode_Extra$collection = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (length) {
			return _elm_community$json_extra$Json_Decode_Extra$combine(
				A2(
					_elm_lang$core$List$map,
					function (index) {
						return A2(
							_elm_lang$core$Json_Decode$field,
							_elm_lang$core$Basics$toString(index),
							decoder);
					},
					A2(_elm_lang$core$List$range, 0, length - 1)));
		},
		A2(_elm_lang$core$Json_Decode$field, 'length', _elm_lang$core$Json_Decode$int));
};
var _elm_community$json_extra$Json_Decode_Extra$fromResult = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Json_Decode$succeed(_p0._0);
	} else {
		return _elm_lang$core$Json_Decode$fail(_p0._0);
	}
};
var _elm_community$json_extra$Json_Decode_Extra$parseInt = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p1) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$String$toInt(_p1));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$parseFloat = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p2) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$String$toFloat(_p2));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$doubleEncoded = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (_p3) {
			return _elm_community$json_extra$Json_Decode_Extra$fromResult(
				A2(_elm_lang$core$Json_Decode$decodeString, decoder, _p3));
		},
		_elm_lang$core$Json_Decode$string);
};
var _elm_community$json_extra$Json_Decode_Extra$keys = A2(
	_elm_lang$core$Json_Decode$map,
	A2(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, acc) {
				var _p5 = _p4;
				return {ctor: '::', _0: _p5._0, _1: acc};
			}),
		{ctor: '[]'}),
	_elm_lang$core$Json_Decode$keyValuePairs(
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'})));
var _elm_community$json_extra$Json_Decode_Extra$sequenceHelp = F2(
	function (decoders, jsonValues) {
		return (!_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(jsonValues),
			_elm_lang$core$List$length(decoders))) ? _elm_lang$core$Json_Decode$fail('Number of decoders does not match number of values') : _elm_community$json_extra$Json_Decode_Extra$fromResult(
			A3(
				_elm_lang$core$List$foldr,
				_elm_lang$core$Result$map2(
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})),
				_elm_lang$core$Result$Ok(
					{ctor: '[]'}),
				A3(_elm_lang$core$List$map2, _elm_lang$core$Json_Decode$decodeValue, decoders, jsonValues)));
	});
var _elm_community$json_extra$Json_Decode_Extra$sequence = function (decoders) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		_elm_community$json_extra$Json_Decode_Extra$sequenceHelp(decoders),
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value));
};
var _elm_community$json_extra$Json_Decode_Extra$indexedList = function (indexedDecoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (values) {
			return _elm_community$json_extra$Json_Decode_Extra$sequence(
				A2(
					_elm_lang$core$List$map,
					indexedDecoder,
					A2(
						_elm_lang$core$List$range,
						0,
						_elm_lang$core$List$length(values) - 1)));
		},
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value));
};
var _elm_community$json_extra$Json_Decode_Extra$optionalField = F2(
	function (fieldName, decoder) {
		var finishDecoding = function (json) {
			var _p6 = A2(
				_elm_lang$core$Json_Decode$decodeValue,
				A2(_elm_lang$core$Json_Decode$field, fieldName, _elm_lang$core$Json_Decode$value),
				json);
			if (_p6.ctor === 'Ok') {
				return A2(
					_elm_lang$core$Json_Decode$map,
					_elm_lang$core$Maybe$Just,
					A2(_elm_lang$core$Json_Decode$field, fieldName, decoder));
			} else {
				return _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Maybe$Nothing);
			}
		};
		return A2(_elm_lang$core$Json_Decode$andThen, finishDecoding, _elm_lang$core$Json_Decode$value);
	});
var _elm_community$json_extra$Json_Decode_Extra$withDefault = F2(
	function (fallback, decoder) {
		return A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$Maybe$withDefault(fallback),
			_elm_lang$core$Json_Decode$maybe(decoder));
	});
var _elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples = F2(
	function (keyDecoder, tuples) {
		var _p7 = tuples;
		if (_p7.ctor === '[]') {
			return _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Dict$empty);
		} else {
			var _p8 = A2(_elm_lang$core$Json_Decode$decodeString, keyDecoder, _p7._0._0);
			if (_p8.ctor === 'Ok') {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					function (_p9) {
						return _elm_lang$core$Json_Decode$succeed(
							A3(_elm_lang$core$Dict$insert, _p8._0, _p7._0._1, _p9));
					},
					A2(_elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples, keyDecoder, _p7._1));
			} else {
				return _elm_lang$core$Json_Decode$fail(_p8._0);
			}
		}
	});
var _elm_community$json_extra$Json_Decode_Extra$dict2 = F2(
	function (keyDecoder, valueDecoder) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			_elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples(keyDecoder),
			_elm_lang$core$Json_Decode$keyValuePairs(valueDecoder));
	});
var _elm_community$json_extra$Json_Decode_Extra$set = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Set$fromList,
		_elm_lang$core$Json_Decode$list(decoder));
};
var _elm_community$json_extra$Json_Decode_Extra$date = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p10) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$Date$fromString(_p10));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$andMap = _elm_lang$core$Json_Decode$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _elm_community$json_extra$Json_Decode_Extra_ops = _elm_community$json_extra$Json_Decode_Extra_ops || {};
_elm_community$json_extra$Json_Decode_Extra_ops['|:'] = _elm_lang$core$Basics$flip(_elm_community$json_extra$Json_Decode_Extra$andMap);

var _elm_community$json_extra$Json_Encode_Extra$dict = F3(
	function (toKey, toValue, dict) {
		return _elm_lang$core$Json_Encode$object(
			A2(
				_elm_lang$core$List$map,
				function (_p0) {
					var _p1 = _p0;
					return {
						ctor: '_Tuple2',
						_0: toKey(_p1._0),
						_1: toValue(_p1._1)
					};
				},
				_elm_lang$core$Dict$toList(dict)));
	});
var _elm_community$json_extra$Json_Encode_Extra$maybe = function (encoder) {
	return function (_p2) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Json_Encode$null,
			A2(_elm_lang$core$Maybe$map, encoder, _p2));
	};
};

var _elm_community$list_extra$List_Extra$greedyGroupsOfWithStep = F3(
	function (size, step, xs) {
		var okayXs = _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(xs),
			0) > 0;
		var okayArgs = (_elm_lang$core$Native_Utils.cmp(size, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(step, 0) > 0);
		var xs_ = A2(_elm_lang$core$List$drop, step, xs);
		var group = A2(_elm_lang$core$List$take, size, xs);
		return (okayArgs && okayXs) ? {
			ctor: '::',
			_0: group,
			_1: A3(_elm_community$list_extra$List_Extra$greedyGroupsOfWithStep, size, step, xs_)
		} : {ctor: '[]'};
	});
var _elm_community$list_extra$List_Extra$greedyGroupsOf = F2(
	function (size, xs) {
		return A3(_elm_community$list_extra$List_Extra$greedyGroupsOfWithStep, size, size, xs);
	});
var _elm_community$list_extra$List_Extra$groupsOfWithStep = F3(
	function (size, step, xs) {
		var okayArgs = (_elm_lang$core$Native_Utils.cmp(size, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(step, 0) > 0);
		var xs_ = A2(_elm_lang$core$List$drop, step, xs);
		var group = A2(_elm_lang$core$List$take, size, xs);
		var okayLength = _elm_lang$core$Native_Utils.eq(
			size,
			_elm_lang$core$List$length(group));
		return (okayArgs && okayLength) ? {
			ctor: '::',
			_0: group,
			_1: A3(_elm_community$list_extra$List_Extra$groupsOfWithStep, size, step, xs_)
		} : {ctor: '[]'};
	});
var _elm_community$list_extra$List_Extra$groupsOf = F2(
	function (size, xs) {
		return A3(_elm_community$list_extra$List_Extra$groupsOfWithStep, size, size, xs);
	});
var _elm_community$list_extra$List_Extra$zip5 = _elm_lang$core$List$map5(
	F5(
		function (v0, v1, v2, v3, v4) {
			return {ctor: '_Tuple5', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4};
		}));
var _elm_community$list_extra$List_Extra$zip4 = _elm_lang$core$List$map4(
	F4(
		function (v0, v1, v2, v3) {
			return {ctor: '_Tuple4', _0: v0, _1: v1, _2: v2, _3: v3};
		}));
var _elm_community$list_extra$List_Extra$zip3 = _elm_lang$core$List$map3(
	F3(
		function (v0, v1, v2) {
			return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
		}));
var _elm_community$list_extra$List_Extra$zip = _elm_lang$core$List$map2(
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}));
var _elm_community$list_extra$List_Extra$isPrefixOf = F2(
	function (prefix, xs) {
		var _p0 = {ctor: '_Tuple2', _0: prefix, _1: xs};
		if (_p0._0.ctor === '[]') {
			return true;
		} else {
			if (_p0._1.ctor === '[]') {
				return false;
			} else {
				return _elm_lang$core$Native_Utils.eq(_p0._0._0, _p0._1._0) && A2(_elm_community$list_extra$List_Extra$isPrefixOf, _p0._0._1, _p0._1._1);
			}
		}
	});
var _elm_community$list_extra$List_Extra$isSuffixOf = F2(
	function (suffix, xs) {
		return A2(
			_elm_community$list_extra$List_Extra$isPrefixOf,
			_elm_lang$core$List$reverse(suffix),
			_elm_lang$core$List$reverse(xs));
	});
var _elm_community$list_extra$List_Extra$selectSplit = function (xs) {
	var _p1 = xs;
	if (_p1.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p5 = _p1._1;
		var _p4 = _p1._0;
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _p4,
				_2: _p5
			},
			_1: A2(
				_elm_lang$core$List$map,
				function (_p2) {
					var _p3 = _p2;
					return {
						ctor: '_Tuple3',
						_0: {ctor: '::', _0: _p4, _1: _p3._0},
						_1: _p3._1,
						_2: _p3._2
					};
				},
				_elm_community$list_extra$List_Extra$selectSplit(_p5))
		};
	}
};
var _elm_community$list_extra$List_Extra$select = function (xs) {
	var _p6 = xs;
	if (_p6.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p10 = _p6._1;
		var _p9 = _p6._0;
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _p9, _1: _p10},
			_1: A2(
				_elm_lang$core$List$map,
				function (_p7) {
					var _p8 = _p7;
					return {
						ctor: '_Tuple2',
						_0: _p8._0,
						_1: {ctor: '::', _0: _p9, _1: _p8._1}
					};
				},
				_elm_community$list_extra$List_Extra$select(_p10))
		};
	}
};
var _elm_community$list_extra$List_Extra$tailsHelp = F2(
	function (e, list) {
		var _p11 = list;
		if (_p11.ctor === '::') {
			var _p12 = _p11._0;
			return {
				ctor: '::',
				_0: {ctor: '::', _0: e, _1: _p12},
				_1: {ctor: '::', _0: _p12, _1: _p11._1}
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _elm_community$list_extra$List_Extra$tails = A2(
	_elm_lang$core$List$foldr,
	_elm_community$list_extra$List_Extra$tailsHelp,
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _elm_community$list_extra$List_Extra$isInfixOf = F2(
	function (infix, xs) {
		return A2(
			_elm_lang$core$List$any,
			_elm_community$list_extra$List_Extra$isPrefixOf(infix),
			_elm_community$list_extra$List_Extra$tails(xs));
	});
var _elm_community$list_extra$List_Extra$inits = A2(
	_elm_lang$core$List$foldr,
	F2(
		function (e, acc) {
			return {
				ctor: '::',
				_0: {ctor: '[]'},
				_1: A2(
					_elm_lang$core$List$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(e),
					acc)
			};
		}),
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _elm_community$list_extra$List_Extra$groupWhileTransitively = F2(
	function (cmp, xs_) {
		var _p13 = xs_;
		if (_p13.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p13._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: _p13._0,
						_1: {ctor: '[]'}
					},
					_1: {ctor: '[]'}
				};
			} else {
				var _p15 = _p13._0;
				var _p14 = A2(_elm_community$list_extra$List_Extra$groupWhileTransitively, cmp, _p13._1);
				if (_p14.ctor === '::') {
					return A2(cmp, _p15, _p13._1._0) ? {
						ctor: '::',
						_0: {ctor: '::', _0: _p15, _1: _p14._0},
						_1: _p14._1
					} : {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: _p15,
							_1: {ctor: '[]'}
						},
						_1: _p14
					};
				} else {
					return {ctor: '[]'};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$stripPrefix = F2(
	function (prefix, xs) {
		var step = F2(
			function (e, m) {
				var _p16 = m;
				if (_p16.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_p16._0.ctor === '[]') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Native_Utils.eq(e, _p16._0._0) ? _elm_lang$core$Maybe$Just(_p16._0._1) : _elm_lang$core$Maybe$Nothing;
					}
				}
			});
		return A3(
			_elm_lang$core$List$foldl,
			step,
			_elm_lang$core$Maybe$Just(xs),
			prefix);
	});
var _elm_community$list_extra$List_Extra$dropWhileRight = function (p) {
	return A2(
		_elm_lang$core$List$foldr,
		F2(
			function (x, xs) {
				return (p(x) && _elm_lang$core$List$isEmpty(xs)) ? {ctor: '[]'} : {ctor: '::', _0: x, _1: xs};
			}),
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$takeWhileRight = function (p) {
	var step = F2(
		function (x, _p17) {
			var _p18 = _p17;
			var _p19 = _p18._0;
			return (p(x) && _p18._1) ? {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: x, _1: _p19},
				_1: true
			} : {ctor: '_Tuple2', _0: _p19, _1: false};
		});
	return function (_p20) {
		return _elm_lang$core$Tuple$first(
			A3(
				_elm_lang$core$List$foldr,
				step,
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: true
				},
				_p20));
	};
};
var _elm_community$list_extra$List_Extra$splitAt = F2(
	function (n, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$List$take, n, xs),
			_1: A2(_elm_lang$core$List$drop, n, xs)
		};
	});
var _elm_community$list_extra$List_Extra$groupsOfVarying_ = F3(
	function (listOflengths, list, accu) {
		groupsOfVarying_:
		while (true) {
			var _p21 = {ctor: '_Tuple2', _0: listOflengths, _1: list};
			if (((_p21.ctor === '_Tuple2') && (_p21._0.ctor === '::')) && (_p21._1.ctor === '::')) {
				var _p22 = A2(_elm_community$list_extra$List_Extra$splitAt, _p21._0._0, list);
				var head = _p22._0;
				var tail = _p22._1;
				var _v11 = _p21._0._1,
					_v12 = tail,
					_v13 = {ctor: '::', _0: head, _1: accu};
				listOflengths = _v11;
				list = _v12;
				accu = _v13;
				continue groupsOfVarying_;
			} else {
				return _elm_lang$core$List$reverse(accu);
			}
		}
	});
var _elm_community$list_extra$List_Extra$groupsOfVarying = F2(
	function (listOflengths, list) {
		return A3(
			_elm_community$list_extra$List_Extra$groupsOfVarying_,
			listOflengths,
			list,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$unfoldr = F2(
	function (f, seed) {
		var _p23 = f(seed);
		if (_p23.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _p23._0._0,
				_1: A2(_elm_community$list_extra$List_Extra$unfoldr, f, _p23._0._1)
			};
		}
	});
var _elm_community$list_extra$List_Extra$scanr1 = F2(
	function (f, xs_) {
		var _p24 = xs_;
		if (_p24.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p24._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: _p24._0,
					_1: {ctor: '[]'}
				};
			} else {
				var _p25 = A2(_elm_community$list_extra$List_Extra$scanr1, f, _p24._1);
				if (_p25.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, _p24._0, _p25._0),
						_1: _p25
					};
				} else {
					return {ctor: '[]'};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$scanr = F3(
	function (f, acc, xs_) {
		var _p26 = xs_;
		if (_p26.ctor === '[]') {
			return {
				ctor: '::',
				_0: acc,
				_1: {ctor: '[]'}
			};
		} else {
			var _p27 = A3(_elm_community$list_extra$List_Extra$scanr, f, acc, _p26._1);
			if (_p27.ctor === '::') {
				return {
					ctor: '::',
					_0: A2(f, _p26._0, _p27._0),
					_1: _p27
				};
			} else {
				return {ctor: '[]'};
			}
		}
	});
var _elm_community$list_extra$List_Extra$scanl1 = F2(
	function (f, xs_) {
		var _p28 = xs_;
		if (_p28.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return A3(_elm_lang$core$List$scanl, f, _p28._0, _p28._1);
		}
	});
var _elm_community$list_extra$List_Extra$indexedFoldr = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _p29) {
				var _p30 = _p29;
				var _p31 = _p30._0;
				return {
					ctor: '_Tuple2',
					_0: _p31 - 1,
					_1: A3(func, _p31, x, _p30._1)
				};
			});
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldr,
				step,
				{
					ctor: '_Tuple2',
					_0: _elm_lang$core$List$length(list) - 1,
					_1: acc
				},
				list));
	});
var _elm_community$list_extra$List_Extra$indexedFoldl = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _p32) {
				var _p33 = _p32;
				var _p34 = _p33._0;
				return {
					ctor: '_Tuple2',
					_0: _p34 + 1,
					_1: A3(func, _p34, x, _p33._1)
				};
			});
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldl,
				step,
				{ctor: '_Tuple2', _0: 0, _1: acc},
				list));
	});
var _elm_community$list_extra$List_Extra$foldr1 = F2(
	function (f, xs) {
		var mf = F2(
			function (x, m) {
				return _elm_lang$core$Maybe$Just(
					function () {
						var _p35 = m;
						if (_p35.ctor === 'Nothing') {
							return x;
						} else {
							return A2(f, x, _p35._0);
						}
					}());
			});
		return A3(_elm_lang$core$List$foldr, mf, _elm_lang$core$Maybe$Nothing, xs);
	});
var _elm_community$list_extra$List_Extra$foldl1 = F2(
	function (f, xs) {
		var mf = F2(
			function (x, m) {
				return _elm_lang$core$Maybe$Just(
					function () {
						var _p36 = m;
						if (_p36.ctor === 'Nothing') {
							return x;
						} else {
							return A2(f, _p36._0, x);
						}
					}());
			});
		return A3(_elm_lang$core$List$foldl, mf, _elm_lang$core$Maybe$Nothing, xs);
	});
var _elm_community$list_extra$List_Extra$interweaveHelp = F3(
	function (l1, l2, acc) {
		interweaveHelp:
		while (true) {
			var _p37 = {ctor: '_Tuple2', _0: l1, _1: l2};
			_v24_1:
			do {
				if (_p37._0.ctor === '::') {
					if (_p37._1.ctor === '::') {
						var _v25 = _p37._0._1,
							_v26 = _p37._1._1,
							_v27 = A2(
							_elm_lang$core$Basics_ops['++'],
							acc,
							{
								ctor: '::',
								_0: _p37._0._0,
								_1: {
									ctor: '::',
									_0: _p37._1._0,
									_1: {ctor: '[]'}
								}
							});
						l1 = _v25;
						l2 = _v26;
						acc = _v27;
						continue interweaveHelp;
					} else {
						break _v24_1;
					}
				} else {
					if (_p37._1.ctor === '[]') {
						break _v24_1;
					} else {
						return A2(_elm_lang$core$Basics_ops['++'], acc, _p37._1);
					}
				}
			} while(false);
			return A2(_elm_lang$core$Basics_ops['++'], acc, _p37._0);
		}
	});
var _elm_community$list_extra$List_Extra$interweave = F2(
	function (l1, l2) {
		return A3(
			_elm_community$list_extra$List_Extra$interweaveHelp,
			l1,
			l2,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$permutations = function (xs_) {
	var _p38 = xs_;
	if (_p38.ctor === '[]') {
		return {
			ctor: '::',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		};
	} else {
		var f = function (_p39) {
			var _p40 = _p39;
			return A2(
				_elm_lang$core$List$map,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					})(_p40._0),
				_elm_community$list_extra$List_Extra$permutations(_p40._1));
		};
		return A2(
			_elm_lang$core$List$concatMap,
			f,
			_elm_community$list_extra$List_Extra$select(_p38));
	}
};
var _elm_community$list_extra$List_Extra$isPermutationOf = F2(
	function (permut, xs) {
		return A2(
			_elm_lang$core$List$member,
			permut,
			_elm_community$list_extra$List_Extra$permutations(xs));
	});
var _elm_community$list_extra$List_Extra$subsequencesNonEmpty = function (xs) {
	var _p41 = xs;
	if (_p41.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p42 = _p41._0;
		var f = F2(
			function (ys, r) {
				return {
					ctor: '::',
					_0: ys,
					_1: {
						ctor: '::',
						_0: {ctor: '::', _0: _p42, _1: ys},
						_1: r
					}
				};
			});
		return {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: _p42,
				_1: {ctor: '[]'}
			},
			_1: A3(
				_elm_lang$core$List$foldr,
				f,
				{ctor: '[]'},
				_elm_community$list_extra$List_Extra$subsequencesNonEmpty(_p41._1))
		};
	}
};
var _elm_community$list_extra$List_Extra$subsequences = function (xs) {
	return {
		ctor: '::',
		_0: {ctor: '[]'},
		_1: _elm_community$list_extra$List_Extra$subsequencesNonEmpty(xs)
	};
};
var _elm_community$list_extra$List_Extra$isSubsequenceOf = F2(
	function (subseq, xs) {
		return A2(
			_elm_lang$core$List$member,
			subseq,
			_elm_community$list_extra$List_Extra$subsequences(xs));
	});
var _elm_community$list_extra$List_Extra$transpose = function (ll) {
	transpose:
	while (true) {
		var _p43 = ll;
		if (_p43.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p43._0.ctor === '[]') {
				var _v32 = _p43._1;
				ll = _v32;
				continue transpose;
			} else {
				var _p44 = _p43._1;
				var tails = A2(_elm_lang$core$List$filterMap, _elm_lang$core$List$tail, _p44);
				var heads = A2(_elm_lang$core$List$filterMap, _elm_lang$core$List$head, _p44);
				return {
					ctor: '::',
					_0: {ctor: '::', _0: _p43._0._0, _1: heads},
					_1: _elm_community$list_extra$List_Extra$transpose(
						{ctor: '::', _0: _p43._0._1, _1: tails})
				};
			}
		}
	}
};
var _elm_community$list_extra$List_Extra$intercalate = function (xs) {
	return function (_p45) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$intersperse, xs, _p45));
	};
};
var _elm_community$list_extra$List_Extra$filterNot = F2(
	function (pred, list) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p46) {
				return !pred(_p46);
			},
			list);
	});
var _elm_community$list_extra$List_Extra$removeAt = F2(
	function (index, l) {
		if (_elm_lang$core$Native_Utils.cmp(index, 0) < 0) {
			return l;
		} else {
			var tail = _elm_lang$core$List$tail(
				A2(_elm_lang$core$List$drop, index, l));
			var head = A2(_elm_lang$core$List$take, index, l);
			var _p47 = tail;
			if (_p47.ctor === 'Nothing') {
				return l;
			} else {
				return A2(_elm_lang$core$List$append, head, _p47._0);
			}
		}
	});
var _elm_community$list_extra$List_Extra$stableSortWith = F2(
	function (pred, list) {
		var predWithIndex = F2(
			function (_p49, _p48) {
				var _p50 = _p49;
				var _p51 = _p48;
				var result = A2(pred, _p50._0, _p51._0);
				var _p52 = result;
				if (_p52.ctor === 'EQ') {
					return A2(_elm_lang$core$Basics$compare, _p50._1, _p51._1);
				} else {
					return result;
				}
			});
		var listWithIndex = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, a) {
					return {ctor: '_Tuple2', _0: a, _1: i};
				}),
			list);
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(_elm_lang$core$List$sortWith, predWithIndex, listWithIndex));
	});
var _elm_community$list_extra$List_Extra$setAt = F3(
	function (index, value, l) {
		if (_elm_lang$core$Native_Utils.cmp(index, 0) < 0) {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var tail = _elm_lang$core$List$tail(
				A2(_elm_lang$core$List$drop, index, l));
			var head = A2(_elm_lang$core$List$take, index, l);
			var _p53 = tail;
			if (_p53.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(
					A2(
						_elm_lang$core$List$append,
						head,
						{ctor: '::', _0: value, _1: _p53._0}));
			}
		}
	});
var _elm_community$list_extra$List_Extra$remove = F2(
	function (x, xs) {
		var _p54 = xs;
		if (_p54.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p56 = _p54._1;
			var _p55 = _p54._0;
			return _elm_lang$core$Native_Utils.eq(x, _p55) ? _p56 : {
				ctor: '::',
				_0: _p55,
				_1: A2(_elm_community$list_extra$List_Extra$remove, x, _p56)
			};
		}
	});
var _elm_community$list_extra$List_Extra$updateIfIndex = F3(
	function (predicate, update, list) {
		return A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, x) {
					return predicate(i) ? update(x) : x;
				}),
			list);
	});
var _elm_community$list_extra$List_Extra$updateAt = F3(
	function (index, update, list) {
		return ((_elm_lang$core$Native_Utils.cmp(index, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(
			index,
			_elm_lang$core$List$length(list)) > -1)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
			A3(
				_elm_community$list_extra$List_Extra$updateIfIndex,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					})(index),
				update,
				list));
	});
var _elm_community$list_extra$List_Extra$updateIf = F3(
	function (predicate, update, list) {
		return A2(
			_elm_lang$core$List$map,
			function (item) {
				return predicate(item) ? update(item) : item;
			},
			list);
	});
var _elm_community$list_extra$List_Extra$replaceIf = F3(
	function (predicate, replacement, list) {
		return A3(
			_elm_community$list_extra$List_Extra$updateIf,
			predicate,
			_elm_lang$core$Basics$always(replacement),
			list);
	});
var _elm_community$list_extra$List_Extra$findIndices = function (p) {
	return function (_p57) {
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(
				_elm_lang$core$List$filter,
				function (_p58) {
					var _p59 = _p58;
					return p(_p59._1);
				},
				A2(
					_elm_lang$core$List$indexedMap,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					_p57)));
	};
};
var _elm_community$list_extra$List_Extra$findIndex = function (p) {
	return function (_p60) {
		return _elm_lang$core$List$head(
			A2(_elm_community$list_extra$List_Extra$findIndices, p, _p60));
	};
};
var _elm_community$list_extra$List_Extra$splitWhen = F2(
	function (predicate, list) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (i) {
				return A2(_elm_community$list_extra$List_Extra$splitAt, i, list);
			},
			A2(_elm_community$list_extra$List_Extra$findIndex, predicate, list));
	});
var _elm_community$list_extra$List_Extra$elemIndices = function (x) {
	return _elm_community$list_extra$List_Extra$findIndices(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(x));
};
var _elm_community$list_extra$List_Extra$elemIndex = function (x) {
	return _elm_community$list_extra$List_Extra$findIndex(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(x));
};
var _elm_community$list_extra$List_Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			var _p61 = list;
			if (_p61.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p62 = _p61._0;
				if (predicate(_p62)) {
					return _elm_lang$core$Maybe$Just(_p62);
				} else {
					var _v41 = predicate,
						_v42 = _p61._1;
					predicate = _v41;
					list = _v42;
					continue find;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$notMember = function (x) {
	return function (_p63) {
		return !A2(_elm_lang$core$List$member, x, _p63);
	};
};
var _elm_community$list_extra$List_Extra$andThen = _elm_lang$core$List$concatMap;
var _elm_community$list_extra$List_Extra$lift2 = F3(
	function (f, la, lb) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return {
							ctor: '::',
							_0: A2(f, a, b),
							_1: {ctor: '[]'}
						};
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$lift3 = F4(
	function (f, la, lb, lc) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return A2(
							_elm_community$list_extra$List_Extra$andThen,
							function (c) {
								return {
									ctor: '::',
									_0: A3(f, a, b, c),
									_1: {ctor: '[]'}
								};
							},
							lc);
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$lift4 = F5(
	function (f, la, lb, lc, ld) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return A2(
							_elm_community$list_extra$List_Extra$andThen,
							function (c) {
								return A2(
									_elm_community$list_extra$List_Extra$andThen,
									function (d) {
										return {
											ctor: '::',
											_0: A4(f, a, b, c, d),
											_1: {ctor: '[]'}
										};
									},
									ld);
							},
							lc);
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$andMap = F2(
	function (l, fl) {
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			fl,
			l);
	});
var _elm_community$list_extra$List_Extra$uniqueHelp = F3(
	function (f, existing, remaining) {
		uniqueHelp:
		while (true) {
			var _p64 = remaining;
			if (_p64.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p66 = _p64._1;
				var _p65 = _p64._0;
				var computedFirst = f(_p65);
				if (A2(_elm_lang$core$Set$member, computedFirst, existing)) {
					var _v44 = f,
						_v45 = existing,
						_v46 = _p66;
					f = _v44;
					existing = _v45;
					remaining = _v46;
					continue uniqueHelp;
				} else {
					return {
						ctor: '::',
						_0: _p65,
						_1: A3(
							_elm_community$list_extra$List_Extra$uniqueHelp,
							f,
							A2(_elm_lang$core$Set$insert, computedFirst, existing),
							_p66)
					};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$uniqueBy = F2(
	function (f, list) {
		return A3(_elm_community$list_extra$List_Extra$uniqueHelp, f, _elm_lang$core$Set$empty, list);
	});
var _elm_community$list_extra$List_Extra$allDifferentBy = F2(
	function (f, list) {
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(list),
			_elm_lang$core$List$length(
				A2(_elm_community$list_extra$List_Extra$uniqueBy, f, list)));
	});
var _elm_community$list_extra$List_Extra$allDifferent = function (list) {
	return A2(_elm_community$list_extra$List_Extra$allDifferentBy, _elm_lang$core$Basics$identity, list);
};
var _elm_community$list_extra$List_Extra$unique = function (list) {
	return A3(_elm_community$list_extra$List_Extra$uniqueHelp, _elm_lang$core$Basics$identity, _elm_lang$core$Set$empty, list);
};
var _elm_community$list_extra$List_Extra$dropWhile = F2(
	function (predicate, list) {
		dropWhile:
		while (true) {
			var _p67 = list;
			if (_p67.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				if (predicate(_p67._0)) {
					var _v48 = predicate,
						_v49 = _p67._1;
					predicate = _v48;
					list = _v49;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$takeWhile = function (predicate) {
	var takeWhileMemo = F2(
		function (memo, list) {
			takeWhileMemo:
			while (true) {
				var _p68 = list;
				if (_p68.ctor === '[]') {
					return _elm_lang$core$List$reverse(memo);
				} else {
					var _p69 = _p68._0;
					if (predicate(_p69)) {
						var _v51 = {ctor: '::', _0: _p69, _1: memo},
							_v52 = _p68._1;
						memo = _v51;
						list = _v52;
						continue takeWhileMemo;
					} else {
						return _elm_lang$core$List$reverse(memo);
					}
				}
			}
		});
	return takeWhileMemo(
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$span = F2(
	function (p, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_community$list_extra$List_Extra$takeWhile, p, xs),
			_1: A2(_elm_community$list_extra$List_Extra$dropWhile, p, xs)
		};
	});
var _elm_community$list_extra$List_Extra$break = function (p) {
	return _elm_community$list_extra$List_Extra$span(
		function (_p70) {
			return !p(_p70);
		});
};
var _elm_community$list_extra$List_Extra$groupWhile = F2(
	function (eq, xs_) {
		var _p71 = xs_;
		if (_p71.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p73 = _p71._0;
			var _p72 = A2(
				_elm_community$list_extra$List_Extra$span,
				eq(_p73),
				_p71._1);
			var ys = _p72._0;
			var zs = _p72._1;
			return {
				ctor: '::',
				_0: {ctor: '::', _0: _p73, _1: ys},
				_1: A2(_elm_community$list_extra$List_Extra$groupWhile, eq, zs)
			};
		}
	});
var _elm_community$list_extra$List_Extra$group = _elm_community$list_extra$List_Extra$groupWhile(
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		}));
var _elm_community$list_extra$List_Extra$minimumBy = F2(
	function (f, ls) {
		var minBy = F2(
			function (x, _p74) {
				var _p75 = _p74;
				var _p76 = _p75._1;
				var fx = f(x);
				return (_elm_lang$core$Native_Utils.cmp(fx, _p76) < 0) ? {ctor: '_Tuple2', _0: x, _1: fx} : {ctor: '_Tuple2', _0: _p75._0, _1: _p76};
			});
		var _p77 = ls;
		if (_p77.ctor === '::') {
			if (_p77._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p77._0);
			} else {
				var _p78 = _p77._0;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							minBy,
							{
								ctor: '_Tuple2',
								_0: _p78,
								_1: f(_p78)
							},
							_p77._1)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$list_extra$List_Extra$maximumBy = F2(
	function (f, ls) {
		var maxBy = F2(
			function (x, _p79) {
				var _p80 = _p79;
				var _p81 = _p80._1;
				var fx = f(x);
				return (_elm_lang$core$Native_Utils.cmp(fx, _p81) > 0) ? {ctor: '_Tuple2', _0: x, _1: fx} : {ctor: '_Tuple2', _0: _p80._0, _1: _p81};
			});
		var _p82 = ls;
		if (_p82.ctor === '::') {
			if (_p82._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p82._0);
			} else {
				var _p83 = _p82._0;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							maxBy,
							{
								ctor: '_Tuple2',
								_0: _p83,
								_1: f(_p83)
							},
							_p82._1)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$list_extra$List_Extra$uncons = function (xs) {
	var _p84 = xs;
	if (_p84.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: _p84._0, _1: _p84._1});
	}
};
var _elm_community$list_extra$List_Extra$swapAt = F3(
	function (index1, index2, l) {
		swapAt:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(index1, index2)) {
				return _elm_lang$core$Maybe$Just(l);
			} else {
				if (_elm_lang$core$Native_Utils.cmp(index1, index2) > 0) {
					var _v59 = index2,
						_v60 = index1,
						_v61 = l;
					index1 = _v59;
					index2 = _v60;
					l = _v61;
					continue swapAt;
				} else {
					if (_elm_lang$core$Native_Utils.cmp(index1, 0) < 0) {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						var _p85 = A2(_elm_community$list_extra$List_Extra$splitAt, index1, l);
						var part1 = _p85._0;
						var tail1 = _p85._1;
						var _p86 = A2(_elm_community$list_extra$List_Extra$splitAt, index2 - index1, tail1);
						var head2 = _p86._0;
						var tail2 = _p86._1;
						return A3(
							_elm_lang$core$Maybe$map2,
							F2(
								function (_p88, _p87) {
									var _p89 = _p88;
									var _p90 = _p87;
									return _elm_lang$core$List$concat(
										{
											ctor: '::',
											_0: part1,
											_1: {
												ctor: '::',
												_0: {ctor: '::', _0: _p90._0, _1: _p89._1},
												_1: {
													ctor: '::',
													_0: {ctor: '::', _0: _p89._0, _1: _p90._1},
													_1: {ctor: '[]'}
												}
											}
										});
								}),
							_elm_community$list_extra$List_Extra$uncons(head2),
							_elm_community$list_extra$List_Extra$uncons(tail2));
					}
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$iterate = F2(
	function (f, x) {
		var _p91 = f(x);
		if (_p91.ctor === 'Just') {
			return {
				ctor: '::',
				_0: x,
				_1: A2(_elm_community$list_extra$List_Extra$iterate, f, _p91._0)
			};
		} else {
			return {
				ctor: '::',
				_0: x,
				_1: {ctor: '[]'}
			};
		}
	});
var _elm_community$list_extra$List_Extra$getAt = F2(
	function (idx, xs) {
		return (_elm_lang$core$Native_Utils.cmp(idx, 0) < 0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, idx, xs));
	});
var _elm_community$list_extra$List_Extra_ops = _elm_community$list_extra$List_Extra_ops || {};
_elm_community$list_extra$List_Extra_ops['!!'] = _elm_lang$core$Basics$flip(_elm_community$list_extra$List_Extra$getAt);
var _elm_community$list_extra$List_Extra$init = function () {
	var maybe = F2(
		function (d, f) {
			return function (_p92) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					d,
					A2(_elm_lang$core$Maybe$map, f, _p92));
			};
		});
	return A2(
		_elm_lang$core$List$foldr,
		function (x) {
			return function (_p93) {
				return _elm_lang$core$Maybe$Just(
					A3(
						maybe,
						{ctor: '[]'},
						F2(
							function (x, y) {
								return {ctor: '::', _0: x, _1: y};
							})(x),
						_p93));
			};
		},
		_elm_lang$core$Maybe$Nothing);
}();
var _elm_community$list_extra$List_Extra$last = _elm_community$list_extra$List_Extra$foldl1(
	_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always));

var _elm_community$maybe_extra$Maybe_Extra$foldrValues = F2(
	function (item, list) {
		var _p0 = item;
		if (_p0.ctor === 'Nothing') {
			return list;
		} else {
			return {ctor: '::', _0: _p0._0, _1: list};
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$values = A2(
	_elm_lang$core$List$foldr,
	_elm_community$maybe_extra$Maybe_Extra$foldrValues,
	{ctor: '[]'});
var _elm_community$maybe_extra$Maybe_Extra$filter = F2(
	function (f, m) {
		var _p1 = A2(_elm_lang$core$Maybe$map, f, m);
		if ((_p1.ctor === 'Just') && (_p1._0 === true)) {
			return m;
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$traverseArray = function (f) {
	var step = F2(
		function (e, acc) {
			var _p2 = f(e);
			if (_p2.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return A2(
					_elm_lang$core$Maybe$map,
					_elm_lang$core$Array$push(_p2._0),
					acc);
			}
		});
	return A2(
		_elm_lang$core$Array$foldl,
		step,
		_elm_lang$core$Maybe$Just(_elm_lang$core$Array$empty));
};
var _elm_community$maybe_extra$Maybe_Extra$combineArray = _elm_community$maybe_extra$Maybe_Extra$traverseArray(_elm_lang$core$Basics$identity);
var _elm_community$maybe_extra$Maybe_Extra$traverse = function (f) {
	var step = F2(
		function (e, acc) {
			var _p3 = f(e);
			if (_p3.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return A2(
					_elm_lang$core$Maybe$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(_p3._0),
					acc);
			}
		});
	return A2(
		_elm_lang$core$List$foldr,
		step,
		_elm_lang$core$Maybe$Just(
			{ctor: '[]'}));
};
var _elm_community$maybe_extra$Maybe_Extra$combine = _elm_community$maybe_extra$Maybe_Extra$traverse(_elm_lang$core$Basics$identity);
var _elm_community$maybe_extra$Maybe_Extra$toArray = function (m) {
	var _p4 = m;
	if (_p4.ctor === 'Nothing') {
		return _elm_lang$core$Array$empty;
	} else {
		return A2(_elm_lang$core$Array$repeat, 1, _p4._0);
	}
};
var _elm_community$maybe_extra$Maybe_Extra$toList = function (m) {
	var _p5 = m;
	if (_p5.ctor === 'Nothing') {
		return {ctor: '[]'};
	} else {
		return {
			ctor: '::',
			_0: _p5._0,
			_1: {ctor: '[]'}
		};
	}
};
var _elm_community$maybe_extra$Maybe_Extra$orElse = F2(
	function (ma, mb) {
		var _p6 = mb;
		if (_p6.ctor === 'Nothing') {
			return ma;
		} else {
			return mb;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$orElseLazy = F2(
	function (fma, mb) {
		var _p7 = mb;
		if (_p7.ctor === 'Nothing') {
			return fma(
				{ctor: '_Tuple0'});
		} else {
			return mb;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$orLazy = F2(
	function (ma, fmb) {
		var _p8 = ma;
		if (_p8.ctor === 'Nothing') {
			return fmb(
				{ctor: '_Tuple0'});
		} else {
			return ma;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$or = F2(
	function (ma, mb) {
		var _p9 = ma;
		if (_p9.ctor === 'Nothing') {
			return mb;
		} else {
			return ma;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$prev = _elm_lang$core$Maybe$map2(_elm_lang$core$Basics$always);
var _elm_community$maybe_extra$Maybe_Extra$next = _elm_lang$core$Maybe$map2(
	_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always));
var _elm_community$maybe_extra$Maybe_Extra$andMap = _elm_lang$core$Maybe$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _elm_community$maybe_extra$Maybe_Extra$unpack = F3(
	function (d, f, m) {
		var _p10 = m;
		if (_p10.ctor === 'Nothing') {
			return d(
				{ctor: '_Tuple0'});
		} else {
			return f(_p10._0);
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$unwrap = F3(
	function (d, f, m) {
		var _p11 = m;
		if (_p11.ctor === 'Nothing') {
			return d;
		} else {
			return f(_p11._0);
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$isJust = function (m) {
	var _p12 = m;
	if (_p12.ctor === 'Nothing') {
		return false;
	} else {
		return true;
	}
};
var _elm_community$maybe_extra$Maybe_Extra$isNothing = function (m) {
	var _p13 = m;
	if (_p13.ctor === 'Nothing') {
		return true;
	} else {
		return false;
	}
};
var _elm_community$maybe_extra$Maybe_Extra$join = function (mx) {
	var _p14 = mx;
	if (_p14.ctor === 'Just') {
		return _p14._0;
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_community$maybe_extra$Maybe_Extra_ops = _elm_community$maybe_extra$Maybe_Extra_ops || {};
_elm_community$maybe_extra$Maybe_Extra_ops['?'] = F2(
	function (mx, x) {
		return A2(_elm_lang$core$Maybe$withDefault, x, mx);
	});

var _elm_lang$core$Random$onSelfMsg = F3(
	function (_p1, _p0, seed) {
		return _elm_lang$core$Task$succeed(seed);
	});
var _elm_lang$core$Random$magicNum8 = 2147483562;
var _elm_lang$core$Random$range = function (_p2) {
	return {ctor: '_Tuple2', _0: 0, _1: _elm_lang$core$Random$magicNum8};
};
var _elm_lang$core$Random$magicNum7 = 2147483399;
var _elm_lang$core$Random$magicNum6 = 2147483563;
var _elm_lang$core$Random$magicNum5 = 3791;
var _elm_lang$core$Random$magicNum4 = 40692;
var _elm_lang$core$Random$magicNum3 = 52774;
var _elm_lang$core$Random$magicNum2 = 12211;
var _elm_lang$core$Random$magicNum1 = 53668;
var _elm_lang$core$Random$magicNum0 = 40014;
var _elm_lang$core$Random$step = F2(
	function (_p3, seed) {
		var _p4 = _p3;
		return _p4._0(seed);
	});
var _elm_lang$core$Random$onEffects = F3(
	function (router, commands, seed) {
		var _p5 = commands;
		if (_p5.ctor === '[]') {
			return _elm_lang$core$Task$succeed(seed);
		} else {
			var _p6 = A2(_elm_lang$core$Random$step, _p5._0._0, seed);
			var value = _p6._0;
			var newSeed = _p6._1;
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p7) {
					return A3(_elm_lang$core$Random$onEffects, router, _p5._1, newSeed);
				},
				A2(_elm_lang$core$Platform$sendToApp, router, value));
		}
	});
var _elm_lang$core$Random$listHelp = F4(
	function (list, n, generate, seed) {
		listHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 1) < 0) {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$List$reverse(list),
					_1: seed
				};
			} else {
				var _p8 = generate(seed);
				var value = _p8._0;
				var newSeed = _p8._1;
				var _v2 = {ctor: '::', _0: value, _1: list},
					_v3 = n - 1,
					_v4 = generate,
					_v5 = newSeed;
				list = _v2;
				n = _v3;
				generate = _v4;
				seed = _v5;
				continue listHelp;
			}
		}
	});
var _elm_lang$core$Random$minInt = -2147483648;
var _elm_lang$core$Random$maxInt = 2147483647;
var _elm_lang$core$Random$iLogBase = F2(
	function (b, i) {
		return (_elm_lang$core$Native_Utils.cmp(i, b) < 0) ? 1 : (1 + A2(_elm_lang$core$Random$iLogBase, b, (i / b) | 0));
	});
var _elm_lang$core$Random$command = _elm_lang$core$Native_Platform.leaf('Random');
var _elm_lang$core$Random$Generator = function (a) {
	return {ctor: 'Generator', _0: a};
};
var _elm_lang$core$Random$list = F2(
	function (n, _p9) {
		var _p10 = _p9;
		return _elm_lang$core$Random$Generator(
			function (seed) {
				return A4(
					_elm_lang$core$Random$listHelp,
					{ctor: '[]'},
					n,
					_p10._0,
					seed);
			});
	});
var _elm_lang$core$Random$map = F2(
	function (func, _p11) {
		var _p12 = _p11;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p13 = _p12._0(seed0);
				var a = _p13._0;
				var seed1 = _p13._1;
				return {
					ctor: '_Tuple2',
					_0: func(a),
					_1: seed1
				};
			});
	});
var _elm_lang$core$Random$map2 = F3(
	function (func, _p15, _p14) {
		var _p16 = _p15;
		var _p17 = _p14;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p18 = _p16._0(seed0);
				var a = _p18._0;
				var seed1 = _p18._1;
				var _p19 = _p17._0(seed1);
				var b = _p19._0;
				var seed2 = _p19._1;
				return {
					ctor: '_Tuple2',
					_0: A2(func, a, b),
					_1: seed2
				};
			});
	});
var _elm_lang$core$Random$pair = F2(
	function (genA, genB) {
		return A3(
			_elm_lang$core$Random$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			genA,
			genB);
	});
var _elm_lang$core$Random$map3 = F4(
	function (func, _p22, _p21, _p20) {
		var _p23 = _p22;
		var _p24 = _p21;
		var _p25 = _p20;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p26 = _p23._0(seed0);
				var a = _p26._0;
				var seed1 = _p26._1;
				var _p27 = _p24._0(seed1);
				var b = _p27._0;
				var seed2 = _p27._1;
				var _p28 = _p25._0(seed2);
				var c = _p28._0;
				var seed3 = _p28._1;
				return {
					ctor: '_Tuple2',
					_0: A3(func, a, b, c),
					_1: seed3
				};
			});
	});
var _elm_lang$core$Random$map4 = F5(
	function (func, _p32, _p31, _p30, _p29) {
		var _p33 = _p32;
		var _p34 = _p31;
		var _p35 = _p30;
		var _p36 = _p29;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p37 = _p33._0(seed0);
				var a = _p37._0;
				var seed1 = _p37._1;
				var _p38 = _p34._0(seed1);
				var b = _p38._0;
				var seed2 = _p38._1;
				var _p39 = _p35._0(seed2);
				var c = _p39._0;
				var seed3 = _p39._1;
				var _p40 = _p36._0(seed3);
				var d = _p40._0;
				var seed4 = _p40._1;
				return {
					ctor: '_Tuple2',
					_0: A4(func, a, b, c, d),
					_1: seed4
				};
			});
	});
var _elm_lang$core$Random$map5 = F6(
	function (func, _p45, _p44, _p43, _p42, _p41) {
		var _p46 = _p45;
		var _p47 = _p44;
		var _p48 = _p43;
		var _p49 = _p42;
		var _p50 = _p41;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p51 = _p46._0(seed0);
				var a = _p51._0;
				var seed1 = _p51._1;
				var _p52 = _p47._0(seed1);
				var b = _p52._0;
				var seed2 = _p52._1;
				var _p53 = _p48._0(seed2);
				var c = _p53._0;
				var seed3 = _p53._1;
				var _p54 = _p49._0(seed3);
				var d = _p54._0;
				var seed4 = _p54._1;
				var _p55 = _p50._0(seed4);
				var e = _p55._0;
				var seed5 = _p55._1;
				return {
					ctor: '_Tuple2',
					_0: A5(func, a, b, c, d, e),
					_1: seed5
				};
			});
	});
var _elm_lang$core$Random$andThen = F2(
	function (callback, _p56) {
		var _p57 = _p56;
		return _elm_lang$core$Random$Generator(
			function (seed) {
				var _p58 = _p57._0(seed);
				var result = _p58._0;
				var newSeed = _p58._1;
				var _p59 = callback(result);
				var genB = _p59._0;
				return genB(newSeed);
			});
	});
var _elm_lang$core$Random$State = F2(
	function (a, b) {
		return {ctor: 'State', _0: a, _1: b};
	});
var _elm_lang$core$Random$initState = function (seed) {
	var s = A2(_elm_lang$core$Basics$max, seed, 0 - seed);
	var q = (s / (_elm_lang$core$Random$magicNum6 - 1)) | 0;
	var s2 = A2(_elm_lang$core$Basics_ops['%'], q, _elm_lang$core$Random$magicNum7 - 1);
	var s1 = A2(_elm_lang$core$Basics_ops['%'], s, _elm_lang$core$Random$magicNum6 - 1);
	return A2(_elm_lang$core$Random$State, s1 + 1, s2 + 1);
};
var _elm_lang$core$Random$next = function (_p60) {
	var _p61 = _p60;
	var _p63 = _p61._1;
	var _p62 = _p61._0;
	var k2 = (_p63 / _elm_lang$core$Random$magicNum3) | 0;
	var rawState2 = (_elm_lang$core$Random$magicNum4 * (_p63 - (k2 * _elm_lang$core$Random$magicNum3))) - (k2 * _elm_lang$core$Random$magicNum5);
	var newState2 = (_elm_lang$core$Native_Utils.cmp(rawState2, 0) < 0) ? (rawState2 + _elm_lang$core$Random$magicNum7) : rawState2;
	var k1 = (_p62 / _elm_lang$core$Random$magicNum1) | 0;
	var rawState1 = (_elm_lang$core$Random$magicNum0 * (_p62 - (k1 * _elm_lang$core$Random$magicNum1))) - (k1 * _elm_lang$core$Random$magicNum2);
	var newState1 = (_elm_lang$core$Native_Utils.cmp(rawState1, 0) < 0) ? (rawState1 + _elm_lang$core$Random$magicNum6) : rawState1;
	var z = newState1 - newState2;
	var newZ = (_elm_lang$core$Native_Utils.cmp(z, 1) < 0) ? (z + _elm_lang$core$Random$magicNum8) : z;
	return {
		ctor: '_Tuple2',
		_0: newZ,
		_1: A2(_elm_lang$core$Random$State, newState1, newState2)
	};
};
var _elm_lang$core$Random$split = function (_p64) {
	var _p65 = _p64;
	var _p68 = _p65._1;
	var _p67 = _p65._0;
	var _p66 = _elm_lang$core$Tuple$second(
		_elm_lang$core$Random$next(_p65));
	var t1 = _p66._0;
	var t2 = _p66._1;
	var new_s2 = _elm_lang$core$Native_Utils.eq(_p68, 1) ? (_elm_lang$core$Random$magicNum7 - 1) : (_p68 - 1);
	var new_s1 = _elm_lang$core$Native_Utils.eq(_p67, _elm_lang$core$Random$magicNum6 - 1) ? 1 : (_p67 + 1);
	return {
		ctor: '_Tuple2',
		_0: A2(_elm_lang$core$Random$State, new_s1, t2),
		_1: A2(_elm_lang$core$Random$State, t1, new_s2)
	};
};
var _elm_lang$core$Random$Seed = function (a) {
	return {ctor: 'Seed', _0: a};
};
var _elm_lang$core$Random$int = F2(
	function (a, b) {
		return _elm_lang$core$Random$Generator(
			function (_p69) {
				var _p70 = _p69;
				var _p75 = _p70._0;
				var base = 2147483561;
				var f = F3(
					function (n, acc, state) {
						f:
						while (true) {
							var _p71 = n;
							if (_p71 === 0) {
								return {ctor: '_Tuple2', _0: acc, _1: state};
							} else {
								var _p72 = _p75.next(state);
								var x = _p72._0;
								var nextState = _p72._1;
								var _v27 = n - 1,
									_v28 = x + (acc * base),
									_v29 = nextState;
								n = _v27;
								acc = _v28;
								state = _v29;
								continue f;
							}
						}
					});
				var _p73 = (_elm_lang$core$Native_Utils.cmp(a, b) < 0) ? {ctor: '_Tuple2', _0: a, _1: b} : {ctor: '_Tuple2', _0: b, _1: a};
				var lo = _p73._0;
				var hi = _p73._1;
				var k = (hi - lo) + 1;
				var n = A2(_elm_lang$core$Random$iLogBase, base, k);
				var _p74 = A3(f, n, 1, _p75.state);
				var v = _p74._0;
				var nextState = _p74._1;
				return {
					ctor: '_Tuple2',
					_0: lo + A2(_elm_lang$core$Basics_ops['%'], v, k),
					_1: _elm_lang$core$Random$Seed(
						_elm_lang$core$Native_Utils.update(
							_p75,
							{state: nextState}))
				};
			});
	});
var _elm_lang$core$Random$bool = A2(
	_elm_lang$core$Random$map,
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		})(1),
	A2(_elm_lang$core$Random$int, 0, 1));
var _elm_lang$core$Random$float = F2(
	function (a, b) {
		return _elm_lang$core$Random$Generator(
			function (seed) {
				var _p76 = A2(
					_elm_lang$core$Random$step,
					A2(_elm_lang$core$Random$int, _elm_lang$core$Random$minInt, _elm_lang$core$Random$maxInt),
					seed);
				var number = _p76._0;
				var newSeed = _p76._1;
				var negativeOneToOne = _elm_lang$core$Basics$toFloat(number) / _elm_lang$core$Basics$toFloat(_elm_lang$core$Random$maxInt - _elm_lang$core$Random$minInt);
				var _p77 = (_elm_lang$core$Native_Utils.cmp(a, b) < 0) ? {ctor: '_Tuple2', _0: a, _1: b} : {ctor: '_Tuple2', _0: b, _1: a};
				var lo = _p77._0;
				var hi = _p77._1;
				var scaled = ((lo + hi) / 2) + ((hi - lo) * negativeOneToOne);
				return {ctor: '_Tuple2', _0: scaled, _1: newSeed};
			});
	});
var _elm_lang$core$Random$initialSeed = function (n) {
	return _elm_lang$core$Random$Seed(
		{
			state: _elm_lang$core$Random$initState(n),
			next: _elm_lang$core$Random$next,
			split: _elm_lang$core$Random$split,
			range: _elm_lang$core$Random$range
		});
};
var _elm_lang$core$Random$init = A2(
	_elm_lang$core$Task$andThen,
	function (t) {
		return _elm_lang$core$Task$succeed(
			_elm_lang$core$Random$initialSeed(
				_elm_lang$core$Basics$round(t)));
	},
	_elm_lang$core$Time$now);
var _elm_lang$core$Random$Generate = function (a) {
	return {ctor: 'Generate', _0: a};
};
var _elm_lang$core$Random$generate = F2(
	function (tagger, generator) {
		return _elm_lang$core$Random$command(
			_elm_lang$core$Random$Generate(
				A2(_elm_lang$core$Random$map, tagger, generator)));
	});
var _elm_lang$core$Random$cmdMap = F2(
	function (func, _p78) {
		var _p79 = _p78;
		return _elm_lang$core$Random$Generate(
			A2(_elm_lang$core$Random$map, func, _p79._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Random'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Random$init, onEffects: _elm_lang$core$Random$onEffects, onSelfMsg: _elm_lang$core$Random$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Random$cmdMap};

var _elm_community$random_extra$Random_Extra$andThen6 = F7(
	function (constructor, generatorA, generatorB, generatorC, generatorD, generatorE, generatorF) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Random$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Random$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Random$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Random$andThen,
											function (e) {
												return A2(
													_elm_lang$core$Random$andThen,
													function (f) {
														return A6(constructor, a, b, c, d, e, f);
													},
													generatorF);
											},
											generatorE);
									},
									generatorD);
							},
							generatorC);
					},
					generatorB);
			},
			generatorA);
	});
var _elm_community$random_extra$Random_Extra$andThen5 = F6(
	function (constructor, generatorA, generatorB, generatorC, generatorD, generatorE) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Random$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Random$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Random$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Random$andThen,
											function (e) {
												return A5(constructor, a, b, c, d, e);
											},
											generatorE);
									},
									generatorD);
							},
							generatorC);
					},
					generatorB);
			},
			generatorA);
	});
var _elm_community$random_extra$Random_Extra$andThen4 = F5(
	function (constructor, generatorA, generatorB, generatorC, generatorD) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Random$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Random$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Random$andThen,
									function (d) {
										return A4(constructor, a, b, c, d);
									},
									generatorD);
							},
							generatorC);
					},
					generatorB);
			},
			generatorA);
	});
var _elm_community$random_extra$Random_Extra$andThen3 = F4(
	function (constructor, generatorA, generatorB, generatorC) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Random$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Random$andThen,
							function (c) {
								return A3(constructor, a, b, c);
							},
							generatorC);
					},
					generatorB);
			},
			generatorA);
	});
var _elm_community$random_extra$Random_Extra$andThen2 = F3(
	function (constructor, generatorA, generatorB) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Random$andThen,
					function (b) {
						return A2(constructor, a, b);
					},
					generatorB);
			},
			generatorA);
	});
var _elm_community$random_extra$Random_Extra$rangeLengthList = F3(
	function (minLength, maxLength, generator) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (len) {
				return A2(_elm_lang$core$Random$list, len, generator);
			},
			A2(_elm_lang$core$Random$int, minLength, maxLength));
	});
var _elm_community$random_extra$Random_Extra$result = F3(
	function (genBool, genErr, genVal) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (b) {
				return b ? A2(_elm_lang$core$Random$map, _elm_lang$core$Result$Ok, genVal) : A2(_elm_lang$core$Random$map, _elm_lang$core$Result$Err, genErr);
			},
			genBool);
	});
var _elm_community$random_extra$Random_Extra$sample = function () {
	var find = F2(
		function (k, ys) {
			find:
			while (true) {
				var _p0 = ys;
				if (_p0.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_elm_lang$core$Native_Utils.eq(k, 0)) {
						return _elm_lang$core$Maybe$Just(_p0._0);
					} else {
						var _v1 = k - 1,
							_v2 = _p0._1;
						k = _v1;
						ys = _v2;
						continue find;
					}
				}
			}
		});
	return function (xs) {
		return A2(
			_elm_lang$core$Random$map,
			function (i) {
				return A2(find, i, xs);
			},
			A2(
				_elm_lang$core$Random$int,
				0,
				_elm_lang$core$List$length(xs) - 1));
	};
}();
var _elm_community$random_extra$Random_Extra$frequency = function (pairs) {
	var pick = F2(
		function (choices, n) {
			pick:
			while (true) {
				var _p1 = choices;
				if ((_p1.ctor === '::') && (_p1._0.ctor === '_Tuple2')) {
					var _p2 = _p1._0._0;
					if (_elm_lang$core$Native_Utils.cmp(n, _p2) < 1) {
						return _p1._0._1;
					} else {
						var _v4 = _p1._1,
							_v5 = n - _p2;
						choices = _v4;
						n = _v5;
						continue pick;
					}
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'Random.Extra',
						{
							start: {line: 154, column: 13},
							end: {line: 162, column: 79}
						},
						_p1)('Empty list passed to Random.Extra.frequency!');
				}
			}
		});
	var total = _elm_lang$core$List$sum(
		A2(
			_elm_lang$core$List$map,
			function (_p4) {
				return _elm_lang$core$Basics$abs(
					_elm_lang$core$Tuple$first(_p4));
			},
			pairs));
	return A2(
		_elm_lang$core$Random$andThen,
		pick(pairs),
		A2(_elm_lang$core$Random$float, 0, total));
};
var _elm_community$random_extra$Random_Extra$choices = function (gens) {
	return _elm_community$random_extra$Random_Extra$frequency(
		A2(
			_elm_lang$core$List$map,
			function (g) {
				return {ctor: '_Tuple2', _0: 1, _1: g};
			},
			gens));
};
var _elm_community$random_extra$Random_Extra$choice = F2(
	function (x, y) {
		return A2(
			_elm_lang$core$Random$map,
			function (b) {
				return b ? x : y;
			},
			_elm_lang$core$Random$bool);
	});
var _elm_community$random_extra$Random_Extra$oneIn = function (n) {
	return A2(
		_elm_lang$core$Random$map,
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(1),
		A2(_elm_lang$core$Random$int, 1, n));
};
var _elm_community$random_extra$Random_Extra$andMap = F2(
	function (generator, funcGenerator) {
		return A3(
			_elm_lang$core$Random$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			funcGenerator,
			generator);
	});
var _elm_community$random_extra$Random_Extra$map6 = F7(
	function (f, generatorA, generatorB, generatorC, generatorD, generatorE, generatorF) {
		return A2(
			_elm_community$random_extra$Random_Extra$andMap,
			generatorF,
			A6(_elm_lang$core$Random$map5, f, generatorA, generatorB, generatorC, generatorD, generatorE));
	});
var _elm_community$random_extra$Random_Extra$constant = function (value) {
	return A2(
		_elm_lang$core$Random$map,
		function (_p5) {
			return value;
		},
		_elm_lang$core$Random$bool);
};
var _elm_community$random_extra$Random_Extra$filter = F2(
	function (predicate, generator) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (a) {
				return predicate(a) ? _elm_community$random_extra$Random_Extra$constant(a) : A2(_elm_community$random_extra$Random_Extra$filter, predicate, generator);
			},
			generator);
	});
var _elm_community$random_extra$Random_Extra$combine = function (generators) {
	var _p6 = generators;
	if (_p6.ctor === '[]') {
		return _elm_community$random_extra$Random_Extra$constant(
			{ctor: '[]'});
	} else {
		return A3(
			_elm_lang$core$Random$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p6._0,
			_elm_community$random_extra$Random_Extra$combine(_p6._1));
	}
};
var _elm_community$random_extra$Random_Extra$maybe = F2(
	function (genBool, genA) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (b) {
				return b ? A2(_elm_lang$core$Random$map, _elm_lang$core$Maybe$Just, genA) : _elm_community$random_extra$Random_Extra$constant(_elm_lang$core$Maybe$Nothing);
			},
			genBool);
	});

var _elm_lang$core$Color$fmod = F2(
	function (f, n) {
		var integer = _elm_lang$core$Basics$floor(f);
		return (_elm_lang$core$Basics$toFloat(
			A2(_elm_lang$core$Basics_ops['%'], integer, n)) + f) - _elm_lang$core$Basics$toFloat(integer);
	});
var _elm_lang$core$Color$rgbToHsl = F3(
	function (red, green, blue) {
		var b = _elm_lang$core$Basics$toFloat(blue) / 255;
		var g = _elm_lang$core$Basics$toFloat(green) / 255;
		var r = _elm_lang$core$Basics$toFloat(red) / 255;
		var cMax = A2(
			_elm_lang$core$Basics$max,
			A2(_elm_lang$core$Basics$max, r, g),
			b);
		var cMin = A2(
			_elm_lang$core$Basics$min,
			A2(_elm_lang$core$Basics$min, r, g),
			b);
		var c = cMax - cMin;
		var lightness = (cMax + cMin) / 2;
		var saturation = _elm_lang$core$Native_Utils.eq(lightness, 0) ? 0 : (c / (1 - _elm_lang$core$Basics$abs((2 * lightness) - 1)));
		var hue = _elm_lang$core$Basics$degrees(60) * (_elm_lang$core$Native_Utils.eq(cMax, r) ? A2(_elm_lang$core$Color$fmod, (g - b) / c, 6) : (_elm_lang$core$Native_Utils.eq(cMax, g) ? (((b - r) / c) + 2) : (((r - g) / c) + 4)));
		return {ctor: '_Tuple3', _0: hue, _1: saturation, _2: lightness};
	});
var _elm_lang$core$Color$hslToRgb = F3(
	function (hue, saturation, lightness) {
		var normHue = hue / _elm_lang$core$Basics$degrees(60);
		var chroma = (1 - _elm_lang$core$Basics$abs((2 * lightness) - 1)) * saturation;
		var x = chroma * (1 - _elm_lang$core$Basics$abs(
			A2(_elm_lang$core$Color$fmod, normHue, 2) - 1));
		var _p0 = (_elm_lang$core$Native_Utils.cmp(normHue, 0) < 0) ? {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 1) < 0) ? {ctor: '_Tuple3', _0: chroma, _1: x, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 2) < 0) ? {ctor: '_Tuple3', _0: x, _1: chroma, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 3) < 0) ? {ctor: '_Tuple3', _0: 0, _1: chroma, _2: x} : ((_elm_lang$core$Native_Utils.cmp(normHue, 4) < 0) ? {ctor: '_Tuple3', _0: 0, _1: x, _2: chroma} : ((_elm_lang$core$Native_Utils.cmp(normHue, 5) < 0) ? {ctor: '_Tuple3', _0: x, _1: 0, _2: chroma} : ((_elm_lang$core$Native_Utils.cmp(normHue, 6) < 0) ? {ctor: '_Tuple3', _0: chroma, _1: 0, _2: x} : {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0}))))));
		var r = _p0._0;
		var g = _p0._1;
		var b = _p0._2;
		var m = lightness - (chroma / 2);
		return {ctor: '_Tuple3', _0: r + m, _1: g + m, _2: b + m};
	});
var _elm_lang$core$Color$toRgb = function (color) {
	var _p1 = color;
	if (_p1.ctor === 'RGBA') {
		return {red: _p1._0, green: _p1._1, blue: _p1._2, alpha: _p1._3};
	} else {
		var _p2 = A3(_elm_lang$core$Color$hslToRgb, _p1._0, _p1._1, _p1._2);
		var r = _p2._0;
		var g = _p2._1;
		var b = _p2._2;
		return {
			red: _elm_lang$core$Basics$round(255 * r),
			green: _elm_lang$core$Basics$round(255 * g),
			blue: _elm_lang$core$Basics$round(255 * b),
			alpha: _p1._3
		};
	}
};
var _elm_lang$core$Color$toHsl = function (color) {
	var _p3 = color;
	if (_p3.ctor === 'HSLA') {
		return {hue: _p3._0, saturation: _p3._1, lightness: _p3._2, alpha: _p3._3};
	} else {
		var _p4 = A3(_elm_lang$core$Color$rgbToHsl, _p3._0, _p3._1, _p3._2);
		var h = _p4._0;
		var s = _p4._1;
		var l = _p4._2;
		return {hue: h, saturation: s, lightness: l, alpha: _p3._3};
	}
};
var _elm_lang$core$Color$HSLA = F4(
	function (a, b, c, d) {
		return {ctor: 'HSLA', _0: a, _1: b, _2: c, _3: d};
	});
var _elm_lang$core$Color$hsla = F4(
	function (hue, saturation, lightness, alpha) {
		return A4(
			_elm_lang$core$Color$HSLA,
			hue - _elm_lang$core$Basics$turns(
				_elm_lang$core$Basics$toFloat(
					_elm_lang$core$Basics$floor(hue / (2 * _elm_lang$core$Basics$pi)))),
			saturation,
			lightness,
			alpha);
	});
var _elm_lang$core$Color$hsl = F3(
	function (hue, saturation, lightness) {
		return A4(_elm_lang$core$Color$hsla, hue, saturation, lightness, 1);
	});
var _elm_lang$core$Color$complement = function (color) {
	var _p5 = color;
	if (_p5.ctor === 'HSLA') {
		return A4(
			_elm_lang$core$Color$hsla,
			_p5._0 + _elm_lang$core$Basics$degrees(180),
			_p5._1,
			_p5._2,
			_p5._3);
	} else {
		var _p6 = A3(_elm_lang$core$Color$rgbToHsl, _p5._0, _p5._1, _p5._2);
		var h = _p6._0;
		var s = _p6._1;
		var l = _p6._2;
		return A4(
			_elm_lang$core$Color$hsla,
			h + _elm_lang$core$Basics$degrees(180),
			s,
			l,
			_p5._3);
	}
};
var _elm_lang$core$Color$grayscale = function (p) {
	return A4(_elm_lang$core$Color$HSLA, 0, 0, 1 - p, 1);
};
var _elm_lang$core$Color$greyscale = function (p) {
	return A4(_elm_lang$core$Color$HSLA, 0, 0, 1 - p, 1);
};
var _elm_lang$core$Color$RGBA = F4(
	function (a, b, c, d) {
		return {ctor: 'RGBA', _0: a, _1: b, _2: c, _3: d};
	});
var _elm_lang$core$Color$rgba = _elm_lang$core$Color$RGBA;
var _elm_lang$core$Color$rgb = F3(
	function (r, g, b) {
		return A4(_elm_lang$core$Color$RGBA, r, g, b, 1);
	});
var _elm_lang$core$Color$lightRed = A4(_elm_lang$core$Color$RGBA, 239, 41, 41, 1);
var _elm_lang$core$Color$red = A4(_elm_lang$core$Color$RGBA, 204, 0, 0, 1);
var _elm_lang$core$Color$darkRed = A4(_elm_lang$core$Color$RGBA, 164, 0, 0, 1);
var _elm_lang$core$Color$lightOrange = A4(_elm_lang$core$Color$RGBA, 252, 175, 62, 1);
var _elm_lang$core$Color$orange = A4(_elm_lang$core$Color$RGBA, 245, 121, 0, 1);
var _elm_lang$core$Color$darkOrange = A4(_elm_lang$core$Color$RGBA, 206, 92, 0, 1);
var _elm_lang$core$Color$lightYellow = A4(_elm_lang$core$Color$RGBA, 255, 233, 79, 1);
var _elm_lang$core$Color$yellow = A4(_elm_lang$core$Color$RGBA, 237, 212, 0, 1);
var _elm_lang$core$Color$darkYellow = A4(_elm_lang$core$Color$RGBA, 196, 160, 0, 1);
var _elm_lang$core$Color$lightGreen = A4(_elm_lang$core$Color$RGBA, 138, 226, 52, 1);
var _elm_lang$core$Color$green = A4(_elm_lang$core$Color$RGBA, 115, 210, 22, 1);
var _elm_lang$core$Color$darkGreen = A4(_elm_lang$core$Color$RGBA, 78, 154, 6, 1);
var _elm_lang$core$Color$lightBlue = A4(_elm_lang$core$Color$RGBA, 114, 159, 207, 1);
var _elm_lang$core$Color$blue = A4(_elm_lang$core$Color$RGBA, 52, 101, 164, 1);
var _elm_lang$core$Color$darkBlue = A4(_elm_lang$core$Color$RGBA, 32, 74, 135, 1);
var _elm_lang$core$Color$lightPurple = A4(_elm_lang$core$Color$RGBA, 173, 127, 168, 1);
var _elm_lang$core$Color$purple = A4(_elm_lang$core$Color$RGBA, 117, 80, 123, 1);
var _elm_lang$core$Color$darkPurple = A4(_elm_lang$core$Color$RGBA, 92, 53, 102, 1);
var _elm_lang$core$Color$lightBrown = A4(_elm_lang$core$Color$RGBA, 233, 185, 110, 1);
var _elm_lang$core$Color$brown = A4(_elm_lang$core$Color$RGBA, 193, 125, 17, 1);
var _elm_lang$core$Color$darkBrown = A4(_elm_lang$core$Color$RGBA, 143, 89, 2, 1);
var _elm_lang$core$Color$black = A4(_elm_lang$core$Color$RGBA, 0, 0, 0, 1);
var _elm_lang$core$Color$white = A4(_elm_lang$core$Color$RGBA, 255, 255, 255, 1);
var _elm_lang$core$Color$lightGrey = A4(_elm_lang$core$Color$RGBA, 238, 238, 236, 1);
var _elm_lang$core$Color$grey = A4(_elm_lang$core$Color$RGBA, 211, 215, 207, 1);
var _elm_lang$core$Color$darkGrey = A4(_elm_lang$core$Color$RGBA, 186, 189, 182, 1);
var _elm_lang$core$Color$lightGray = A4(_elm_lang$core$Color$RGBA, 238, 238, 236, 1);
var _elm_lang$core$Color$gray = A4(_elm_lang$core$Color$RGBA, 211, 215, 207, 1);
var _elm_lang$core$Color$darkGray = A4(_elm_lang$core$Color$RGBA, 186, 189, 182, 1);
var _elm_lang$core$Color$lightCharcoal = A4(_elm_lang$core$Color$RGBA, 136, 138, 133, 1);
var _elm_lang$core$Color$charcoal = A4(_elm_lang$core$Color$RGBA, 85, 87, 83, 1);
var _elm_lang$core$Color$darkCharcoal = A4(_elm_lang$core$Color$RGBA, 46, 52, 54, 1);
var _elm_lang$core$Color$Radial = F5(
	function (a, b, c, d, e) {
		return {ctor: 'Radial', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Color$radial = _elm_lang$core$Color$Radial;
var _elm_lang$core$Color$Linear = F3(
	function (a, b, c) {
		return {ctor: 'Linear', _0: a, _1: b, _2: c};
	});
var _elm_lang$core$Color$linear = _elm_lang$core$Color$Linear;

var _elm_community$random_extra$Random_List$get = F2(
	function (index, list) {
		return _elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, index, list));
	});
var _elm_community$random_extra$Random_List$choose = function (list) {
	if (_elm_lang$core$List$isEmpty(list)) {
		return _elm_community$random_extra$Random_Extra$constant(
			{ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: list});
	} else {
		var back = function (i) {
			return A2(_elm_lang$core$List$drop, i + 1, list);
		};
		var front = function (i) {
			return A2(_elm_lang$core$List$take, i, list);
		};
		var lastIndex = _elm_lang$core$List$length(list) - 1;
		var gen = A2(_elm_lang$core$Random$int, 0, lastIndex);
		return A2(
			_elm_lang$core$Random$map,
			function (index) {
				return {
					ctor: '_Tuple2',
					_0: A2(_elm_community$random_extra$Random_List$get, index, list),
					_1: A2(
						_elm_lang$core$List$append,
						front(index),
						back(index))
				};
			},
			gen);
	}
};
var _elm_community$random_extra$Random_List$shuffle = function (list) {
	if (_elm_lang$core$List$isEmpty(list)) {
		return _elm_community$random_extra$Random_Extra$constant(list);
	} else {
		var helper = function (_p0) {
			var _p1 = _p0;
			var _p6 = _p1._0;
			return A2(
				_elm_lang$core$Random$andThen,
				function (_p2) {
					var _p3 = _p2;
					var _p5 = _p3._1;
					var _p4 = _p3._0;
					if (_p4.ctor === 'Nothing') {
						return _elm_community$random_extra$Random_Extra$constant(
							{ctor: '_Tuple2', _0: _p6, _1: _p5});
					} else {
						return helper(
							{
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: _p4._0, _1: _p6},
								_1: _p5
							});
					}
				},
				_elm_community$random_extra$Random_List$choose(_p1._1));
		};
		return A2(
			_elm_lang$core$Random$map,
			_elm_lang$core$Tuple$first,
			helper(
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: list
				}));
	}
};

var _elm_community$result_extra$Result_Extra$merge = function (r) {
	var _p0 = r;
	if (_p0.ctor === 'Ok') {
		return _p0._0;
	} else {
		return _p0._0;
	}
};
var _elm_community$result_extra$Result_Extra$orElse = F2(
	function (ra, rb) {
		var _p1 = rb;
		if (_p1.ctor === 'Err') {
			return ra;
		} else {
			return rb;
		}
	});
var _elm_community$result_extra$Result_Extra$orElseLazy = F2(
	function (fra, rb) {
		var _p2 = rb;
		if (_p2.ctor === 'Err') {
			return fra(
				{ctor: '_Tuple0'});
		} else {
			return rb;
		}
	});
var _elm_community$result_extra$Result_Extra$orLazy = F2(
	function (ra, frb) {
		var _p3 = ra;
		if (_p3.ctor === 'Err') {
			return frb(
				{ctor: '_Tuple0'});
		} else {
			return ra;
		}
	});
var _elm_community$result_extra$Result_Extra$or = F2(
	function (ra, rb) {
		var _p4 = ra;
		if (_p4.ctor === 'Err') {
			return rb;
		} else {
			return ra;
		}
	});
var _elm_community$result_extra$Result_Extra$andMap = F2(
	function (ra, rb) {
		var _p5 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p5._1.ctor === 'Err') {
			return _elm_lang$core$Result$Err(_p5._1._0);
		} else {
			return A2(_elm_lang$core$Result$map, _p5._1._0, _p5._0);
		}
	});
var _elm_community$result_extra$Result_Extra$singleton = _elm_lang$core$Result$Ok;
var _elm_community$result_extra$Result_Extra$combine = A2(
	_elm_lang$core$List$foldr,
	_elm_lang$core$Result$map2(
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			})),
	_elm_lang$core$Result$Ok(
		{ctor: '[]'}));
var _elm_community$result_extra$Result_Extra$mapBoth = F3(
	function (errFunc, okFunc, result) {
		var _p6 = result;
		if (_p6.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				okFunc(_p6._0));
		} else {
			return _elm_lang$core$Result$Err(
				errFunc(_p6._0));
		}
	});
var _elm_community$result_extra$Result_Extra$unpack = F3(
	function (errFunc, okFunc, result) {
		var _p7 = result;
		if (_p7.ctor === 'Ok') {
			return okFunc(_p7._0);
		} else {
			return errFunc(_p7._0);
		}
	});
var _elm_community$result_extra$Result_Extra$unwrap = F3(
	function (defaultValue, okFunc, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return okFunc(_p8._0);
		} else {
			return defaultValue;
		}
	});
var _elm_community$result_extra$Result_Extra$extract = F2(
	function (f, x) {
		var _p9 = x;
		if (_p9.ctor === 'Ok') {
			return _p9._0;
		} else {
			return f(_p9._0);
		}
	});
var _elm_community$result_extra$Result_Extra$isErr = function (x) {
	var _p10 = x;
	if (_p10.ctor === 'Ok') {
		return false;
	} else {
		return true;
	}
};
var _elm_community$result_extra$Result_Extra$isOk = function (x) {
	var _p11 = x;
	if (_p11.ctor === 'Ok') {
		return true;
	} else {
		return false;
	}
};

var _elm_lang$core$Native_Bitwise = function() {

return {
	and: F2(function and(a, b) { return a & b; }),
	or: F2(function or(a, b) { return a | b; }),
	xor: F2(function xor(a, b) { return a ^ b; }),
	complement: function complement(a) { return ~a; },
	shiftLeftBy: F2(function(offset, a) { return a << offset; }),
	shiftRightBy: F2(function(offset, a) { return a >> offset; }),
	shiftRightZfBy: F2(function(offset, a) { return a >>> offset; })
};

}();

var _elm_lang$core$Bitwise$shiftRightZfBy = _elm_lang$core$Native_Bitwise.shiftRightZfBy;
var _elm_lang$core$Bitwise$shiftRightBy = _elm_lang$core$Native_Bitwise.shiftRightBy;
var _elm_lang$core$Bitwise$shiftLeftBy = _elm_lang$core$Native_Bitwise.shiftLeftBy;
var _elm_lang$core$Bitwise$complement = _elm_lang$core$Native_Bitwise.complement;
var _elm_lang$core$Bitwise$xor = _elm_lang$core$Native_Bitwise.xor;
var _elm_lang$core$Bitwise$or = _elm_lang$core$Native_Bitwise.or;
var _elm_lang$core$Bitwise$and = _elm_lang$core$Native_Bitwise.and;

var _elm_community$string_extra$String_Extra$accentRegex = function () {
	var matches = {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: '[à-æ]', _1: 'a'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: '[À-Æ]', _1: 'A'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'ç', _1: 'c'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'Ç', _1: 'C'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: '[è-ë]', _1: 'e'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '[È-Ë]', _1: 'E'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '[ì-ï]', _1: 'i'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '[Ì-Ï]', _1: 'I'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'ñ', _1: 'n'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'Ñ', _1: 'N'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '[ò-ö]', _1: 'o'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '[Ò-Ö]', _1: 'O'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '[ù-ü]', _1: 'u'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '[Ù-Ü]', _1: 'U'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'ý', _1: 'y'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'ÿ', _1: 'y'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'Ý', _1: 'Y'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	};
	return A2(
		_elm_lang$core$List$map,
		function (_p0) {
			var _p1 = _p0;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Regex$regex(_p1._0),
				_1: _p1._1
			};
		},
		matches);
}();
var _elm_community$string_extra$String_Extra$removeAccents = function (string) {
	if (_elm_lang$core$String$isEmpty(string)) {
		return string;
	} else {
		var do_regex_to_remove_acents = function (_p2) {
			var _p3 = _p2;
			return A3(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_p3._0,
				function (_p4) {
					return _p3._1;
				});
		};
		return A3(_elm_lang$core$List$foldl, do_regex_to_remove_acents, string, _elm_community$string_extra$String_Extra$accentRegex);
	}
};
var _elm_community$string_extra$String_Extra$nonEmpty = function (string) {
	return _elm_lang$core$String$isEmpty(string) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(string);
};
var _elm_community$string_extra$String_Extra$replacementCodePoint = 65533;
var _elm_community$string_extra$String_Extra$toCodePoints = function (string) {
	var allCodeUnits = A2(
		_elm_lang$core$List$map,
		_elm_lang$core$Char$toCode,
		_elm_lang$core$String$toList(string));
	var combineAndReverse = F2(
		function (codeUnits, accumulated) {
			combineAndReverse:
			while (true) {
				var _p5 = codeUnits;
				if (_p5.ctor === '[]') {
					return accumulated;
				} else {
					var _p9 = _p5._0;
					var _p8 = _p5._1;
					if ((_elm_lang$core$Native_Utils.cmp(_p9, 0) > -1) && (_elm_lang$core$Native_Utils.cmp(_p9, 55295) < 1)) {
						var _v3 = _p8,
							_v4 = {ctor: '::', _0: _p9, _1: accumulated};
						codeUnits = _v3;
						accumulated = _v4;
						continue combineAndReverse;
					} else {
						if ((_elm_lang$core$Native_Utils.cmp(_p9, 55296) > -1) && (_elm_lang$core$Native_Utils.cmp(_p9, 56319) < 1)) {
							var _p6 = _p8;
							if (_p6.ctor === '[]') {
								return {ctor: '::', _0: _elm_community$string_extra$String_Extra$replacementCodePoint, _1: accumulated};
							} else {
								var _p7 = _p6._0;
								if ((_elm_lang$core$Native_Utils.cmp(_p7, 56320) > -1) && (_elm_lang$core$Native_Utils.cmp(_p7, 57343) < 1)) {
									var codePoint = (65536 + ((_p9 - 55296) * 1024)) + (_p7 - 56320);
									var _v6 = _p6._1,
										_v7 = {ctor: '::', _0: codePoint, _1: accumulated};
									codeUnits = _v6;
									accumulated = _v7;
									continue combineAndReverse;
								} else {
									var _v8 = _p8,
										_v9 = {ctor: '::', _0: _elm_community$string_extra$String_Extra$replacementCodePoint, _1: accumulated};
									codeUnits = _v8;
									accumulated = _v9;
									continue combineAndReverse;
								}
							}
						} else {
							if ((_elm_lang$core$Native_Utils.cmp(_p9, 57344) > -1) && (_elm_lang$core$Native_Utils.cmp(_p9, 65535) < 1)) {
								var _v10 = _p8,
									_v11 = {ctor: '::', _0: _p9, _1: accumulated};
								codeUnits = _v10;
								accumulated = _v11;
								continue combineAndReverse;
							} else {
								var _v12 = _p8,
									_v13 = {ctor: '::', _0: _elm_community$string_extra$String_Extra$replacementCodePoint, _1: accumulated};
								codeUnits = _v12;
								accumulated = _v13;
								continue combineAndReverse;
							}
						}
					}
				}
			}
		});
	return _elm_lang$core$List$reverse(
		A2(
			combineAndReverse,
			allCodeUnits,
			{ctor: '[]'}));
};
var _elm_community$string_extra$String_Extra$fromCodePoints = function (allCodePoints) {
	var splitAndReverse = F2(
		function (codePoints, accumulated) {
			splitAndReverse:
			while (true) {
				var _p10 = codePoints;
				if (_p10.ctor === '[]') {
					return accumulated;
				} else {
					var _p12 = _p10._1;
					var _p11 = _p10._0;
					if ((_elm_lang$core$Native_Utils.cmp(_p11, 0) > -1) && (_elm_lang$core$Native_Utils.cmp(_p11, 55295) < 1)) {
						var _v15 = _p12,
							_v16 = {ctor: '::', _0: _p11, _1: accumulated};
						codePoints = _v15;
						accumulated = _v16;
						continue splitAndReverse;
					} else {
						if ((_elm_lang$core$Native_Utils.cmp(_p11, 65536) > -1) && (_elm_lang$core$Native_Utils.cmp(_p11, 1114111) < 1)) {
							var subtracted = _p11 - 65536;
							var leading = (subtracted >> 10) + 55296;
							var trailing = (subtracted & 1023) + 56320;
							var _v17 = _p12,
								_v18 = {
								ctor: '::',
								_0: trailing,
								_1: {ctor: '::', _0: leading, _1: accumulated}
							};
							codePoints = _v17;
							accumulated = _v18;
							continue splitAndReverse;
						} else {
							if ((_elm_lang$core$Native_Utils.cmp(_p11, 57344) > -1) && (_elm_lang$core$Native_Utils.cmp(_p11, 65535) < 1)) {
								var _v19 = _p12,
									_v20 = {ctor: '::', _0: _p11, _1: accumulated};
								codePoints = _v19;
								accumulated = _v20;
								continue splitAndReverse;
							} else {
								var _v21 = _p12,
									_v22 = {ctor: '::', _0: _elm_community$string_extra$String_Extra$replacementCodePoint, _1: accumulated};
								codePoints = _v21;
								accumulated = _v22;
								continue splitAndReverse;
							}
						}
					}
				}
			}
		});
	var allCodeUnits = _elm_lang$core$List$reverse(
		A2(
			splitAndReverse,
			allCodePoints,
			{ctor: '[]'}));
	return _elm_lang$core$String$fromList(
		A2(_elm_lang$core$List$map, _elm_lang$core$Char$fromCode, allCodeUnits));
};
var _elm_community$string_extra$String_Extra$fromFloat = _elm_lang$core$Basics$toString;
var _elm_community$string_extra$String_Extra$fromInt = _elm_lang$core$Basics$toString;
var _elm_community$string_extra$String_Extra$leftOfBack = F2(
	function (pattern, string) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(
				_elm_lang$core$Maybe$map,
				A2(_elm_lang$core$Basics$flip, _elm_lang$core$String$left, string),
				_elm_lang$core$List$head(
					_elm_lang$core$List$reverse(
						A2(_elm_lang$core$String$indexes, pattern, string)))));
	});
var _elm_community$string_extra$String_Extra$rightOfBack = F2(
	function (pattern, string) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(
				_elm_lang$core$Maybe$map,
				function (_p13) {
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$core$String$dropLeft,
						string,
						A2(
							F2(
								function (x, y) {
									return x + y;
								}),
							_elm_lang$core$String$length(pattern),
							_p13));
				},
				_elm_lang$core$List$head(
					_elm_lang$core$List$reverse(
						A2(_elm_lang$core$String$indexes, pattern, string)))));
	});
var _elm_community$string_extra$String_Extra$firstResultHelp = F2(
	function ($default, list) {
		firstResultHelp:
		while (true) {
			var _p14 = list;
			if (_p14.ctor === '[]') {
				return $default;
			} else {
				if (_p14._0.ctor === 'Just') {
					return _p14._0._0;
				} else {
					var _v24 = $default,
						_v25 = _p14._1;
					$default = _v24;
					list = _v25;
					continue firstResultHelp;
				}
			}
		}
	});
var _elm_community$string_extra$String_Extra$firstResult = function (list) {
	return A2(_elm_community$string_extra$String_Extra$firstResultHelp, '', list);
};
var _elm_community$string_extra$String_Extra$leftOf = F2(
	function (pattern, string) {
		return A2(
			_elm_lang$core$String$join,
			'',
			A2(
				_elm_lang$core$List$map,
				function (_p15) {
					return _elm_community$string_extra$String_Extra$firstResult(
						function (_) {
							return _.submatches;
						}(_p15));
				},
				A3(
					_elm_lang$core$Regex$find,
					_elm_lang$core$Regex$AtMost(1),
					_elm_lang$core$Regex$regex(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'^(.*?)',
							_elm_lang$core$Regex$escape(pattern))),
					string)));
	});
var _elm_community$string_extra$String_Extra$rightOf = F2(
	function (pattern, string) {
		return A2(
			_elm_lang$core$String$join,
			'',
			A2(
				_elm_lang$core$List$map,
				function (_p16) {
					return _elm_community$string_extra$String_Extra$firstResult(
						function (_) {
							return _.submatches;
						}(_p16));
				},
				A3(
					_elm_lang$core$Regex$find,
					_elm_lang$core$Regex$AtMost(1),
					_elm_lang$core$Regex$regex(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Regex$escape(pattern),
							'(.*)$')),
					string)));
	});
var _elm_community$string_extra$String_Extra$pluralize = F3(
	function (singular, plural, count) {
		return _elm_lang$core$Native_Utils.eq(count, 1) ? A2(_elm_lang$core$Basics_ops['++'], '1 ', singular) : A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(count),
			A2(_elm_lang$core$Basics_ops['++'], ' ', plural));
	});
var _elm_community$string_extra$String_Extra$stripTags = function (string) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('<\\/?[^>]+>'),
		_elm_lang$core$Basics$always(''),
		string);
};
var _elm_community$string_extra$String_Extra$toSentenceHelper = F3(
	function (lastPart, sentence, list) {
		toSentenceHelper:
		while (true) {
			var _p17 = list;
			if (_p17.ctor === '[]') {
				return sentence;
			} else {
				if (_p17._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						sentence,
						A2(_elm_lang$core$Basics_ops['++'], lastPart, _p17._0));
				} else {
					var _v27 = lastPart,
						_v28 = A2(
						_elm_lang$core$Basics_ops['++'],
						sentence,
						A2(_elm_lang$core$Basics_ops['++'], ', ', _p17._0)),
						_v29 = _p17._1;
					lastPart = _v27;
					sentence = _v28;
					list = _v29;
					continue toSentenceHelper;
				}
			}
		}
	});
var _elm_community$string_extra$String_Extra$toSentenceBaseCase = function (list) {
	var _p18 = list;
	_v30_2:
	do {
		if (_p18.ctor === '::') {
			if (_p18._1.ctor === '[]') {
				return _p18._0;
			} else {
				if (_p18._1._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p18._0,
						A2(_elm_lang$core$Basics_ops['++'], ' and ', _p18._1._0));
				} else {
					break _v30_2;
				}
			}
		} else {
			break _v30_2;
		}
	} while(false);
	return '';
};
var _elm_community$string_extra$String_Extra$toSentenceOxford = function (list) {
	var _p19 = list;
	if (((_p19.ctor === '::') && (_p19._1.ctor === '::')) && (_p19._1._1.ctor === '::')) {
		return A3(
			_elm_community$string_extra$String_Extra$toSentenceHelper,
			', and ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p19._0,
				A2(_elm_lang$core$Basics_ops['++'], ', ', _p19._1._0)),
			{ctor: '::', _0: _p19._1._1._0, _1: _p19._1._1._1});
	} else {
		return _elm_community$string_extra$String_Extra$toSentenceBaseCase(list);
	}
};
var _elm_community$string_extra$String_Extra$toSentence = function (list) {
	var _p20 = list;
	if (((_p20.ctor === '::') && (_p20._1.ctor === '::')) && (_p20._1._1.ctor === '::')) {
		return A3(
			_elm_community$string_extra$String_Extra$toSentenceHelper,
			' and ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p20._0,
				A2(_elm_lang$core$Basics_ops['++'], ', ', _p20._1._0)),
			{ctor: '::', _0: _p20._1._1._0, _1: _p20._1._1._1});
	} else {
		return _elm_community$string_extra$String_Extra$toSentenceBaseCase(list);
	}
};
var _elm_community$string_extra$String_Extra$ellipsisWith = F3(
	function (howLong, append, string) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(string),
			howLong) < 1) ? string : A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$String$left,
				howLong - _elm_lang$core$String$length(append),
				string),
			append);
	});
var _elm_community$string_extra$String_Extra$ellipsis = F2(
	function (howLong, string) {
		return A3(_elm_community$string_extra$String_Extra$ellipsisWith, howLong, '...', string);
	});
var _elm_community$string_extra$String_Extra$countOccurrences = F2(
	function (needle, haystack) {
		return (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(needle),
			0) || _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(haystack),
			0)) ? 0 : _elm_lang$core$List$length(
			A2(_elm_lang$core$String$indexes, needle, haystack));
	});
var _elm_community$string_extra$String_Extra$unindent = function (multilineSting) {
	var isNotWhitespace = function ($char) {
		return (!_elm_lang$core$Native_Utils.eq(
			$char,
			_elm_lang$core$Native_Utils.chr(' '))) && (!_elm_lang$core$Native_Utils.eq(
			$char,
			_elm_lang$core$Native_Utils.chr('\t')));
	};
	var countLeadingWhitespace = F2(
		function (count, line) {
			countLeadingWhitespace:
			while (true) {
				var _p21 = _elm_lang$core$String$uncons(line);
				if (_p21.ctor === 'Nothing') {
					return count;
				} else {
					var _p23 = _p21._0._1;
					var _p22 = _p21._0._0;
					switch (_p22.valueOf()) {
						case ' ':
							var _v35 = count + 1,
								_v36 = _p23;
							count = _v35;
							line = _v36;
							continue countLeadingWhitespace;
						case '\t':
							var _v37 = count + 1,
								_v38 = _p23;
							count = _v37;
							line = _v38;
							continue countLeadingWhitespace;
						default:
							return count;
					}
				}
			}
		});
	var lines = _elm_lang$core$String$lines(multilineSting);
	var minLead = A2(
		_elm_lang$core$Maybe$withDefault,
		0,
		_elm_lang$core$List$minimum(
			A2(
				_elm_lang$core$List$map,
				countLeadingWhitespace(0),
				A2(
					_elm_lang$core$List$filter,
					_elm_lang$core$String$any(isNotWhitespace),
					lines))));
	return A2(
		_elm_lang$core$String$join,
		'\n',
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$String$dropLeft(minLead),
			lines));
};
var _elm_community$string_extra$String_Extra$dasherize = function (string) {
	return _elm_lang$core$String$toLower(
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('[_-\\s]+'),
			_elm_lang$core$Basics$always('-'),
			A4(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('([A-Z])'),
				function (_p24) {
					return A2(
						_elm_lang$core$String$append,
						'-',
						function (_) {
							return _.match;
						}(_p24));
				},
				_elm_lang$core$String$trim(string))));
};
var _elm_community$string_extra$String_Extra$underscored = function (string) {
	return _elm_lang$core$String$toLower(
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('[_-\\s]+'),
			_elm_lang$core$Basics$always('_'),
			A4(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('([a-z\\d])([A-Z]+)'),
				function (_p25) {
					return A2(
						_elm_lang$core$String$join,
						'_',
						A2(
							_elm_lang$core$List$filterMap,
							_elm_lang$core$Basics$identity,
							function (_) {
								return _.submatches;
							}(_p25)));
				},
				_elm_lang$core$String$trim(string))));
};
var _elm_community$string_extra$String_Extra$unsurround = F2(
	function (wrap, string) {
		if (A2(_elm_lang$core$String$startsWith, wrap, string) && A2(_elm_lang$core$String$endsWith, wrap, string)) {
			var length = _elm_lang$core$String$length(wrap);
			return A2(
				_elm_lang$core$String$dropRight,
				length,
				A2(_elm_lang$core$String$dropLeft, length, string));
		} else {
			return string;
		}
	});
var _elm_community$string_extra$String_Extra$unquote = function (string) {
	return A2(_elm_community$string_extra$String_Extra$unsurround, '\"', string);
};
var _elm_community$string_extra$String_Extra$surround = F2(
	function (wrap, string) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			wrap,
			A2(_elm_lang$core$Basics_ops['++'], string, wrap));
	});
var _elm_community$string_extra$String_Extra$quote = function (string) {
	return A2(_elm_community$string_extra$String_Extra$surround, '\"', string);
};
var _elm_community$string_extra$String_Extra$camelize = function (string) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('[-_\\s]+(.)?'),
		function (_p26) {
			var _p27 = _p26;
			var _p28 = _p27.submatches;
			if ((_p28.ctor === '::') && (_p28._0.ctor === 'Just')) {
				return _elm_lang$core$String$toUpper(_p28._0._0);
			} else {
				return '';
			}
		},
		_elm_lang$core$String$trim(string));
};
var _elm_community$string_extra$String_Extra$isBlank = function (string) {
	return A2(
		_elm_lang$core$Regex$contains,
		_elm_lang$core$Regex$regex('^\\s*$'),
		string);
};
var _elm_community$string_extra$String_Extra$clean = function (string) {
	return _elm_lang$core$String$trim(
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('\\s\\s+'),
			_elm_lang$core$Basics$always(' '),
			string));
};
var _elm_community$string_extra$String_Extra$softBreakRegexp = function (width) {
	return _elm_lang$core$Regex$regex(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'.{1,',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(width),
				'}(\\s+|$)|\\S+?(\\s+|$)')));
};
var _elm_community$string_extra$String_Extra$softEllipsis = F2(
	function (howLong, string) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(string),
			howLong) < 1) ? string : A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$String$append,
			'...',
			A4(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('([\\.,;:\\s])+$'),
				_elm_lang$core$Basics$always(''),
				A2(
					_elm_lang$core$String$join,
					'',
					A2(
						_elm_lang$core$List$map,
						function (_) {
							return _.match;
						},
						A3(
							_elm_lang$core$Regex$find,
							_elm_lang$core$Regex$AtMost(1),
							_elm_community$string_extra$String_Extra$softBreakRegexp(howLong),
							string)))));
	});
var _elm_community$string_extra$String_Extra$softBreak = F2(
	function (width, string) {
		return (_elm_lang$core$Native_Utils.cmp(width, 0) < 1) ? {ctor: '[]'} : A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.match;
			},
			A3(
				_elm_lang$core$Regex$find,
				_elm_lang$core$Regex$All,
				_elm_community$string_extra$String_Extra$softBreakRegexp(width),
				string));
	});
var _elm_community$string_extra$String_Extra$softWrapWith = F3(
	function (width, separator, string) {
		return A2(
			_elm_lang$core$String$join,
			separator,
			A2(_elm_community$string_extra$String_Extra$softBreak, width, string));
	});
var _elm_community$string_extra$String_Extra$softWrap = F2(
	function (width, string) {
		return A3(_elm_community$string_extra$String_Extra$softWrapWith, width, '\n', string);
	});
var _elm_community$string_extra$String_Extra$breaker = F3(
	function (width, string, acc) {
		breaker:
		while (true) {
			var _p29 = string;
			if (_p29 === '') {
				return _elm_lang$core$List$reverse(acc);
			} else {
				var _v42 = width,
					_v43 = A2(_elm_lang$core$String$dropLeft, width, string),
					_v44 = {
					ctor: '::',
					_0: A3(_elm_lang$core$String$slice, 0, width, string),
					_1: acc
				};
				width = _v42;
				string = _v43;
				acc = _v44;
				continue breaker;
			}
		}
	});
var _elm_community$string_extra$String_Extra$break = F2(
	function (width, string) {
		return (_elm_lang$core$Native_Utils.eq(width, 0) || _elm_lang$core$Native_Utils.eq(string, '')) ? {
			ctor: '::',
			_0: string,
			_1: {ctor: '[]'}
		} : A3(
			_elm_community$string_extra$String_Extra$breaker,
			width,
			string,
			{ctor: '[]'});
	});
var _elm_community$string_extra$String_Extra$wrapWith = F3(
	function (width, separator, string) {
		return A2(
			_elm_lang$core$String$join,
			separator,
			A2(_elm_community$string_extra$String_Extra$break, width, string));
	});
var _elm_community$string_extra$String_Extra$wrap = F2(
	function (width, string) {
		return A3(_elm_community$string_extra$String_Extra$wrapWith, width, '\n', string);
	});
var _elm_community$string_extra$String_Extra$replaceSlice = F4(
	function (substitution, start, end, string) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A3(_elm_lang$core$String$slice, 0, start, string),
			A2(
				_elm_lang$core$Basics_ops['++'],
				substitution,
				A3(
					_elm_lang$core$String$slice,
					end,
					_elm_lang$core$String$length(string),
					string)));
	});
var _elm_community$string_extra$String_Extra$insertAt = F3(
	function (insert, pos, string) {
		return A4(_elm_community$string_extra$String_Extra$replaceSlice, insert, pos, pos, string);
	});
var _elm_community$string_extra$String_Extra$replace = F3(
	function (search, substitution, string) {
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex(
				_elm_lang$core$Regex$escape(search)),
			function (_p30) {
				return substitution;
			},
			string);
	});
var _elm_community$string_extra$String_Extra$changeCase = F2(
	function (mutator, word) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(
				_elm_lang$core$Maybe$map,
				function (_p31) {
					var _p32 = _p31;
					return A2(
						_elm_lang$core$String$cons,
						mutator(_p32._0),
						_p32._1);
				},
				_elm_lang$core$String$uncons(word)));
	});
var _elm_community$string_extra$String_Extra$toSentenceCase = function (word) {
	return A2(_elm_community$string_extra$String_Extra$changeCase, _elm_lang$core$Char$toUpper, word);
};
var _elm_community$string_extra$String_Extra$toTitleCase = function (ws) {
	var uppercaseMatch = A3(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('\\w+'),
		function (_p33) {
			return _elm_community$string_extra$String_Extra$toSentenceCase(
				function (_) {
					return _.match;
				}(_p33));
		});
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('^([a-z])|\\s+([a-z])'),
		function (_p34) {
			return uppercaseMatch(
				function (_) {
					return _.match;
				}(_p34));
		},
		ws);
};
var _elm_community$string_extra$String_Extra$classify = function (string) {
	return _elm_community$string_extra$String_Extra$toSentenceCase(
		A3(
			_elm_community$string_extra$String_Extra$replace,
			' ',
			'',
			_elm_community$string_extra$String_Extra$camelize(
				A4(
					_elm_lang$core$Regex$replace,
					_elm_lang$core$Regex$All,
					_elm_lang$core$Regex$regex('[\\W_]'),
					_elm_lang$core$Basics$always(' '),
					string))));
};
var _elm_community$string_extra$String_Extra$humanize = function (string) {
	return _elm_community$string_extra$String_Extra$toSentenceCase(
		_elm_lang$core$String$toLower(
			_elm_lang$core$String$trim(
				A4(
					_elm_lang$core$Regex$replace,
					_elm_lang$core$Regex$All,
					_elm_lang$core$Regex$regex('_id$|[-_\\s]+'),
					_elm_lang$core$Basics$always(' '),
					A4(
						_elm_lang$core$Regex$replace,
						_elm_lang$core$Regex$All,
						_elm_lang$core$Regex$regex('[A-Z]'),
						function (_p35) {
							return A2(
								_elm_lang$core$String$append,
								'-',
								function (_) {
									return _.match;
								}(_p35));
						},
						string)))));
};
var _elm_community$string_extra$String_Extra$decapitalize = function (word) {
	return A2(_elm_community$string_extra$String_Extra$changeCase, _elm_lang$core$Char$toLower, word);
};

var _elm_lang$http$Native_Http = function() {


// ENCODING AND DECODING

function encodeUri(string)
{
	return encodeURIComponent(string);
}

function decodeUri(string)
{
	try
	{
		return _elm_lang$core$Maybe$Just(decodeURIComponent(string));
	}
	catch(e)
	{
		return _elm_lang$core$Maybe$Nothing;
	}
}


// SEND REQUEST

function toTask(request, maybeProgress)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var xhr = new XMLHttpRequest();

		configureProgress(xhr, maybeProgress);

		xhr.addEventListener('error', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NetworkError' }));
		});
		xhr.addEventListener('timeout', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'Timeout' }));
		});
		xhr.addEventListener('load', function() {
			callback(handleResponse(xhr, request.expect.responseToResult));
		});

		try
		{
			xhr.open(request.method, request.url, true);
		}
		catch (e)
		{
			return callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'BadUrl', _0: request.url }));
		}

		configureRequest(xhr, request);
		send(xhr, request.body);

		return function() { xhr.abort(); };
	});
}

function configureProgress(xhr, maybeProgress)
{
	if (maybeProgress.ctor === 'Nothing')
	{
		return;
	}

	xhr.addEventListener('progress', function(event) {
		if (!event.lengthComputable)
		{
			return;
		}
		_elm_lang$core$Native_Scheduler.rawSpawn(maybeProgress._0({
			bytes: event.loaded,
			bytesExpected: event.total
		}));
	});
}

function configureRequest(xhr, request)
{
	function setHeader(pair)
	{
		xhr.setRequestHeader(pair._0, pair._1);
	}

	A2(_elm_lang$core$List$map, setHeader, request.headers);
	xhr.responseType = request.expect.responseType;
	xhr.withCredentials = request.withCredentials;

	if (request.timeout.ctor === 'Just')
	{
		xhr.timeout = request.timeout._0;
	}
}

function send(xhr, body)
{
	switch (body.ctor)
	{
		case 'EmptyBody':
			xhr.send();
			return;

		case 'StringBody':
			xhr.setRequestHeader('Content-Type', body._0);
			xhr.send(body._1);
			return;

		case 'FormDataBody':
			xhr.send(body._0);
			return;
	}
}


// RESPONSES

function handleResponse(xhr, responseToResult)
{
	var response = toResponse(xhr);

	if (xhr.status < 200 || 300 <= xhr.status)
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadStatus',
			_0: response
		});
	}

	var result = responseToResult(response);

	if (result.ctor === 'Ok')
	{
		return _elm_lang$core$Native_Scheduler.succeed(result._0);
	}
	else
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadPayload',
			_0: result._0,
			_1: response
		});
	}
}

function toResponse(xhr)
{
	return {
		status: { code: xhr.status, message: xhr.statusText },
		headers: parseHeaders(xhr.getAllResponseHeaders()),
		url: xhr.responseURL,
		body: xhr.response
	};
}

function parseHeaders(rawHeaders)
{
	var headers = _elm_lang$core$Dict$empty;

	if (!rawHeaders)
	{
		return headers;
	}

	var headerPairs = rawHeaders.split('\u000d\u000a');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf('\u003a\u0020');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3(_elm_lang$core$Dict$update, key, function(oldValue) {
				if (oldValue.ctor === 'Just')
				{
					return _elm_lang$core$Maybe$Just(value + ', ' + oldValue._0);
				}
				return _elm_lang$core$Maybe$Just(value);
			}, headers);
		}
	}

	return headers;
}


// EXPECTORS

function expectStringResponse(responseToResult)
{
	return {
		responseType: 'text',
		responseToResult: responseToResult
	};
}

function mapExpect(func, expect)
{
	return {
		responseType: expect.responseType,
		responseToResult: function(response) {
			var convertedResponse = expect.responseToResult(response);
			return A2(_elm_lang$core$Result$map, func, convertedResponse);
		}
	};
}


// BODY

function multipart(parts)
{
	var formData = new FormData();

	while (parts.ctor !== '[]')
	{
		var part = parts._0;
		formData.append(part._0, part._1);
		parts = parts._1;
	}

	return { ctor: 'FormDataBody', _0: formData };
}

return {
	toTask: F2(toTask),
	expectStringResponse: expectStringResponse,
	mapExpect: F2(mapExpect),
	multipart: multipart,
	encodeUri: encodeUri,
	decodeUri: decodeUri
};

}();

var _elm_lang$http$Http_Internal$map = F2(
	function (func, request) {
		return _elm_lang$core$Native_Utils.update(
			request,
			{
				expect: A2(_elm_lang$http$Native_Http.mapExpect, func, request.expect)
			});
	});
var _elm_lang$http$Http_Internal$RawRequest = F7(
	function (a, b, c, d, e, f, g) {
		return {method: a, headers: b, url: c, body: d, expect: e, timeout: f, withCredentials: g};
	});
var _elm_lang$http$Http_Internal$Request = function (a) {
	return {ctor: 'Request', _0: a};
};
var _elm_lang$http$Http_Internal$Expect = {ctor: 'Expect'};
var _elm_lang$http$Http_Internal$FormDataBody = {ctor: 'FormDataBody'};
var _elm_lang$http$Http_Internal$StringBody = F2(
	function (a, b) {
		return {ctor: 'StringBody', _0: a, _1: b};
	});
var _elm_lang$http$Http_Internal$EmptyBody = {ctor: 'EmptyBody'};
var _elm_lang$http$Http_Internal$Header = F2(
	function (a, b) {
		return {ctor: 'Header', _0: a, _1: b};
	});

var _elm_lang$http$Http$decodeUri = _elm_lang$http$Native_Http.decodeUri;
var _elm_lang$http$Http$encodeUri = _elm_lang$http$Native_Http.encodeUri;
var _elm_lang$http$Http$expectStringResponse = _elm_lang$http$Native_Http.expectStringResponse;
var _elm_lang$http$Http$expectJson = function (decoder) {
	return _elm_lang$http$Http$expectStringResponse(
		function (response) {
			return A2(_elm_lang$core$Json_Decode$decodeString, decoder, response.body);
		});
};
var _elm_lang$http$Http$expectString = _elm_lang$http$Http$expectStringResponse(
	function (response) {
		return _elm_lang$core$Result$Ok(response.body);
	});
var _elm_lang$http$Http$multipartBody = _elm_lang$http$Native_Http.multipart;
var _elm_lang$http$Http$stringBody = _elm_lang$http$Http_Internal$StringBody;
var _elm_lang$http$Http$jsonBody = function (value) {
	return A2(
		_elm_lang$http$Http_Internal$StringBody,
		'application/json',
		A2(_elm_lang$core$Json_Encode$encode, 0, value));
};
var _elm_lang$http$Http$emptyBody = _elm_lang$http$Http_Internal$EmptyBody;
var _elm_lang$http$Http$header = _elm_lang$http$Http_Internal$Header;
var _elm_lang$http$Http$request = _elm_lang$http$Http_Internal$Request;
var _elm_lang$http$Http$post = F3(
	function (url, body, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {ctor: '[]'},
				url: url,
				body: body,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$get = F2(
	function (url, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'GET',
				headers: {ctor: '[]'},
				url: url,
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$getString = function (url) {
	return _elm_lang$http$Http$request(
		{
			method: 'GET',
			headers: {ctor: '[]'},
			url: url,
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectString,
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
var _elm_lang$http$Http$toTask = function (_p0) {
	var _p1 = _p0;
	return A2(_elm_lang$http$Native_Http.toTask, _p1._0, _elm_lang$core$Maybe$Nothing);
};
var _elm_lang$http$Http$send = F2(
	function (resultToMessage, request) {
		return A2(
			_elm_lang$core$Task$attempt,
			resultToMessage,
			_elm_lang$http$Http$toTask(request));
	});
var _elm_lang$http$Http$Response = F4(
	function (a, b, c, d) {
		return {url: a, status: b, headers: c, body: d};
	});
var _elm_lang$http$Http$BadPayload = F2(
	function (a, b) {
		return {ctor: 'BadPayload', _0: a, _1: b};
	});
var _elm_lang$http$Http$BadStatus = function (a) {
	return {ctor: 'BadStatus', _0: a};
};
var _elm_lang$http$Http$NetworkError = {ctor: 'NetworkError'};
var _elm_lang$http$Http$Timeout = {ctor: 'Timeout'};
var _elm_lang$http$Http$BadUrl = function (a) {
	return {ctor: 'BadUrl', _0: a};
};
var _elm_lang$http$Http$StringPart = F2(
	function (a, b) {
		return {ctor: 'StringPart', _0: a, _1: b};
	});
var _elm_lang$http$Http$stringPart = _elm_lang$http$Http$StringPart;

var _elm_lang$keyboard$Keyboard$onSelfMsg = F3(
	function (router, _p0, state) {
		var _p1 = _p0;
		var _p2 = A2(_elm_lang$core$Dict$get, _p1.category, state);
		if (_p2.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (tagger) {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					tagger(_p1.keyCode));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p3) {
					return _elm_lang$core$Task$succeed(state);
				},
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p2._0.taggers)));
		}
	});
var _elm_lang$keyboard$Keyboard_ops = _elm_lang$keyboard$Keyboard_ops || {};
_elm_lang$keyboard$Keyboard_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p4) {
				return task2;
			},
			task1);
	});
var _elm_lang$keyboard$Keyboard$init = _elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty);
var _elm_lang$keyboard$Keyboard$categorizeHelpHelp = F2(
	function (value, maybeValues) {
		var _p5 = maybeValues;
		if (_p5.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: value,
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$core$Maybe$Just(
				{ctor: '::', _0: value, _1: _p5._0});
		}
	});
var _elm_lang$keyboard$Keyboard$categorizeHelp = F2(
	function (subs, subDict) {
		categorizeHelp:
		while (true) {
			var _p6 = subs;
			if (_p6.ctor === '[]') {
				return subDict;
			} else {
				var _v4 = _p6._1,
					_v5 = A3(
					_elm_lang$core$Dict$update,
					_p6._0._0,
					_elm_lang$keyboard$Keyboard$categorizeHelpHelp(_p6._0._1),
					subDict);
				subs = _v4;
				subDict = _v5;
				continue categorizeHelp;
			}
		}
	});
var _elm_lang$keyboard$Keyboard$categorize = function (subs) {
	return A2(_elm_lang$keyboard$Keyboard$categorizeHelp, subs, _elm_lang$core$Dict$empty);
};
var _elm_lang$keyboard$Keyboard$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$keyboard$Keyboard$subscription = _elm_lang$core$Native_Platform.leaf('Keyboard');
var _elm_lang$keyboard$Keyboard$Watcher = F2(
	function (a, b) {
		return {taggers: a, pid: b};
	});
var _elm_lang$keyboard$Keyboard$Msg = F2(
	function (a, b) {
		return {category: a, keyCode: b};
	});
var _elm_lang$keyboard$Keyboard$onEffects = F3(
	function (router, newSubs, oldState) {
		var rightStep = F3(
			function (category, taggers, task) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (pid) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$core$Dict$insert,
										category,
										A2(_elm_lang$keyboard$Keyboard$Watcher, taggers, pid),
										state));
							},
							_elm_lang$core$Process$spawn(
								A3(
									_elm_lang$dom$Dom_LowLevel$onDocument,
									category,
									_elm_lang$keyboard$Keyboard$keyCode,
									function (_p7) {
										return A2(
											_elm_lang$core$Platform$sendToSelf,
											router,
											A2(_elm_lang$keyboard$Keyboard$Msg, category, _p7));
									})));
					},
					task);
			});
		var bothStep = F4(
			function (category, _p8, taggers, task) {
				var _p9 = _p8;
				return A2(
					_elm_lang$core$Task$map,
					A2(
						_elm_lang$core$Dict$insert,
						category,
						A2(_elm_lang$keyboard$Keyboard$Watcher, taggers, _p9.pid)),
					task);
			});
		var leftStep = F3(
			function (category, _p10, task) {
				var _p11 = _p10;
				return A2(
					_elm_lang$keyboard$Keyboard_ops['&>'],
					_elm_lang$core$Process$kill(_p11.pid),
					task);
			});
		return A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			oldState,
			_elm_lang$keyboard$Keyboard$categorize(newSubs),
			_elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty));
	});
var _elm_lang$keyboard$Keyboard$MySub = F2(
	function (a, b) {
		return {ctor: 'MySub', _0: a, _1: b};
	});
var _elm_lang$keyboard$Keyboard$presses = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keypress', tagger));
};
var _elm_lang$keyboard$Keyboard$downs = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keydown', tagger));
};
var _elm_lang$keyboard$Keyboard$ups = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keyup', tagger));
};
var _elm_lang$keyboard$Keyboard$subMap = F2(
	function (func, _p12) {
		var _p13 = _p12;
		return A2(
			_elm_lang$keyboard$Keyboard$MySub,
			_p13._0,
			function (_p14) {
				return func(
					_p13._1(_p14));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Keyboard'] = {pkg: 'elm-lang/keyboard', init: _elm_lang$keyboard$Keyboard$init, onEffects: _elm_lang$keyboard$Keyboard$onEffects, onSelfMsg: _elm_lang$keyboard$Keyboard$onSelfMsg, tag: 'sub', subMap: _elm_lang$keyboard$Keyboard$subMap};

var _mgold$elm_nonempty_list$List_Nonempty$foldl1 = F2(
	function (f, _p0) {
		var _p1 = _p0;
		return A3(_elm_lang$core$List$foldl, f, _p1._0, _p1._1);
	});
var _mgold$elm_nonempty_list$List_Nonempty$foldl = F3(
	function (f, b, _p2) {
		var _p3 = _p2;
		return A3(
			_elm_lang$core$List$foldl,
			f,
			b,
			{ctor: '::', _0: _p3._0, _1: _p3._1});
	});
var _mgold$elm_nonempty_list$List_Nonempty$any = F2(
	function (f, _p4) {
		var _p5 = _p4;
		return f(_p5._0) || A2(_elm_lang$core$List$any, f, _p5._1);
	});
var _mgold$elm_nonempty_list$List_Nonempty$all = F2(
	function (f, _p6) {
		var _p7 = _p6;
		return f(_p7._0) && A2(_elm_lang$core$List$all, f, _p7._1);
	});
var _mgold$elm_nonempty_list$List_Nonempty$member = F2(
	function (y, _p8) {
		var _p9 = _p8;
		return _elm_lang$core$Native_Utils.eq(_p9._0, y) || A2(_elm_lang$core$List$member, y, _p9._1);
	});
var _mgold$elm_nonempty_list$List_Nonempty$length = function (_p10) {
	var _p11 = _p10;
	return _elm_lang$core$List$length(_p11._1) + 1;
};
var _mgold$elm_nonempty_list$List_Nonempty$isSingleton = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$List$isEmpty(_p13._1);
};
var _mgold$elm_nonempty_list$List_Nonempty$get = F2(
	function (i, _p14) {
		var _p15 = _p14;
		var find = F2(
			function (k, ys) {
				find:
				while (true) {
					var _p16 = ys;
					if (_p16.ctor === '[]') {
						return _elm_lang$core$Native_Utils.crashCase(
							'List.Nonempty',
							{
								start: {line: 131, column: 13},
								end: {line: 139, column: 40}
							},
							_p16)('This can\'t happen: attempted to take value at safe index from empty list');
					} else {
						if (_elm_lang$core$Native_Utils.eq(k, 0)) {
							return _p16._0;
						} else {
							var _v9 = k - 1,
								_v10 = _p16._1;
							k = _v9;
							ys = _v10;
							continue find;
						}
					}
				}
			});
		var j = A2(
			_elm_lang$core$Basics_ops['%'],
			i,
			_mgold$elm_nonempty_list$List_Nonempty$length(_p15));
		return _elm_lang$core$Native_Utils.eq(j, 0) ? _p15._0 : A2(find, j - 1, _p15._1);
	});
var _mgold$elm_nonempty_list$List_Nonempty$sample = function (nonempty) {
	return A2(
		_elm_lang$core$Random$map,
		function (i) {
			return A2(_mgold$elm_nonempty_list$List_Nonempty$get, i, nonempty);
		},
		A2(
			_elm_lang$core$Random$int,
			0,
			_mgold$elm_nonempty_list$List_Nonempty$length(nonempty) - 1));
};
var _mgold$elm_nonempty_list$List_Nonempty$toList = function (_p18) {
	var _p19 = _p18;
	return {ctor: '::', _0: _p19._0, _1: _p19._1};
};
var _mgold$elm_nonempty_list$List_Nonempty$tail = function (_p20) {
	var _p21 = _p20;
	return _p21._1;
};
var _mgold$elm_nonempty_list$List_Nonempty$head = function (_p22) {
	var _p23 = _p22;
	return _p23._0;
};
var _mgold$elm_nonempty_list$List_Nonempty$Nonempty = F2(
	function (a, b) {
		return {ctor: 'Nonempty', _0: a, _1: b};
	});
var _mgold$elm_nonempty_list$List_Nonempty$fromElement = function (x) {
	return A2(
		_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
		x,
		{ctor: '[]'});
};
var _mgold$elm_nonempty_list$List_Nonempty$fromList = function (ys) {
	var _p24 = ys;
	if (_p24.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p24._0, _p24._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _mgold$elm_nonempty_list$List_Nonempty$cons = F2(
	function (y, _p25) {
		var _p26 = _p25;
		return A2(
			_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
			y,
			{ctor: '::', _0: _p26._0, _1: _p26._1});
	});
var _mgold$elm_nonempty_list$List_Nonempty_ops = _mgold$elm_nonempty_list$List_Nonempty_ops || {};
_mgold$elm_nonempty_list$List_Nonempty_ops[':::'] = _mgold$elm_nonempty_list$List_Nonempty$cons;
var _mgold$elm_nonempty_list$List_Nonempty$append = F2(
	function (_p28, _p27) {
		var _p29 = _p28;
		var _p30 = _p27;
		return A2(
			_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
			_p29._0,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p29._1,
				{ctor: '::', _0: _p30._0, _1: _p30._1}));
	});
var _mgold$elm_nonempty_list$List_Nonempty$pop = function (_p31) {
	var _p32 = _p31;
	var _p34 = _p32._1;
	var _p33 = _p34;
	if (_p33.ctor === '[]') {
		return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p32._0, _p34);
	} else {
		return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p33._0, _p33._1);
	}
};
var _mgold$elm_nonempty_list$List_Nonempty$reverse = function (_p35) {
	var _p36 = _p35;
	var revapp = function (_p37) {
		revapp:
		while (true) {
			var _p38 = _p37;
			var _p41 = _p38._0;
			var _p40 = _p38._1;
			var _p39 = _p38._2;
			if (_p39.ctor === '[]') {
				return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p40, _p41);
			} else {
				var _v23 = {
					ctor: '_Tuple3',
					_0: {ctor: '::', _0: _p40, _1: _p41},
					_1: _p39._0,
					_2: _p39._1
				};
				_p37 = _v23;
				continue revapp;
			}
		}
	};
	return revapp(
		{
			ctor: '_Tuple3',
			_0: {ctor: '[]'},
			_1: _p36._0,
			_2: _p36._1
		});
};
var _mgold$elm_nonempty_list$List_Nonempty$concat = function (_p42) {
	var _p43 = _p42;
	var _p44 = _p43._0;
	var tl = A2(
		_elm_lang$core$Basics_ops['++'],
		_mgold$elm_nonempty_list$List_Nonempty$tail(_p44),
		_elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, _mgold$elm_nonempty_list$List_Nonempty$toList, _p43._1)));
	var hd = _mgold$elm_nonempty_list$List_Nonempty$head(_p44);
	return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, hd, tl);
};
var _mgold$elm_nonempty_list$List_Nonempty$replaceHead = F2(
	function (y, _p45) {
		var _p46 = _p45;
		return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, y, _p46._1);
	});
var _mgold$elm_nonempty_list$List_Nonempty$replaceTail = F2(
	function (ys, _p47) {
		var _p48 = _p47;
		return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p48._0, ys);
	});
var _mgold$elm_nonempty_list$List_Nonempty$dropTail = function (_p49) {
	var _p50 = _p49;
	return A2(
		_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
		_p50._0,
		{ctor: '[]'});
};
var _mgold$elm_nonempty_list$List_Nonempty$map = F2(
	function (f, _p51) {
		var _p52 = _p51;
		return A2(
			_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
			f(_p52._0),
			A2(_elm_lang$core$List$map, f, _p52._1));
	});
var _mgold$elm_nonempty_list$List_Nonempty$concatMap = F2(
	function (f, xs) {
		return _mgold$elm_nonempty_list$List_Nonempty$concat(
			A2(_mgold$elm_nonempty_list$List_Nonempty$map, f, xs));
	});
var _mgold$elm_nonempty_list$List_Nonempty$map2 = F3(
	function (f, _p54, _p53) {
		var _p55 = _p54;
		var _p56 = _p53;
		return A2(
			_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
			A2(f, _p55._0, _p56._0),
			A3(_elm_lang$core$List$map2, f, _p55._1, _p56._1));
	});
var _mgold$elm_nonempty_list$List_Nonempty$andMap = _mgold$elm_nonempty_list$List_Nonempty$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _mgold$elm_nonempty_list$List_Nonempty$indexedMap = F2(
	function (f, _p57) {
		var _p58 = _p57;
		var wrapped = F2(
			function (i, d) {
				return A2(f, i + 1, d);
			});
		return A2(
			_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
			A2(f, 0, _p58._0),
			A2(_elm_lang$core$List$indexedMap, wrapped, _p58._1));
	});
var _mgold$elm_nonempty_list$List_Nonempty$filter = F3(
	function (p, d, _p59) {
		var _p60 = _p59;
		var _p63 = _p60._1;
		var _p62 = _p60._0;
		if (p(_p62)) {
			return A2(
				_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
				_p62,
				A2(_elm_lang$core$List$filter, p, _p63));
		} else {
			var _p61 = A2(_elm_lang$core$List$filter, p, _p63);
			if (_p61.ctor === '[]') {
				return A2(
					_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
					d,
					{ctor: '[]'});
			} else {
				return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p61._0, _p61._1);
			}
		}
	});
var _mgold$elm_nonempty_list$List_Nonempty$sort = function (_p64) {
	var _p65 = _p64;
	var _p66 = _elm_lang$core$List$sort(
		{ctor: '::', _0: _p65._0, _1: _p65._1});
	if (_p66.ctor === '::') {
		return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p66._0, _p66._1);
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'List.Nonempty',
			{
				start: {line: 360, column: 5},
				end: {line: 365, column: 92}
			},
			_p66)('This can\'t happen: sorting a nonempty list returned an empty list');
	}
};
var _mgold$elm_nonempty_list$List_Nonempty$sortBy = F2(
	function (f, _p68) {
		var _p69 = _p68;
		var _p70 = A2(
			_elm_lang$core$List$sortBy,
			f,
			{ctor: '::', _0: _p69._0, _1: _p69._1});
		if (_p70.ctor === '::') {
			return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p70._0, _p70._1);
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'List.Nonempty',
				{
					start: {line: 372, column: 5},
					end: {line: 377, column: 94}
				},
				_p70)('This can\'t happen: sortBying a nonempty list returned an empty list');
		}
	});
var _mgold$elm_nonempty_list$List_Nonempty$sortWith = F2(
	function (f, _p72) {
		var _p73 = _p72;
		var _p74 = A2(
			_elm_lang$core$List$sortWith,
			f,
			{ctor: '::', _0: _p73._0, _1: _p73._1});
		if (_p74.ctor === '::') {
			return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p74._0, _p74._1);
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'List.Nonempty',
				{
					start: {line: 384, column: 5},
					end: {line: 389, column: 96}
				},
				_p74)('This can\'t happen: sortWithing a nonempty list returned an empty list');
		}
	});
var _mgold$elm_nonempty_list$List_Nonempty$dedup = function (_p76) {
	var _p77 = _p76;
	var dedupe = F3(
		function (prev, done, next) {
			dedupe:
			while (true) {
				var _p78 = next;
				if (_p78.ctor === '[]') {
					return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, prev, done);
				} else {
					var _p80 = _p78._1;
					var _p79 = _p78._0;
					if (_elm_lang$core$Native_Utils.eq(_p79, prev)) {
						var _v42 = prev,
							_v43 = done,
							_v44 = _p80;
						prev = _v42;
						done = _v43;
						next = _v44;
						continue dedupe;
					} else {
						var _v45 = _p79,
							_v46 = {ctor: '::', _0: prev, _1: done},
							_v47 = _p80;
						prev = _v45;
						done = _v46;
						next = _v47;
						continue dedupe;
					}
				}
			}
		});
	return _mgold$elm_nonempty_list$List_Nonempty$reverse(
		A3(
			dedupe,
			_p77._0,
			{ctor: '[]'},
			_p77._1));
};
var _mgold$elm_nonempty_list$List_Nonempty$uniq = function (_p81) {
	var _p82 = _p81;
	var _p86 = _p82._0;
	var unique = F3(
		function (seen, done, next) {
			unique:
			while (true) {
				var _p83 = next;
				if (_p83.ctor === '[]') {
					return done;
				} else {
					var _p85 = _p83._1;
					var _p84 = _p83._0;
					if (A2(_elm_lang$core$List$member, _p84, seen)) {
						var _v50 = seen,
							_v51 = done,
							_v52 = _p85;
						seen = _v50;
						done = _v51;
						next = _v52;
						continue unique;
					} else {
						var _v53 = {ctor: '::', _0: _p84, _1: seen},
							_v54 = A2(_mgold$elm_nonempty_list$List_Nonempty_ops[':::'], _p84, done),
							_v55 = _p85;
						seen = _v53;
						done = _v54;
						next = _v55;
						continue unique;
					}
				}
			}
		});
	return _mgold$elm_nonempty_list$List_Nonempty$reverse(
		A3(
			unique,
			{
				ctor: '::',
				_0: _p86,
				_1: {ctor: '[]'}
			},
			A2(
				_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
				_p86,
				{ctor: '[]'}),
			_p82._1));
};
var _mgold$elm_nonempty_list$List_Nonempty$scanl = F3(
	function (f, b, _p87) {
		var _p88 = _p87;
		return A2(
			_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
			b,
			A3(
				_elm_lang$core$List$scanl,
				f,
				A2(f, _p88._0, b),
				_p88._1));
	});
var _mgold$elm_nonempty_list$List_Nonempty$scanl1 = F2(
	function (f, _p89) {
		var _p90 = _p89;
		var _p92 = _p90._0;
		var _p91 = _p90._1;
		if (_p91.ctor === '[]') {
			return A2(
				_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
				_p92,
				{ctor: '[]'});
		} else {
			return A2(
				_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
				_p92,
				A3(
					_elm_lang$core$List$scanl,
					f,
					A2(f, _p91._0, _p92),
					_p91._1));
		}
	});
var _mgold$elm_nonempty_list$List_Nonempty$zip = F2(
	function (_p94, _p93) {
		var _p95 = _p94;
		var _p96 = _p93;
		return A2(
			_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
			{ctor: '_Tuple2', _0: _p95._0, _1: _p96._0},
			A3(
				_elm_lang$core$List$map2,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				_p95._1,
				_p96._1));
	});
var _mgold$elm_nonempty_list$List_Nonempty$unzip = function (_p97) {
	var _p98 = _p97;
	var _p99 = _elm_lang$core$List$unzip(_p98._1);
	var xs = _p99._0;
	var ys = _p99._1;
	return {
		ctor: '_Tuple2',
		_0: A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p98._0._0, xs),
		_1: A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p98._0._1, ys)
	};
};

var _rluiten$elm_date_extra$Date_Extra_Internal2$prevMonth = function (month) {
	var _p0 = month;
	switch (_p0.ctor) {
		case 'Jan':
			return _elm_lang$core$Date$Dec;
		case 'Feb':
			return _elm_lang$core$Date$Jan;
		case 'Mar':
			return _elm_lang$core$Date$Feb;
		case 'Apr':
			return _elm_lang$core$Date$Mar;
		case 'May':
			return _elm_lang$core$Date$Apr;
		case 'Jun':
			return _elm_lang$core$Date$May;
		case 'Jul':
			return _elm_lang$core$Date$Jun;
		case 'Aug':
			return _elm_lang$core$Date$Jul;
		case 'Sep':
			return _elm_lang$core$Date$Aug;
		case 'Oct':
			return _elm_lang$core$Date$Sep;
		case 'Nov':
			return _elm_lang$core$Date$Oct;
		default:
			return _elm_lang$core$Date$Nov;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$nextMonth = function (month) {
	var _p1 = month;
	switch (_p1.ctor) {
		case 'Jan':
			return _elm_lang$core$Date$Feb;
		case 'Feb':
			return _elm_lang$core$Date$Mar;
		case 'Mar':
			return _elm_lang$core$Date$Apr;
		case 'Apr':
			return _elm_lang$core$Date$May;
		case 'May':
			return _elm_lang$core$Date$Jun;
		case 'Jun':
			return _elm_lang$core$Date$Jul;
		case 'Jul':
			return _elm_lang$core$Date$Aug;
		case 'Aug':
			return _elm_lang$core$Date$Sep;
		case 'Sep':
			return _elm_lang$core$Date$Oct;
		case 'Oct':
			return _elm_lang$core$Date$Nov;
		case 'Nov':
			return _elm_lang$core$Date$Dec;
		default:
			return _elm_lang$core$Date$Jan;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$intToMonth = function (month) {
	return (_elm_lang$core$Native_Utils.cmp(month, 1) < 1) ? _elm_lang$core$Date$Jan : (_elm_lang$core$Native_Utils.eq(month, 2) ? _elm_lang$core$Date$Feb : (_elm_lang$core$Native_Utils.eq(month, 3) ? _elm_lang$core$Date$Mar : (_elm_lang$core$Native_Utils.eq(month, 4) ? _elm_lang$core$Date$Apr : (_elm_lang$core$Native_Utils.eq(month, 5) ? _elm_lang$core$Date$May : (_elm_lang$core$Native_Utils.eq(month, 6) ? _elm_lang$core$Date$Jun : (_elm_lang$core$Native_Utils.eq(month, 7) ? _elm_lang$core$Date$Jul : (_elm_lang$core$Native_Utils.eq(month, 8) ? _elm_lang$core$Date$Aug : (_elm_lang$core$Native_Utils.eq(month, 9) ? _elm_lang$core$Date$Sep : (_elm_lang$core$Native_Utils.eq(month, 10) ? _elm_lang$core$Date$Oct : (_elm_lang$core$Native_Utils.eq(month, 11) ? _elm_lang$core$Date$Nov : _elm_lang$core$Date$Dec))))))))));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$monthToInt = function (month) {
	var _p2 = month;
	switch (_p2.ctor) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear = function (year) {
	return (_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], year, 4),
		0) && (!_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], year, 100),
		0))) || _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], year, 400),
		0);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYearDate = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear(
		_elm_lang$core$Date$year(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$yearToDayLength = function (year) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear(year) ? 366 : 365;
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth = F2(
	function (year, month) {
		var _p3 = month;
		switch (_p3.ctor) {
			case 'Jan':
				return 31;
			case 'Feb':
				return _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear(year) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonthDate = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth,
		_elm_lang$core$Date$year(date),
		_elm_lang$core$Date$month(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$monthList = {
	ctor: '::',
	_0: _elm_lang$core$Date$Jan,
	_1: {
		ctor: '::',
		_0: _elm_lang$core$Date$Feb,
		_1: {
			ctor: '::',
			_0: _elm_lang$core$Date$Mar,
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Date$Apr,
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Date$May,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Date$Jun,
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Date$Jul,
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Date$Aug,
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Date$Sep,
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Date$Oct,
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Date$Nov,
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Date$Dec,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$toTime = function (_p4) {
	return _elm_lang$core$Basics$floor(
		_elm_lang$core$Date$toTime(_p4));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime = function (_p5) {
	return _elm_lang$core$Date$fromTime(
		_elm_lang$core$Basics$toFloat(_p5));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$prevDay = function (day) {
	var _p6 = day;
	switch (_p6.ctor) {
		case 'Mon':
			return _elm_lang$core$Date$Sun;
		case 'Tue':
			return _elm_lang$core$Date$Mon;
		case 'Wed':
			return _elm_lang$core$Date$Tue;
		case 'Thu':
			return _elm_lang$core$Date$Wed;
		case 'Fri':
			return _elm_lang$core$Date$Thu;
		case 'Sat':
			return _elm_lang$core$Date$Fri;
		default:
			return _elm_lang$core$Date$Sat;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$nextDay = function (day) {
	var _p7 = day;
	switch (_p7.ctor) {
		case 'Mon':
			return _elm_lang$core$Date$Tue;
		case 'Tue':
			return _elm_lang$core$Date$Wed;
		case 'Wed':
			return _elm_lang$core$Date$Thu;
		case 'Thu':
			return _elm_lang$core$Date$Fri;
		case 'Fri':
			return _elm_lang$core$Date$Sat;
		case 'Sat':
			return _elm_lang$core$Date$Sun;
		default:
			return _elm_lang$core$Date$Mon;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$isoDayOfWeek = function (day) {
	var _p8 = day;
	switch (_p8.ctor) {
		case 'Mon':
			return 1;
		case 'Tue':
			return 2;
		case 'Wed':
			return 3;
		case 'Thu':
			return 4;
		case 'Fri':
			return 5;
		case 'Sat':
			return 6;
		default:
			return 7;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond = _elm_lang$core$Basics$floor(_elm_lang$core$Time$millisecond);
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond * 1000;
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond * 60;
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute * 60;
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour * 24;
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAWeek = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay * 7;
var _rluiten$elm_date_extra$Date_Extra_Internal2$lastOfMonthTicks = function (date) {
	var dateTicks = _rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date);
	var day = _elm_lang$core$Date$day(date);
	var month = _elm_lang$core$Date$month(date);
	var year = _elm_lang$core$Date$year(date);
	var daysInMonthVal = A2(_rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth, year, month);
	var addDays = daysInMonthVal - day;
	return dateTicks + (addDays * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$firstOfNextMonthDate = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
		_rluiten$elm_date_extra$Date_Extra_Internal2$lastOfMonthTicks(date) + _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$daysInNextMonth = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonthDate(
		_rluiten$elm_date_extra$Date_Extra_Internal2$firstOfNextMonthDate(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$firstOfMonthTicks = function (date) {
	var dateTicks = _rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date);
	var day = _elm_lang$core$Date$day(date);
	return dateTicks + ((1 - day) * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$lastOfPrevMonthDate = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
		_rluiten$elm_date_extra$Date_Extra_Internal2$firstOfMonthTicks(date) - _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$daysInPrevMonth = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonthDate(
		_rluiten$elm_date_extra$Date_Extra_Internal2$lastOfPrevMonthDate(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$epochDateStr = '1970-01-01T00:00:00Z';

var _rluiten$elm_date_extra$Date_Extra_Period$diff = F2(
	function (date1, date2) {
		var millisecondDiff = _elm_lang$core$Date$millisecond(date1) - _elm_lang$core$Date$millisecond(date2);
		var secondDiff = _elm_lang$core$Date$second(date1) - _elm_lang$core$Date$second(date2);
		var minuteDiff = _elm_lang$core$Date$minute(date1) - _elm_lang$core$Date$minute(date2);
		var hourDiff = _elm_lang$core$Date$hour(date1) - _elm_lang$core$Date$hour(date2);
		var ticksDiff = _rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date1) - _rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date2);
		var ticksDayDiff = (((ticksDiff - (hourDiff * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour)) - (minuteDiff * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute)) - (secondDiff * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond)) - (millisecondDiff * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond);
		var onlyDaysDiff = (ticksDayDiff / _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay) | 0;
		var _p0 = function () {
			if (_elm_lang$core$Native_Utils.cmp(onlyDaysDiff, 0) < 0) {
				var absDayDiff = _elm_lang$core$Basics$abs(onlyDaysDiff);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Basics$negate((absDayDiff / 7) | 0),
					_1: _elm_lang$core$Basics$negate(
						A2(_elm_lang$core$Basics_ops['%'], absDayDiff, 7))
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: (onlyDaysDiff / 7) | 0,
					_1: A2(_elm_lang$core$Basics_ops['%'], onlyDaysDiff, 7)
				};
			}
		}();
		var weekDiff = _p0._0;
		var dayDiff = _p0._1;
		return {week: weekDiff, day: dayDiff, hour: hourDiff, minute: minuteDiff, second: secondDiff, millisecond: millisecondDiff};
	});
var _rluiten$elm_date_extra$Date_Extra_Period$addTimeUnit = F3(
	function (unit, addend, date) {
		return _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
			A2(
				F2(
					function (x, y) {
						return x + y;
					}),
				addend * unit,
				_rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date)));
	});
var _rluiten$elm_date_extra$Date_Extra_Period$toTicks = function (period) {
	var _p1 = period;
	switch (_p1.ctor) {
		case 'Millisecond':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond;
		case 'Second':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond;
		case 'Minute':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute;
		case 'Hour':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour;
		case 'Day':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay;
		case 'Week':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAWeek;
		default:
			var _p2 = _p1._0;
			return (((((_rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond * _p2.millisecond) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond * _p2.second)) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute * _p2.minute)) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour * _p2.hour)) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay * _p2.day)) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksAWeek * _p2.week);
	}
};
var _rluiten$elm_date_extra$Date_Extra_Period$add = function (period) {
	return _rluiten$elm_date_extra$Date_Extra_Period$addTimeUnit(
		_rluiten$elm_date_extra$Date_Extra_Period$toTicks(period));
};
var _rluiten$elm_date_extra$Date_Extra_Period$zeroDelta = {week: 0, day: 0, hour: 0, minute: 0, second: 0, millisecond: 0};
var _rluiten$elm_date_extra$Date_Extra_Period$DeltaRecord = F6(
	function (a, b, c, d, e, f) {
		return {week: a, day: b, hour: c, minute: d, second: e, millisecond: f};
	});
var _rluiten$elm_date_extra$Date_Extra_Period$Delta = function (a) {
	return {ctor: 'Delta', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Period$Week = {ctor: 'Week'};
var _rluiten$elm_date_extra$Date_Extra_Period$Day = {ctor: 'Day'};
var _rluiten$elm_date_extra$Date_Extra_Period$Hour = {ctor: 'Hour'};
var _rluiten$elm_date_extra$Date_Extra_Period$Minute = {ctor: 'Minute'};
var _rluiten$elm_date_extra$Date_Extra_Period$Second = {ctor: 'Second'};
var _rluiten$elm_date_extra$Date_Extra_Period$Millisecond = {ctor: 'Millisecond'};

var _rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil = F3(
	function (year, month, day) {
		var doy = (((((153 * (month + ((_elm_lang$core$Native_Utils.cmp(month, 2) > 0) ? -3 : 9))) + 2) / 5) | 0) + day) - 1;
		var y = year - ((_elm_lang$core$Native_Utils.cmp(month, 2) < 1) ? 1 : 0);
		var era = (((_elm_lang$core$Native_Utils.cmp(y, 0) > -1) ? y : (y - 399)) / 400) | 0;
		var yoe = y - (era * 400);
		var doe = (((yoe * 365) + ((yoe / 4) | 0)) - ((yoe / 100) | 0)) + doy;
		return ((era * 146097) + doe) - 719468;
	});
var _rluiten$elm_date_extra$Date_Extra_Internal$ticksFromFields = F7(
	function (year, month, day, hour, minute, second, millisecond) {
		var monthInt = _rluiten$elm_date_extra$Date_Extra_Internal2$monthToInt(month);
		var clampYear = (_elm_lang$core$Native_Utils.cmp(year, 0) < 0) ? 0 : year;
		var clampDay = A3(
			_elm_lang$core$Basics$clamp,
			1,
			A2(_rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth, clampYear, month),
			day);
		var dayCount = A3(_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil, clampYear, monthInt, clampDay);
		return _rluiten$elm_date_extra$Date_Extra_Period$toTicks(
			_rluiten$elm_date_extra$Date_Extra_Period$Delta(
				{
					millisecond: A3(_elm_lang$core$Basics$clamp, 0, 999, millisecond),
					second: A3(_elm_lang$core$Basics$clamp, 0, 59, second),
					minute: A3(_elm_lang$core$Basics$clamp, 0, 59, minute),
					hour: A3(_elm_lang$core$Basics$clamp, 0, 23, hour),
					day: dayCount,
					week: 0
				}));
	});
var _rluiten$elm_date_extra$Date_Extra_Internal$ticksFromDateFields = function (date) {
	return A7(
		_rluiten$elm_date_extra$Date_Extra_Internal$ticksFromFields,
		_elm_lang$core$Date$year(date),
		_elm_lang$core$Date$month(date),
		_elm_lang$core$Date$day(date),
		_elm_lang$core$Date$hour(date),
		_elm_lang$core$Date$minute(date),
		_elm_lang$core$Date$second(date),
		_elm_lang$core$Date$millisecond(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset = function (date) {
	var v1Ticks = _rluiten$elm_date_extra$Date_Extra_Internal$ticksFromDateFields(date);
	var dateTicks = _elm_lang$core$Basics$floor(
		_elm_lang$core$Date$toTime(date));
	return ((dateTicks - v1Ticks) / _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute) | 0;
};
var _rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsOffset = F2(
	function (offsetMinutes, date) {
		return _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
			A2(
				F2(
					function (x, y) {
						return x + y;
					}),
				offsetMinutes * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute,
				_rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date)));
	});
var _rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsUtc = function (date) {
	var offset = _rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset(date);
	var oHours = (offset / _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour) | 0;
	var oMinutes = ((offset - (oHours * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour)) / _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute) | 0;
	return A2(_rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsOffset, offset, date);
};

var _rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset = F2(
	function (date1, date2) {
		return A3(
			_rluiten$elm_date_extra$Date_Extra_Period$add,
			_rluiten$elm_date_extra$Date_Extra_Period$Minute,
			_rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset(date2) - _rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset(date1),
			date2);
	});
var _rluiten$elm_date_extra$Date_Extra_Core$lastOfMonthDate = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset,
		date,
		_rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
			_rluiten$elm_date_extra$Date_Extra_Internal2$lastOfMonthTicks(date)));
};
var _rluiten$elm_date_extra$Date_Extra_Core$toFirstOfMonth = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset,
		date,
		_rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
			_rluiten$elm_date_extra$Date_Extra_Internal2$firstOfMonthTicks(date)));
};
var _rluiten$elm_date_extra$Date_Extra_Core$lastOfPrevMonthDate = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset,
		date,
		_rluiten$elm_date_extra$Date_Extra_Internal2$lastOfPrevMonthDate(date));
};
var _rluiten$elm_date_extra$Date_Extra_Core$firstOfNextMonthDate = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset,
		date,
		_rluiten$elm_date_extra$Date_Extra_Internal2$firstOfNextMonthDate(date));
};
var _rluiten$elm_date_extra$Date_Extra_Core$yearToDayLength = _rluiten$elm_date_extra$Date_Extra_Internal2$yearToDayLength;
var _rluiten$elm_date_extra$Date_Extra_Core$toTime = _rluiten$elm_date_extra$Date_Extra_Internal2$toTime;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksAWeek = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAWeek;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksASecond = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksAMinute = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksAMillisecond = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksADay = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksAnHour = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour;
var _rluiten$elm_date_extra$Date_Extra_Core$prevMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$prevMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$prevDay = _rluiten$elm_date_extra$Date_Extra_Internal2$prevDay;
var _rluiten$elm_date_extra$Date_Extra_Core$nextMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$nextMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$nextDay = _rluiten$elm_date_extra$Date_Extra_Internal2$nextDay;
var _rluiten$elm_date_extra$Date_Extra_Core$monthToInt = _rluiten$elm_date_extra$Date_Extra_Internal2$monthToInt;
var _rluiten$elm_date_extra$Date_Extra_Core$monthList = _rluiten$elm_date_extra$Date_Extra_Internal2$monthList;
var _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek = _rluiten$elm_date_extra$Date_Extra_Internal2$isoDayOfWeek;
var _rluiten$elm_date_extra$Date_Extra_Core$daysBackToStartOfWeek = F2(
	function (dateDay, startOfWeekDay) {
		var startOfWeekDayIndex = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(startOfWeekDay);
		var dateDayIndex = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(dateDay);
		return (_elm_lang$core$Native_Utils.cmp(dateDayIndex, startOfWeekDayIndex) < 0) ? ((7 + dateDayIndex) - startOfWeekDayIndex) : (dateDayIndex - startOfWeekDayIndex);
	});
var _rluiten$elm_date_extra$Date_Extra_Core$isLeapYearDate = _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYearDate;
var _rluiten$elm_date_extra$Date_Extra_Core$isLeapYear = _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear;
var _rluiten$elm_date_extra$Date_Extra_Core$intToMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$intToMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$fromTime = _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime;
var _rluiten$elm_date_extra$Date_Extra_Core$epochDateStr = _rluiten$elm_date_extra$Date_Extra_Internal2$epochDateStr;
var _rluiten$elm_date_extra$Date_Extra_Core$daysInMonthDate = _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonthDate;
var _rluiten$elm_date_extra$Date_Extra_Core$daysInPrevMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$daysInPrevMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$daysInNextMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$daysInNextMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$daysInMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth;

var _rluiten$elm_date_extra$Date_Extra_Compare$is3 = F4(
	function (comp, date1, date2, date3) {
		var time3 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date3);
		var time2 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date2);
		var highBound = A2(_elm_lang$core$Basics$max, time2, time3);
		var lowBound = A2(_elm_lang$core$Basics$min, time2, time3);
		var time1 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date1);
		var _p0 = comp;
		switch (_p0.ctor) {
			case 'Between':
				return (_elm_lang$core$Native_Utils.cmp(time1, lowBound) > 0) && (_elm_lang$core$Native_Utils.cmp(time1, highBound) < 0);
			case 'BetweenOpenStart':
				return (_elm_lang$core$Native_Utils.cmp(time1, lowBound) > -1) && (_elm_lang$core$Native_Utils.cmp(time1, highBound) < 0);
			case 'BetweenOpenEnd':
				return (_elm_lang$core$Native_Utils.cmp(time1, lowBound) > 0) && (_elm_lang$core$Native_Utils.cmp(time1, highBound) < 1);
			default:
				return (_elm_lang$core$Native_Utils.cmp(time1, lowBound) > -1) && (_elm_lang$core$Native_Utils.cmp(time1, highBound) < 1);
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Compare$is = F3(
	function (comp, date1, date2) {
		var time2 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date2);
		var time1 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date1);
		var _p1 = comp;
		switch (_p1.ctor) {
			case 'Before':
				return _elm_lang$core$Native_Utils.cmp(time1, time2) < 0;
			case 'After':
				return _elm_lang$core$Native_Utils.cmp(time1, time2) > 0;
			case 'Same':
				return _elm_lang$core$Native_Utils.eq(time1, time2);
			case 'SameOrBefore':
				return _elm_lang$core$Native_Utils.cmp(time1, time2) < 1;
			default:
				return _elm_lang$core$Native_Utils.cmp(time1, time2) > -1;
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Compare$SameOrBefore = {ctor: 'SameOrBefore'};
var _rluiten$elm_date_extra$Date_Extra_Compare$SameOrAfter = {ctor: 'SameOrAfter'};
var _rluiten$elm_date_extra$Date_Extra_Compare$Same = {ctor: 'Same'};
var _rluiten$elm_date_extra$Date_Extra_Compare$Before = {ctor: 'Before'};
var _rluiten$elm_date_extra$Date_Extra_Compare$After = {ctor: 'After'};
var _rluiten$elm_date_extra$Date_Extra_Compare$BetweenOpen = {ctor: 'BetweenOpen'};
var _rluiten$elm_date_extra$Date_Extra_Compare$BetweenOpenEnd = {ctor: 'BetweenOpenEnd'};
var _rluiten$elm_date_extra$Date_Extra_Compare$BetweenOpenStart = {ctor: 'BetweenOpenStart'};
var _rluiten$elm_date_extra$Date_Extra_Compare$Between = {ctor: 'Between'};

var _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$PM = {ctor: 'PM'};
var _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$AM = {ctor: 'AM'};
var _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$twelveHourPeriod = function (d) {
	return (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$Date$hour(d),
		12) < 0) ? _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$AM : _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$PM;
};

var _rluiten$elm_date_extra$Date_Extra_Config$Config = F2(
	function (a, b) {
		return {i18n: a, format: b};
	});

var _rluiten$elm_date_extra$Date_Extra_I18n_I_default$twelveHourPeriod = function (period) {
	var _p0 = period;
	if (_p0.ctor === 'AM') {
		return 'AM';
	} else {
		return 'PM';
	}
};

var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayOfMonthWithSuffix = F2(
	function (pad, day) {
		var value = function () {
			var _p0 = day;
			switch (_p0) {
				case 1:
					return '1st';
				case 21:
					return '21st';
				case 2:
					return '2nd';
				case 22:
					return '22nd';
				case 3:
					return '3rd';
				case 23:
					return '23rd';
				case 31:
					return '31st';
				default:
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(day),
						'th');
			}
		}();
		return pad ? A3(
			_elm_lang$core$String$padLeft,
			4,
			_elm_lang$core$Native_Utils.chr(' '),
			value) : value;
	});
var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthName = function (month) {
	var _p1 = month;
	switch (_p1.ctor) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthShort = function (month) {
	var _p2 = month;
	switch (_p2.ctor) {
		case 'Jan':
			return 'Jan';
		case 'Feb':
			return 'Feb';
		case 'Mar':
			return 'Mar';
		case 'Apr':
			return 'Apr';
		case 'May':
			return 'May';
		case 'Jun':
			return 'Jun';
		case 'Jul':
			return 'Jul';
		case 'Aug':
			return 'Aug';
		case 'Sep':
			return 'Sep';
		case 'Oct':
			return 'Oct';
		case 'Nov':
			return 'Nov';
		default:
			return 'Dec';
	}
};
var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayName = function (day) {
	var _p3 = day;
	switch (_p3.ctor) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayShort = function (day) {
	var _p4 = day;
	switch (_p4.ctor) {
		case 'Mon':
			return 'Mon';
		case 'Tue':
			return 'Tue';
		case 'Wed':
			return 'Wed';
		case 'Thu':
			return 'Thu';
		case 'Fri':
			return 'Fri';
		case 'Sat':
			return 'Sat';
		default:
			return 'Sun';
	}
};

var _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config = {
	i18n: {dayShort: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayShort, dayName: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayName, monthShort: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthShort, monthName: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthName, dayOfMonthWithSuffix: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayOfMonthWithSuffix, twelveHourPeriod: _rluiten$elm_date_extra$Date_Extra_I18n_I_default$twelveHourPeriod},
	format: {date: '%-m/%-d/%Y', longDate: '%A, %B %d, %Y', time: '%-H:%M %p', longTime: '%-H:%M:%S %p', dateTime: '%-m/%-d/%Y %-I:%M %p', firstDayOfWeek: _elm_lang$core$Date$Sun}
};

var _rluiten$elm_date_extra$Date_Extra_Create$epochDate = _elm_lang$core$Date$fromTime(0);
var _rluiten$elm_date_extra$Date_Extra_Create$epochTimezoneOffset = function () {
	var inMinutes = (_elm_lang$core$Date$hour(_rluiten$elm_date_extra$Date_Extra_Create$epochDate) * 60) + _elm_lang$core$Date$minute(_rluiten$elm_date_extra$Date_Extra_Create$epochDate);
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Date$year(_rluiten$elm_date_extra$Date_Extra_Create$epochDate),
		1969) ? (0 - (inMinutes - (24 * 60))) : (0 - inMinutes);
}();
var _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset = _rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset;
var _rluiten$elm_date_extra$Date_Extra_Create$adjustedTicksToDate = function (ticks) {
	var date = A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Millisecond, ticks + (_rluiten$elm_date_extra$Date_Extra_Create$epochTimezoneOffset * _rluiten$elm_date_extra$Date_Extra_Core$ticksAMinute), _rluiten$elm_date_extra$Date_Extra_Create$epochDate);
	var dateOffset = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(date);
	return _elm_lang$core$Native_Utils.eq(dateOffset, _rluiten$elm_date_extra$Date_Extra_Create$epochTimezoneOffset) ? date : A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Minute, dateOffset - _rluiten$elm_date_extra$Date_Extra_Create$epochTimezoneOffset, date);
};
var _rluiten$elm_date_extra$Date_Extra_Create$dateFromFields = F7(
	function (year, month, day, hour, minute, second, millisecond) {
		return _rluiten$elm_date_extra$Date_Extra_Create$adjustedTicksToDate(
			A7(_rluiten$elm_date_extra$Date_Extra_Internal$ticksFromFields, year, month, day, hour, minute, second, millisecond));
	});
var _rluiten$elm_date_extra$Date_Extra_Create$timeFromFields = A3(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, 1970, _elm_lang$core$Date$Jan, 1);

var _rluiten$elm_date_extra$Date_Extra_Duration$positiveDiffDays = F3(
	function (date1, date2, multiplier) {
		var date2DaysFromCivil = A3(
			_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil,
			_elm_lang$core$Date$year(date2),
			_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
				_elm_lang$core$Date$month(date2)),
			_elm_lang$core$Date$day(date2));
		var date1DaysFromCivil = A3(
			_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil,
			_elm_lang$core$Date$year(date1),
			_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
				_elm_lang$core$Date$month(date1)),
			_elm_lang$core$Date$day(date1));
		return (date1DaysFromCivil - date2DaysFromCivil) * multiplier;
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$diffDays = F2(
	function (date1, date2) {
		return A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$After, date1, date2) ? A3(_rluiten$elm_date_extra$Date_Extra_Duration$positiveDiffDays, date1, date2, 1) : A3(_rluiten$elm_date_extra$Date_Extra_Duration$positiveDiffDays, date2, date1, -1);
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$positiveDiff = F3(
	function (date1, date2, multiplier) {
		var propogateCarry = F3(
			function (current, carry, maxVal) {
				var adjusted = current + carry;
				return (_elm_lang$core$Native_Utils.cmp(adjusted, 0) < 0) ? {ctor: '_Tuple2', _0: maxVal + adjusted, _1: -1} : {ctor: '_Tuple2', _0: adjusted, _1: 0};
			});
		var accumulatedDiff = F4(
			function (acc, v1, v2, maxV2) {
				return (_elm_lang$core$Native_Utils.cmp(v1, v2) < 0) ? {ctor: '_Tuple2', _0: acc - 1, _1: (maxV2 + v1) - v2} : {ctor: '_Tuple2', _0: acc, _1: v1 - v2};
			});
		var msec2 = _elm_lang$core$Date$millisecond(date2);
		var msec1 = _elm_lang$core$Date$millisecond(date1);
		var second2 = _elm_lang$core$Date$second(date2);
		var second1 = _elm_lang$core$Date$second(date1);
		var minute2 = _elm_lang$core$Date$minute(date2);
		var minute1 = _elm_lang$core$Date$minute(date1);
		var hour2 = _elm_lang$core$Date$hour(date2);
		var hour1 = _elm_lang$core$Date$hour(date1);
		var day2 = _elm_lang$core$Date$day(date2);
		var day1 = _elm_lang$core$Date$day(date1);
		var month2Mon = _elm_lang$core$Date$month(date2);
		var month2 = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month2Mon);
		var month1Mon = _elm_lang$core$Date$month(date1);
		var month1 = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month1Mon);
		var year2 = _elm_lang$core$Date$year(date2);
		var daysInDate2Month = A2(_rluiten$elm_date_extra$Date_Extra_Core$daysInMonth, year2, month2Mon);
		var year1 = _elm_lang$core$Date$year(date1);
		var daysInDate1Month = A2(_rluiten$elm_date_extra$Date_Extra_Core$daysInMonth, year1, month1Mon);
		var _p0 = A4(accumulatedDiff, year1 - year2, month1, month2, 12);
		var yearDiff = _p0._0;
		var monthDiffA = _p0._1;
		var _p1 = A4(accumulatedDiff, monthDiffA, day1, day2, daysInDate2Month);
		var monthDiff = _p1._0;
		var dayDiffA = _p1._1;
		var _p2 = A4(accumulatedDiff, dayDiffA, hour1, hour2, 24);
		var dayDiff = _p2._0;
		var hourDiffA = _p2._1;
		var _p3 = A4(accumulatedDiff, hourDiffA, minute1, minute2, 60);
		var hourDiff = _p3._0;
		var minuteDiffA = _p3._1;
		var _p4 = A4(accumulatedDiff, minuteDiffA, second1, second2, 60);
		var minuteDiff = _p4._0;
		var secondDiffA = _p4._1;
		var _p5 = A4(accumulatedDiff, secondDiffA, msec1, msec2, 1000);
		var secondDiff = _p5._0;
		var msecDiff = _p5._1;
		var _p6 = A3(propogateCarry, msecDiff, 0, 1000);
		var msecX = _p6._0;
		var secondCarry = _p6._1;
		var _p7 = A3(propogateCarry, secondDiff, secondCarry, 60);
		var secondX = _p7._0;
		var minuteCarry = _p7._1;
		var _p8 = A3(propogateCarry, minuteDiff, minuteCarry, 60);
		var minuteX = _p8._0;
		var hourCarry = _p8._1;
		var _p9 = A3(propogateCarry, hourDiff, hourCarry, 60);
		var hourX = _p9._0;
		var dayCarry = _p9._1;
		var _p10 = A3(propogateCarry, dayDiff, dayCarry, daysInDate1Month);
		var dayX = _p10._0;
		var monthCarry = _p10._1;
		var _p11 = A3(propogateCarry, monthDiff, monthCarry, 12);
		var monthX = _p11._0;
		var yearCarry = _p11._1;
		var _p12 = A3(propogateCarry, yearDiff, yearCarry, 0);
		var yearX = _p12._0;
		return {year: yearX * multiplier, month: monthX * multiplier, day: dayX * multiplier, hour: hourX * multiplier, minute: minuteX * multiplier, second: secondX * multiplier, millisecond: msecX * multiplier};
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$diff = F2(
	function (date1, date2) {
		return A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$After, date1, date2) ? A3(_rluiten$elm_date_extra$Date_Extra_Duration$positiveDiff, date1, date2, 1) : A3(_rluiten$elm_date_extra$Date_Extra_Duration$positiveDiff, date2, date1, -1);
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$addMonth = F2(
	function (monthCount, date) {
		var day = _elm_lang$core$Date$day(date);
		var monthInt = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
			_elm_lang$core$Date$month(date));
		var newMonthInt = monthInt + monthCount;
		var targetMonthInt = A2(_elm_lang$core$Basics_ops['%'], newMonthInt, 12);
		var yearOffset = ((_elm_lang$core$Native_Utils.cmp(newMonthInt, 0) < 0) && (!_elm_lang$core$Native_Utils.eq(targetMonthInt, 0))) ? (((newMonthInt / 12) | 0) - 1) : ((newMonthInt / 12) | 0);
		var year = _elm_lang$core$Date$year(date);
		var inputCivil = A3(_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil, year, monthInt, day);
		var newYear = year + yearOffset;
		var newDay = A2(
			_elm_lang$core$Basics$min,
			A2(
				_rluiten$elm_date_extra$Date_Extra_Core$daysInMonth,
				newYear,
				_rluiten$elm_date_extra$Date_Extra_Core$intToMonth(newMonthInt)),
			day);
		var newCivil = A3(_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil, newYear, targetMonthInt, newDay);
		var daysDifferent = newCivil - inputCivil;
		return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Day, daysDifferent, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$addYear = F2(
	function (yearCount, date) {
		return A2(_rluiten$elm_date_extra$Date_Extra_Duration$addMonth, 12 * yearCount, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$daylightOffsetCompensate = F2(
	function (dateBefore, dateAfter) {
		var offsetAfter = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(dateAfter);
		var offsetBefore = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(dateBefore);
		if (!_elm_lang$core$Native_Utils.eq(offsetBefore, offsetAfter)) {
			var adjustedDate = A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Millisecond, (offsetAfter - offsetBefore) * _rluiten$elm_date_extra$Date_Extra_Core$ticksAMinute, dateAfter);
			var adjustedOffset = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(adjustedDate);
			return (!_elm_lang$core$Native_Utils.eq(adjustedOffset, offsetAfter)) ? dateAfter : adjustedDate;
		} else {
			return dateAfter;
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$requireDaylightCompensateInAdd = function (duration) {
	var _p13 = duration;
	switch (_p13.ctor) {
		case 'Millisecond':
			return false;
		case 'Second':
			return false;
		case 'Minute':
			return false;
		case 'Hour':
			return false;
		case 'Day':
			return true;
		case 'Week':
			return true;
		case 'Month':
			return true;
		case 'Year':
			return true;
		default:
			var _p14 = _p13._0;
			return (!_elm_lang$core$Native_Utils.eq(_p14.day, 0)) || ((!_elm_lang$core$Native_Utils.eq(_p14.month, 0)) || (!_elm_lang$core$Native_Utils.eq(_p14.year, 0)));
	}
};
var _rluiten$elm_date_extra$Date_Extra_Duration$zeroDelta = {year: 0, month: 0, day: 0, hour: 0, minute: 0, second: 0, millisecond: 0};
var _rluiten$elm_date_extra$Date_Extra_Duration$DeltaRecord = F7(
	function (a, b, c, d, e, f, g) {
		return {year: a, month: b, day: c, hour: d, minute: e, second: f, millisecond: g};
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$Delta = function (a) {
	return {ctor: 'Delta', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Duration$Year = {ctor: 'Year'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Month = {ctor: 'Month'};
var _rluiten$elm_date_extra$Date_Extra_Duration$doAdd = F3(
	function (duration, addend, date) {
		var _p15 = duration;
		switch (_p15.ctor) {
			case 'Millisecond':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Millisecond, addend, date);
			case 'Second':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Second, addend, date);
			case 'Minute':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Minute, addend, date);
			case 'Hour':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Hour, addend, date);
			case 'Day':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Day, addend, date);
			case 'Week':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Week, addend, date);
			case 'Month':
				return A2(_rluiten$elm_date_extra$Date_Extra_Duration$addMonth, addend, date);
			case 'Year':
				return A2(_rluiten$elm_date_extra$Date_Extra_Duration$addYear, addend, date);
			default:
				var _p16 = _p15._0;
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Period$add,
					_rluiten$elm_date_extra$Date_Extra_Period$Delta(
						{week: 0, day: _p16.day, hour: _p16.hour, minute: _p16.minute, second: _p16.second, millisecond: _p16.millisecond}),
					addend,
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$doAdd,
						_rluiten$elm_date_extra$Date_Extra_Duration$Month,
						_p16.month,
						A3(_rluiten$elm_date_extra$Date_Extra_Duration$doAdd, _rluiten$elm_date_extra$Date_Extra_Duration$Year, _p16.year, date)));
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$add = F3(
	function (duration, addend, date) {
		var outputDate = A3(_rluiten$elm_date_extra$Date_Extra_Duration$doAdd, duration, addend, date);
		return _rluiten$elm_date_extra$Date_Extra_Duration$requireDaylightCompensateInAdd(duration) ? A2(_rluiten$elm_date_extra$Date_Extra_Duration$daylightOffsetCompensate, date, outputDate) : outputDate;
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$Week = {ctor: 'Week'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Day = {ctor: 'Day'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Hour = {ctor: 'Hour'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Minute = {ctor: 'Minute'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Second = {ctor: 'Second'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Millisecond = {ctor: 'Millisecond'};

var _rluiten$elm_date_extra$Date_Extra_Field$dayOfWeekToDate = F3(
	function (newDayOfWeek, startOfWeekDay, date) {
		var targetIsoDay = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(newDayOfWeek);
		var dayOfWeek = _elm_lang$core$Date$dayOfWeek(date);
		var daysToStartOfWeek = A2(_rluiten$elm_date_extra$Date_Extra_Core$daysBackToStartOfWeek, dayOfWeek, startOfWeekDay);
		var isoDay = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(dayOfWeek);
		var dayDiff = targetIsoDay - isoDay;
		var adjustedDiff = (_elm_lang$core$Native_Utils.cmp(daysToStartOfWeek + dayDiff, 0) < 0) ? (dayDiff + 7) : dayDiff;
		return A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, adjustedDiff, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Field$monthToDate = F2(
	function (month, date) {
		var monthInt = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
			_elm_lang$core$Date$month(date));
		var targetMonthInt = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month);
		return A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Month, targetMonthInt - monthInt, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp = F2(
	function (field, date) {
		var _p0 = field;
		switch (_p0.ctor) {
			case 'Millisecond':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Millisecond,
					A3(_elm_lang$core$Basics$clamp, 0, 999, _p0._0) - _elm_lang$core$Date$millisecond(date),
					date);
			case 'Second':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Second,
					A3(_elm_lang$core$Basics$clamp, 0, 59, _p0._0) - _elm_lang$core$Date$second(date),
					date);
			case 'Minute':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Minute,
					A3(_elm_lang$core$Basics$clamp, 0, 59, _p0._0) - _elm_lang$core$Date$minute(date),
					date);
			case 'Hour':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Hour,
					A3(_elm_lang$core$Basics$clamp, 0, 23, _p0._0) - _elm_lang$core$Date$hour(date),
					date);
			case 'DayOfWeek':
				return A3(_rluiten$elm_date_extra$Date_Extra_Field$dayOfWeekToDate, _p0._0._0, _p0._0._1, date);
			case 'DayOfMonth':
				var maxDays = _rluiten$elm_date_extra$Date_Extra_Core$daysInMonthDate(date);
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Day,
					A3(_elm_lang$core$Basics$clamp, 1, maxDays, _p0._0) - _elm_lang$core$Date$day(date),
					date);
			case 'Month':
				return A2(_rluiten$elm_date_extra$Date_Extra_Field$monthToDate, _p0._0, date);
			default:
				var _p1 = _p0._0;
				var minYear = (_elm_lang$core$Native_Utils.cmp(_p1, 0) < 0) ? 0 : _p1;
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Year,
					minYear - _elm_lang$core$Date$year(date),
					date);
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Field$fieldToDate = F2(
	function (field, date) {
		var _p2 = field;
		switch (_p2.ctor) {
			case 'Millisecond':
				var _p3 = _p2._0;
				return ((_elm_lang$core$Native_Utils.cmp(_p3, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(_p3, 999) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Millisecond,
						_p3 - _elm_lang$core$Date$millisecond(date),
						date));
			case 'Second':
				var _p4 = _p2._0;
				return ((_elm_lang$core$Native_Utils.cmp(_p4, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(_p4, 59) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Second,
						_p4 - _elm_lang$core$Date$second(date),
						date));
			case 'Minute':
				var _p5 = _p2._0;
				return ((_elm_lang$core$Native_Utils.cmp(_p5, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(_p5, 59) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Minute,
						_p5 - _elm_lang$core$Date$minute(date),
						date));
			case 'Hour':
				var _p6 = _p2._0;
				return ((_elm_lang$core$Native_Utils.cmp(_p6, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(_p6, 23) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Hour,
						_p6 - _elm_lang$core$Date$hour(date),
						date));
			case 'DayOfWeek':
				return _elm_lang$core$Maybe$Just(
					A3(_rluiten$elm_date_extra$Date_Extra_Field$dayOfWeekToDate, _p2._0._0, _p2._0._1, date));
			case 'DayOfMonth':
				var _p7 = _p2._0;
				var maxDays = _rluiten$elm_date_extra$Date_Extra_Core$daysInMonthDate(date);
				return ((_elm_lang$core$Native_Utils.cmp(_p7, 1) < 0) || (_elm_lang$core$Native_Utils.cmp(_p7, maxDays) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Day,
						_p7 - _elm_lang$core$Date$day(date),
						date));
			case 'Month':
				return _elm_lang$core$Maybe$Just(
					A2(_rluiten$elm_date_extra$Date_Extra_Field$monthToDate, _p2._0, date));
			default:
				var _p8 = _p2._0;
				return (_elm_lang$core$Native_Utils.cmp(_p8, 0) < 0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Year,
						_p8 - _elm_lang$core$Date$year(date),
						date));
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Field$Year = function (a) {
	return {ctor: 'Year', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Month = function (a) {
	return {ctor: 'Month', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$DayOfMonth = function (a) {
	return {ctor: 'DayOfMonth', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$DayOfWeek = function (a) {
	return {ctor: 'DayOfWeek', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Hour = function (a) {
	return {ctor: 'Hour', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Minute = function (a) {
	return {ctor: 'Minute', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Second = function (a) {
	return {ctor: 'Second', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Millisecond = function (a) {
	return {ctor: 'Millisecond', _0: a};
};

var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Year = {ctor: 'Year'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Month = {ctor: 'Month'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Day = {ctor: 'Day'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Hour = {ctor: 'Hour'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Minute = {ctor: 'Minute'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Second = {ctor: 'Second'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime = F2(
	function (unit, date) {
		var _p0 = unit;
		switch (_p0.ctor) {
			case 'Millisecond':
				return date;
			case 'Second':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Millisecond(0),
					date);
			case 'Minute':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Second(0),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Second, date));
			case 'Hour':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Minute(0),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Minute, date));
			case 'Day':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Hour(0),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Hour, date));
			case 'Month':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$DayOfMonth(1),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Day, date));
			default:
				return _rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTimeYear(date);
		}
	});
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTimeYear = function (date) {
	var startMonthDate = A2(
		_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
		_rluiten$elm_date_extra$Date_Extra_Field$DayOfMonth(1),
		date);
	var startYearDate = A2(
		_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
		_rluiten$elm_date_extra$Date_Extra_Field$Month(_elm_lang$core$Date$Jan),
		startMonthDate);
	var monthTicks = _rluiten$elm_date_extra$Date_Extra_Core$toTime(startMonthDate) - _rluiten$elm_date_extra$Date_Extra_Core$toTime(startYearDate);
	var updatedDate = _rluiten$elm_date_extra$Date_Extra_Core$fromTime(
		_rluiten$elm_date_extra$Date_Extra_Core$toTime(date) - monthTicks);
	return A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Month, updatedDate);
};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime = F2(
	function (unit, date) {
		var _p1 = unit;
		switch (_p1.ctor) {
			case 'Millisecond':
				return date;
			case 'Second':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Millisecond(999),
					date);
			case 'Minute':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Second(59),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Second, date));
			case 'Hour':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Minute(59),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Minute, date));
			case 'Day':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Hour(23),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Hour, date));
			case 'Month':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$DayOfMonth(31),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Day, date));
			default:
				var extraYear = A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Year, 1, date);
				var startYear = A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Year, extraYear);
				return A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Millisecond, -1, startYear);
		}
	});
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Millisecond = {ctor: 'Millisecond'};

var _rluiten$elm_date_extra$Date_Extra_Utils$unsafeFromString = function (dateStr) {
	var _p0 = _elm_lang$core$Date$fromString(dateStr);
	if (_p0.ctor === 'Ok') {
		return _p0._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Date.Extra.Utils',
			{
				start: {line: 146, column: 5},
				end: {line: 151, column: 43}
			},
			_p0)('unsafeFromString');
	}
};
var _rluiten$elm_date_extra$Date_Extra_Utils$isoDayofWeekMonday = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(_elm_lang$core$Date$Mon);
var _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne = function (year) {
	var dateJan4 = A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, year, _elm_lang$core$Date$Jan, 4, 0, 0, 0, 0);
	return A3(
		_rluiten$elm_date_extra$Date_Extra_Duration$add,
		_rluiten$elm_date_extra$Date_Extra_Duration$Day,
		_rluiten$elm_date_extra$Date_Extra_Utils$isoDayofWeekMonday - _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(
			_elm_lang$core$Date$dayOfWeek(dateJan4)),
		dateJan4);
};
var _rluiten$elm_date_extra$Date_Extra_Utils$getYearIsoWeekDate = function (date) {
	var inputYear = _elm_lang$core$Date$year(date);
	var maxIsoWeekDateInYear = A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, inputYear, _elm_lang$core$Date$Dec, 29, 0, 0, 0, 0);
	if (A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$SameOrAfter, date, maxIsoWeekDateInYear)) {
		var nextYearIsoWeek1Date = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne(inputYear + 1);
		return A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$Before, date, nextYearIsoWeek1Date) ? {
			ctor: '_Tuple2',
			_0: inputYear,
			_1: _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne(inputYear)
		} : {ctor: '_Tuple2', _0: inputYear + 1, _1: nextYearIsoWeek1Date};
	} else {
		var thisYearIsoWeek1Date = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne(inputYear);
		return A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$Before, date, thisYearIsoWeek1Date) ? {
			ctor: '_Tuple2',
			_0: inputYear - 1,
			_1: _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne(inputYear - 1)
		} : {ctor: '_Tuple2', _0: inputYear, _1: thisYearIsoWeek1Date};
	}
};
var _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek = function (date) {
	var _p2 = _rluiten$elm_date_extra$Date_Extra_Utils$getYearIsoWeekDate(date);
	var year = _p2._0;
	var isoWeek1Date = _p2._1;
	var daysSinceIsoWeek1 = A2(_rluiten$elm_date_extra$Date_Extra_Duration$diffDays, date, isoWeek1Date);
	return {
		ctor: '_Tuple3',
		_0: year,
		_1: ((daysSinceIsoWeek1 / 7) | 0) + 1,
		_2: _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(
			_elm_lang$core$Date$dayOfWeek(date))
	};
};
var _rluiten$elm_date_extra$Date_Extra_Utils$dayList_ = F3(
	function (dayCount, date, list) {
		dayList_:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(dayCount, 0)) {
				return list;
			} else {
				if (_elm_lang$core$Native_Utils.cmp(dayCount, 0) > 0) {
					var _v1 = dayCount - 1,
						_v2 = A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, 1, date),
						_v3 = {ctor: '::', _0: date, _1: list};
					dayCount = _v1;
					date = _v2;
					list = _v3;
					continue dayList_;
				} else {
					var _v4 = dayCount + 1,
						_v5 = A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, -1, date),
						_v6 = {ctor: '::', _0: date, _1: list};
					dayCount = _v4;
					date = _v5;
					list = _v6;
					continue dayList_;
				}
			}
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Utils$dayList = F2(
	function (dayCount, startDate) {
		return _elm_lang$core$List$reverse(
			A3(
				_rluiten$elm_date_extra$Date_Extra_Utils$dayList_,
				dayCount,
				startDate,
				{ctor: '[]'}));
	});

var _rluiten$elm_date_extra$Date_Extra_Format$toHourMin = function (offsetMinutes) {
	return {
		ctor: '_Tuple2',
		_0: (offsetMinutes / 60) | 0,
		_1: A2(_elm_lang$core$Basics_ops['%'], offsetMinutes, 60)
	};
};
var _rluiten$elm_date_extra$Date_Extra_Format$padWithN = F2(
	function (n, c) {
		return function (_p0) {
			return A3(
				_elm_lang$core$String$padLeft,
				n,
				c,
				_elm_lang$core$Basics$toString(_p0));
		};
	});
var _rluiten$elm_date_extra$Date_Extra_Format$padWith = function (c) {
	return function (_p1) {
		return A3(
			_elm_lang$core$String$padLeft,
			2,
			c,
			_elm_lang$core$Basics$toString(_p1));
	};
};
var _rluiten$elm_date_extra$Date_Extra_Format$hourMod12 = function (h) {
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], h, 12),
		0) ? 12 : A2(_elm_lang$core$Basics_ops['%'], h, 12);
};
var _rluiten$elm_date_extra$Date_Extra_Format$formatOffsetStr = F2(
	function (betweenHoursMinutes, offset) {
		var _p2 = _rluiten$elm_date_extra$Date_Extra_Format$toHourMin(
			_elm_lang$core$Basics$abs(offset));
		var hour = _p2._0;
		var minute = _p2._1;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			(_elm_lang$core$Native_Utils.cmp(offset, 0) < 1) ? '+' : '-',
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					hour),
				A2(
					_elm_lang$core$Basics_ops['++'],
					betweenHoursMinutes,
					A2(
						_rluiten$elm_date_extra$Date_Extra_Format$padWith,
						_elm_lang$core$Native_Utils.chr('0'),
						minute))));
	});
var _rluiten$elm_date_extra$Date_Extra_Format$collapse = function (m) {
	return A2(_elm_lang$core$Maybe$andThen, _elm_lang$core$Basics$identity, m);
};
var _rluiten$elm_date_extra$Date_Extra_Format$formatToken = F4(
	function (config, offset, d, m) {
		var symbol = A2(
			_elm_lang$core$Maybe$withDefault,
			' ',
			_rluiten$elm_date_extra$Date_Extra_Format$collapse(
				_elm_lang$core$List$head(m.submatches)));
		var _p3 = symbol;
		switch (_p3) {
			case 'Y':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Format$padWithN,
					4,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$year(d));
			case 'y':
				return A2(
					_elm_lang$core$String$right,
					2,
					A3(
						_rluiten$elm_date_extra$Date_Extra_Format$padWithN,
						2,
						_elm_lang$core$Native_Utils.chr('0'),
						_elm_lang$core$Date$year(d)));
			case 'm':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
						_elm_lang$core$Date$month(d)));
			case '_m':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
						_elm_lang$core$Date$month(d)));
			case '-m':
				return _elm_lang$core$Basics$toString(
					_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
						_elm_lang$core$Date$month(d)));
			case 'B':
				return config.i18n.monthName(
					_elm_lang$core$Date$month(d));
			case '^B':
				return _elm_lang$core$String$toUpper(
					config.i18n.monthName(
						_elm_lang$core$Date$month(d)));
			case 'b':
				return config.i18n.monthShort(
					_elm_lang$core$Date$month(d));
			case '^b':
				return _elm_lang$core$String$toUpper(
					config.i18n.monthShort(
						_elm_lang$core$Date$month(d)));
			case 'd':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$day(d));
			case '-d':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$day(d));
			case '-@d':
				return A2(
					config.i18n.dayOfMonthWithSuffix,
					false,
					_elm_lang$core$Date$day(d));
			case 'e':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_elm_lang$core$Date$day(d));
			case '@e':
				return A2(
					config.i18n.dayOfMonthWithSuffix,
					true,
					_elm_lang$core$Date$day(d));
			case 'A':
				return config.i18n.dayName(
					_elm_lang$core$Date$dayOfWeek(d));
			case '^A':
				return _elm_lang$core$String$toUpper(
					config.i18n.dayName(
						_elm_lang$core$Date$dayOfWeek(d)));
			case 'a':
				return config.i18n.dayShort(
					_elm_lang$core$Date$dayOfWeek(d));
			case '^a':
				return _elm_lang$core$String$toUpper(
					config.i18n.dayShort(
						_elm_lang$core$Date$dayOfWeek(d)));
			case 'H':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$hour(d));
			case '-H':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$hour(d));
			case 'k':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_elm_lang$core$Date$hour(d));
			case 'I':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_rluiten$elm_date_extra$Date_Extra_Format$hourMod12(
						_elm_lang$core$Date$hour(d)));
			case '-I':
				return _elm_lang$core$Basics$toString(
					_rluiten$elm_date_extra$Date_Extra_Format$hourMod12(
						_elm_lang$core$Date$hour(d)));
			case 'l':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_rluiten$elm_date_extra$Date_Extra_Format$hourMod12(
						_elm_lang$core$Date$hour(d)));
			case 'p':
				return _elm_lang$core$String$toUpper(
					config.i18n.twelveHourPeriod(
						_rluiten$elm_date_extra$Date_Extra_TwelveHourClock$twelveHourPeriod(d)));
			case 'P':
				return config.i18n.twelveHourPeriod(
					_rluiten$elm_date_extra$Date_Extra_TwelveHourClock$twelveHourPeriod(d));
			case 'M':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$minute(d));
			case 'S':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$second(d));
			case 'L':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Format$padWithN,
					3,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$millisecond(d));
			case '%':
				return symbol;
			case 'z':
				return A2(_rluiten$elm_date_extra$Date_Extra_Format$formatOffsetStr, '', offset);
			case ':z':
				return A2(_rluiten$elm_date_extra$Date_Extra_Format$formatOffsetStr, ':', offset);
			case 'G':
				var _p4 = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek(d);
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Format$padWithN,
					3,
					_elm_lang$core$Native_Utils.chr('0'),
					_p4._0);
			case 'V':
				var _p5 = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek(d);
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_p5._1);
			case '-V':
				var _p6 = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek(d);
				return _elm_lang$core$Basics$toString(_p6._1);
			case 'u':
				var _p7 = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek(d);
				return _elm_lang$core$Basics$toString(_p7._2);
			default:
				return '';
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Format$formatRegex = _elm_lang$core$Regex$regex('%(y|Y|m|_m|-m|B|^B|b|^b|d|-d|-@d|e|@e|A|^A|a|^a|H|-H|k|I|-I|l|p|P|M|S|%|L|z|:z|G|V|-V|u)');
var _rluiten$elm_date_extra$Date_Extra_Format$formatOffset = F4(
	function (config, targetOffset, formatStr, date) {
		var dateOffset = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(date);
		var hackOffset = dateOffset - targetOffset;
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_rluiten$elm_date_extra$Date_Extra_Format$formatRegex,
			A3(
				_rluiten$elm_date_extra$Date_Extra_Format$formatToken,
				config,
				targetOffset,
				A2(_rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsOffset, hackOffset, date)),
			formatStr);
	});
var _rluiten$elm_date_extra$Date_Extra_Format$format = F3(
	function (config, formatStr, date) {
		return A4(
			_rluiten$elm_date_extra$Date_Extra_Format$formatOffset,
			config,
			_rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(date),
			formatStr,
			date);
	});
var _rluiten$elm_date_extra$Date_Extra_Format$formatUtc = F3(
	function (config, formatStr, date) {
		return A4(_rluiten$elm_date_extra$Date_Extra_Format$formatOffset, config, 0, formatStr, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Format$isoDateString = function (date) {
	var day = _elm_lang$core$Date$day(date);
	var month = _elm_lang$core$Date$month(date);
	var year = _elm_lang$core$Date$year(date);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		A3(
			_elm_lang$core$String$padLeft,
			4,
			_elm_lang$core$Native_Utils.chr('0'),
			_elm_lang$core$Basics$toString(year)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'-',
			A2(
				_elm_lang$core$Basics_ops['++'],
				A3(
					_elm_lang$core$String$padLeft,
					2,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Basics$toString(
						_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month))),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'-',
					A3(
						_elm_lang$core$String$padLeft,
						2,
						_elm_lang$core$Native_Utils.chr('0'),
						_elm_lang$core$Basics$toString(day))))));
};
var _rluiten$elm_date_extra$Date_Extra_Format$utcIsoDateString = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Format$isoDateString(
		_rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsUtc(date));
};
var _rluiten$elm_date_extra$Date_Extra_Format$yearInt = function (year) {
	return A3(
		_elm_lang$core$String$padLeft,
		4,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(year));
};
var _rluiten$elm_date_extra$Date_Extra_Format$year = function (date) {
	return A3(
		_elm_lang$core$String$padLeft,
		4,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(
			_elm_lang$core$Date$year(date)));
};
var _rluiten$elm_date_extra$Date_Extra_Format$monthMonth = function (month) {
	return A3(
		_elm_lang$core$String$padLeft,
		2,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(
			_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month)));
};
var _rluiten$elm_date_extra$Date_Extra_Format$month = function (date) {
	return A3(
		_elm_lang$core$String$padLeft,
		2,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(
			_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
				_elm_lang$core$Date$month(date))));
};
var _rluiten$elm_date_extra$Date_Extra_Format$isoTimeFormat = '%H:%M:%S';
var _rluiten$elm_date_extra$Date_Extra_Format$isoDateFormat = '%Y-%m-%d';
var _rluiten$elm_date_extra$Date_Extra_Format$isoMsecOffsetFormat = '%Y-%m-%dT%H:%M:%S.%L%:z';
var _rluiten$elm_date_extra$Date_Extra_Format$isoString = A2(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _rluiten$elm_date_extra$Date_Extra_Format$isoMsecOffsetFormat);
var _rluiten$elm_date_extra$Date_Extra_Format$isoOffsetFormat = '%Y-%m-%dT%H:%M:%S%z';
var _rluiten$elm_date_extra$Date_Extra_Format$isoMsecFormat = '%Y-%m-%dT%H:%M:%S.%L';
var _rluiten$elm_date_extra$Date_Extra_Format$isoStringNoOffset = A2(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _rluiten$elm_date_extra$Date_Extra_Format$isoMsecFormat);
var _rluiten$elm_date_extra$Date_Extra_Format$utcIsoString = function (date) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		A3(_rluiten$elm_date_extra$Date_Extra_Format$formatUtc, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _rluiten$elm_date_extra$Date_Extra_Format$isoMsecFormat, date),
		'Z');
};
var _rluiten$elm_date_extra$Date_Extra_Format$isoFormat = '%Y-%m-%dT%H:%M:%S';

var _rtfeldman$hex$Hex$toString = function (num) {
	return _elm_lang$core$String$fromList(
		(_elm_lang$core$Native_Utils.cmp(num, 0) < 0) ? {
			ctor: '::',
			_0: _elm_lang$core$Native_Utils.chr('-'),
			_1: A2(
				_rtfeldman$hex$Hex$unsafePositiveToDigits,
				{ctor: '[]'},
				_elm_lang$core$Basics$negate(num))
		} : A2(
			_rtfeldman$hex$Hex$unsafePositiveToDigits,
			{ctor: '[]'},
			num));
};
var _rtfeldman$hex$Hex$unsafePositiveToDigits = F2(
	function (digits, num) {
		unsafePositiveToDigits:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(num, 16) < 0) {
				return {
					ctor: '::',
					_0: _rtfeldman$hex$Hex$unsafeToDigit(num),
					_1: digits
				};
			} else {
				var _v0 = {
					ctor: '::',
					_0: _rtfeldman$hex$Hex$unsafeToDigit(
						A2(_elm_lang$core$Basics_ops['%'], num, 16)),
					_1: digits
				},
					_v1 = (num / 16) | 0;
				digits = _v0;
				num = _v1;
				continue unsafePositiveToDigits;
			}
		}
	});
var _rtfeldman$hex$Hex$unsafeToDigit = function (num) {
	var _p0 = num;
	switch (_p0) {
		case 0:
			return _elm_lang$core$Native_Utils.chr('0');
		case 1:
			return _elm_lang$core$Native_Utils.chr('1');
		case 2:
			return _elm_lang$core$Native_Utils.chr('2');
		case 3:
			return _elm_lang$core$Native_Utils.chr('3');
		case 4:
			return _elm_lang$core$Native_Utils.chr('4');
		case 5:
			return _elm_lang$core$Native_Utils.chr('5');
		case 6:
			return _elm_lang$core$Native_Utils.chr('6');
		case 7:
			return _elm_lang$core$Native_Utils.chr('7');
		case 8:
			return _elm_lang$core$Native_Utils.chr('8');
		case 9:
			return _elm_lang$core$Native_Utils.chr('9');
		case 10:
			return _elm_lang$core$Native_Utils.chr('a');
		case 11:
			return _elm_lang$core$Native_Utils.chr('b');
		case 12:
			return _elm_lang$core$Native_Utils.chr('c');
		case 13:
			return _elm_lang$core$Native_Utils.chr('d');
		case 14:
			return _elm_lang$core$Native_Utils.chr('e');
		case 15:
			return _elm_lang$core$Native_Utils.chr('f');
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'Hex',
				{
					start: {line: 138, column: 5},
					end: {line: 188, column: 84}
				},
				_p0)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Tried to convert ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_rtfeldman$hex$Hex$toString(num),
						' to hexadecimal.')));
	}
};
var _rtfeldman$hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		var _p2 = chars;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Result$Ok(accumulated);
		} else {
			var recurse = function (additional) {
				return A3(
					_rtfeldman$hex$Hex$fromStringHelp,
					position - 1,
					_p2._1,
					accumulated + (additional * Math.pow(16, position)));
			};
			var _p3 = _p2._0;
			switch (_p3.valueOf()) {
				case '0':
					return recurse(0);
				case '1':
					return recurse(1);
				case '2':
					return recurse(2);
				case '3':
					return recurse(3);
				case '4':
					return recurse(4);
				case '5':
					return recurse(5);
				case '6':
					return recurse(6);
				case '7':
					return recurse(7);
				case '8':
					return recurse(8);
				case '9':
					return recurse(9);
				case 'a':
					return recurse(10);
				case 'b':
					return recurse(11);
				case 'c':
					return recurse(12);
				case 'd':
					return recurse(13);
				case 'e':
					return recurse(14);
				case 'f':
					return recurse(15);
				default:
					return _elm_lang$core$Result$Err(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p3),
							' is not a valid hexadecimal character.'));
			}
		}
	});
var _rtfeldman$hex$Hex$fromString = function (str) {
	if (_elm_lang$core$String$isEmpty(str)) {
		return _elm_lang$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var formatError = function (err) {
			return A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(str),
					_1: {
						ctor: '::',
						_0: 'is not a valid hexadecimal string because',
						_1: {
							ctor: '::',
							_0: err,
							_1: {ctor: '[]'}
						}
					}
				});
		};
		var result = function () {
			if (A2(_elm_lang$core$String$startsWith, '-', str)) {
				var list = A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					_elm_lang$core$List$tail(
						_elm_lang$core$String$toList(str)));
				return A2(
					_elm_lang$core$Result$map,
					_elm_lang$core$Basics$negate,
					A3(
						_rtfeldman$hex$Hex$fromStringHelp,
						_elm_lang$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					_rtfeldman$hex$Hex$fromStringHelp,
					_elm_lang$core$String$length(str) - 1,
					_elm_lang$core$String$toList(str),
					0);
			}
		}();
		return A2(_elm_lang$core$Result$mapError, formatError, result);
	}
};

var _user$project$XerocraftApi$cloneAcctToXis = F5(
	function (url, csrfToken, username, userpw, resultToMsg) {
		var bodyObj = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'username',
				_1: _elm_lang$core$Json_Encode$string(username)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'userpw',
					_1: _elm_lang$core$Json_Encode$string(userpw)
				},
				_1: {ctor: '[]'}
			}
		};
		var request = _elm_lang$http$Http$request(
			{
				method: 'POST',
				url: url,
				headers: {
					ctor: '::',
					_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', csrfToken),
					_1: {ctor: '[]'}
				},
				withCredentials: false,
				body: _elm_lang$http$Http$jsonBody(
					_elm_lang$core$Json_Encode$object(bodyObj)),
				timeout: _elm_lang$core$Maybe$Nothing,
				expect: _elm_lang$http$Http$expectString
			});
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XerocraftApi$scrapeXcOrgLogins = F2(
	function (url, result2Msg) {
		var request = _elm_lang$http$Http$getString(url);
		return A2(_elm_lang$http$Http$send, result2Msg, request);
	});

var _user$project$ClockTime$format = F2(
	function (fmt, ct) {
		var d = A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, 0, _elm_lang$core$Date$Jan, 0, ct.hour, ct.minute, 0, 0);
		return A3(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, fmt, d);
	});
var _user$project$ClockTime$toString = function (ct) {
	var stringParts = A2(
		_elm_lang$core$List$map,
		_elm_lang$core$Basics$toString,
		{
			ctor: '::',
			_0: ct.hour,
			_1: {
				ctor: '::',
				_0: ct.minute,
				_1: {ctor: '[]'}
			}
		});
	return A2(_elm_lang$core$String$join, ':', stringParts);
};
var _user$project$ClockTime$ClockTime = F2(
	function (a, b) {
		return {hour: a, minute: b};
	});
var _user$project$ClockTime$fromString = function (s) {
	var s2 = _elm_lang$core$String$toLower(
		_elm_lang$core$String$trim(s));
	var isPM = A2(_elm_lang$core$String$endsWith, 'pm', s2);
	var isAM = A2(_elm_lang$core$String$endsWith, 'am', s2);
	var s3 = _elm_lang$core$String$trim(
		A3(
			_elm_community$string_extra$String_Extra$replace,
			'am',
			'',
			A3(_elm_community$string_extra$String_Extra$replace, 'pm', '', s2)));
	var hrMinList = A2(_elm_lang$core$String$split, ':', s3);
	var hrMemb = _elm_lang$core$List$head(hrMinList);
	var hr = A2(_elm_lang$core$Maybe$map, _elm_lang$core$String$toInt, hrMemb);
	var minMemb = _elm_community$list_extra$List_Extra$last(hrMinList);
	var min = A2(_elm_lang$core$Maybe$map, _elm_lang$core$String$toInt, minMemb);
	var _p0 = {
		ctor: '_Tuple3',
		_0: A2(_elm_lang$core$Basics$xor, isAM, isPM),
		_1: hr,
		_2: min
	};
	_v0_2:
	do {
		if (_p0.ctor === '_Tuple3') {
			if (_p0._0 === false) {
				return _elm_lang$core$Result$Err('Please specify AM or PM.');
			} else {
				if ((((_p0._1.ctor === 'Just') && (_p0._1._0.ctor === 'Ok')) && (_p0._2.ctor === 'Just')) && (_p0._2._0.ctor === 'Ok')) {
					var _p1 = _p0._1._0._0;
					return _elm_lang$core$Result$Ok(
						A2(
							_user$project$ClockTime$ClockTime,
							_p1 + ((isPM && (_elm_lang$core$Native_Utils.cmp(_p1, 12) < 0)) ? 12 : 0),
							_p0._2._0._0));
				} else {
					break _v0_2;
				}
			}
		} else {
			break _v0_2;
		}
	} while(false);
	return _elm_lang$core$Result$Err('Please specify HH:MM AM/PM.');
};
var _user$project$ClockTime$fromTime = function (t) {
	var d = _elm_lang$core$Date$fromTime(t);
	return A2(
		_user$project$ClockTime$ClockTime,
		_elm_lang$core$Date$hour(d),
		_elm_lang$core$Date$minute(d));
};

var _user$project$CalendarDate$toDate = function (cd) {
	return A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, cd.year, cd.month, cd.day, 0, 0, 0, 0);
};
var _user$project$CalendarDate$monthName = function (m) {
	return _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthName(m);
};
var _user$project$CalendarDate$prevMonth = _rluiten$elm_date_extra$Date_Extra_Core$prevMonth;
var _user$project$CalendarDate$nextMonth = _rluiten$elm_date_extra$Date_Extra_Core$nextMonth;
var _user$project$CalendarDate$intToMonth = _rluiten$elm_date_extra$Date_Extra_Core$intToMonth;
var _user$project$CalendarDate$monthToInt = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt;
var _user$project$CalendarDate$dayOfWeekToInt = function (dow) {
	var _p0 = dow;
	switch (_p0.ctor) {
		case 'Sun':
			return 0;
		case 'Mon':
			return 1;
		case 'Tue':
			return 2;
		case 'Wed':
			return 3;
		case 'Thu':
			return 4;
		case 'Fri':
			return 5;
		default:
			return 6;
	}
};
var _user$project$CalendarDate$dayOfWeek = function (d) {
	return _elm_lang$core$Date$dayOfWeek(
		_user$project$CalendarDate$toDate(d));
};
var _user$project$CalendarDate$taggedStringToHtml = function (t) {
	return A2(
		_elm_lang$html$Html$span,
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html_Attributes$property,
				'innerHTML',
				_elm_lang$core$Json_Encode$string(t)),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'});
};
var _user$project$CalendarDate$superOrdinals = function (s) {
	var r = F2(
		function (dig, suff) {
			return A2(
				_elm_community$string_extra$String_Extra$replace,
				A2(_elm_lang$core$Basics_ops['++'], dig, suff),
				A2(
					_elm_lang$core$Basics_ops['++'],
					dig,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'<span style=\'font-size:0.75em\'>',
						A2(_elm_lang$core$Basics_ops['++'], suff, '</span>'))));
		});
	var supize = function (_p1) {
		return A3(
			r,
			'9',
			'th',
			A3(
				r,
				'8',
				'th',
				A3(
					r,
					'7',
					'th',
					A3(
						r,
						'6',
						'th',
						A3(
							r,
							'5',
							'th',
							A3(
								r,
								'4',
								'th',
								A3(
									r,
									'3',
									'rd',
									A3(
										r,
										'2',
										'nd',
										A3(
											r,
											'1',
											'st',
											A3(r, '0', 'th', _p1))))))))));
	};
	return _user$project$CalendarDate$taggedStringToHtml(
		supize(s));
};
var _user$project$CalendarDate$format = F2(
	function (fmt, cd) {
		var r = F2(
			function (dig, suff) {
				return A2(
					_elm_community$string_extra$String_Extra$replace,
					A2(_elm_lang$core$Basics_ops['++'], dig, 'dd'),
					A2(_elm_lang$core$Basics_ops['++'], dig, suff));
			});
		var ordinalize = function (_p2) {
			return A3(
				_elm_community$string_extra$String_Extra$replace,
				'dd',
				'th',
				A3(
					r,
					'3',
					'rd',
					A3(
						r,
						'2',
						'nd',
						A3(
							r,
							'1',
							'st',
							A3(
								r,
								'0',
								'th',
								A3(
									r,
									'13',
									'th',
									A3(
										r,
										'12',
										'th',
										A3(r, '11', 'th', _p2))))))));
		};
		var d = _user$project$CalendarDate$toDate(cd);
		var fmtMod = A3(_elm_community$string_extra$String_Extra$replace, '%ddd', '%edd', fmt);
		var s = A3(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, fmtMod, d);
		return ordinalize(s);
	});
var _user$project$CalendarDate$equal = F2(
	function (x, y) {
		return _elm_lang$core$Native_Utils.eq(x.year, y.year) && (_elm_lang$core$Native_Utils.eq(x.month, y.month) && _elm_lang$core$Native_Utils.eq(x.day, y.day));
	});
var _user$project$CalendarDate$toString = _user$project$CalendarDate$format('%Y-%m-%d');
var _user$project$CalendarDate$compare = F2(
	function (x, y) {
		return A2(
			_elm_lang$core$Basics$compare,
			_user$project$CalendarDate$toString(x),
			_user$project$CalendarDate$toString(y));
	});
var _user$project$CalendarDate$CalendarDate = F3(
	function (a, b, c) {
		return {year: a, month: b, day: c};
	});
var _user$project$CalendarDate$fromString = function (s) {
	var s2 = A2(_elm_lang$core$Basics_ops['++'], s, ' 00:00:00');
	return A2(
		_elm_lang$core$Result$map,
		function (x) {
			return A3(
				_user$project$CalendarDate$CalendarDate,
				_elm_lang$core$Date$year(x),
				_elm_lang$core$Date$month(x),
				_elm_lang$core$Date$day(x));
		},
		_elm_lang$core$Date$fromString(
			A2(_elm_lang$core$Basics_ops['++'], s, ' 00:00:00')));
};
var _user$project$CalendarDate$fromDate = function (d) {
	return A3(
		_user$project$CalendarDate$CalendarDate,
		_elm_lang$core$Date$year(d),
		_elm_lang$core$Date$month(d),
		_elm_lang$core$Date$day(d));
};
var _user$project$CalendarDate$fromTime = function (_p3) {
	return _user$project$CalendarDate$fromDate(
		_elm_lang$core$Date$fromTime(_p3));
};
var _user$project$CalendarDate$lastOfMonth = function (cd) {
	return _user$project$CalendarDate$fromDate(
		_rluiten$elm_date_extra$Date_Extra_Core$lastOfMonthDate(
			_user$project$CalendarDate$toDate(cd)));
};
var _user$project$CalendarDate$addDays = F2(
	function (offset, cd) {
		return _user$project$CalendarDate$fromDate(
			A3(
				_rluiten$elm_date_extra$Date_Extra_Duration$add,
				_rluiten$elm_date_extra$Date_Extra_Duration$Day,
				offset,
				_user$project$CalendarDate$toDate(cd)));
	});

var _user$project$PointInTime$millisecond = function (_p0) {
	return _elm_lang$core$Date$millisecond(
		_elm_lang$core$Date$fromTime(_p0));
};
var _user$project$PointInTime$second = function (_p1) {
	return _elm_lang$core$Date$second(
		_elm_lang$core$Date$fromTime(_p1));
};
var _user$project$PointInTime$minute = function (_p2) {
	return _elm_lang$core$Date$minute(
		_elm_lang$core$Date$fromTime(_p2));
};
var _user$project$PointInTime$hour = function (_p3) {
	return _elm_lang$core$Date$hour(
		_elm_lang$core$Date$fromTime(_p3));
};
var _user$project$PointInTime$dayOfWeek = function (_p4) {
	return _elm_lang$core$Date$dayOfWeek(
		_elm_lang$core$Date$fromTime(_p4));
};
var _user$project$PointInTime$dayOfMonth = function (_p5) {
	return _elm_lang$core$Date$day(
		_elm_lang$core$Date$fromTime(_p5));
};
var _user$project$PointInTime$month = function (_p6) {
	return _elm_lang$core$Date$month(
		_elm_lang$core$Date$fromTime(_p6));
};
var _user$project$PointInTime$year = function (_p7) {
	return _elm_lang$core$Date$year(
		_elm_lang$core$Date$fromTime(_p7));
};
var _user$project$PointInTime$isoString = function (_p8) {
	return _rluiten$elm_date_extra$Date_Extra_Format$isoString(
		_elm_lang$core$Date$fromTime(_p8));
};
var _user$project$PointInTime$toCalendarDate = function (pt) {
	return A3(
		_user$project$CalendarDate$CalendarDate,
		_user$project$PointInTime$year(pt),
		_user$project$PointInTime$month(pt),
		_user$project$PointInTime$dayOfMonth(pt));
};
var _user$project$PointInTime$toClockTime = function (pt) {
	return A2(
		_user$project$ClockTime$ClockTime,
		_user$project$PointInTime$hour(pt),
		_user$project$PointInTime$minute(pt));
};
var _user$project$PointInTime$fromCalendarDateAndClockTime = F2(
	function (cd, ct) {
		var d = A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, cd.year, cd.month, cd.day, ct.hour, ct.minute, 0, 0);
		return _elm_lang$core$Date$toTime(d);
	});
var _user$project$PointInTime$fromString = function (s) {
	var date = _elm_lang$core$Date$fromString(s);
	var _p9 = date;
	if (_p9.ctor === 'Ok') {
		return _elm_lang$core$Result$Ok(
			_elm_lang$core$Date$toTime(_p9._0));
	} else {
		return _elm_lang$core$Result$Err(_p9._0);
	}
};
var _user$project$PointInTime$now = _elm_lang$core$Time$now;

var _user$project$Duration$ticksPerSecond = _elm_lang$core$Time$second;
var _user$project$Duration$ticksPerMinute = _elm_lang$core$Time$minute;
var _user$project$Duration$ticksPerHour = _elm_lang$core$Time$hour;
var _user$project$Duration$toPluralStr = F2(
	function (n, unit) {
		var ending = (!_elm_lang$core$Native_Utils.eq(n, 1)) ? 's' : '';
		return _elm_lang$core$Native_Utils.eq(n, 0) ? '' : A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(n),
			A2(
				_elm_lang$core$Basics_ops['++'],
				' ',
				A2(_elm_lang$core$Basics_ops['++'], unit, ending)));
	});
var _user$project$Duration$toString = function (dur) {
	var hrs = _elm_lang$core$Basics$floor(
		_elm_lang$core$Time$inHours(dur));
	var mins = _elm_lang$core$Basics$floor(
		_elm_lang$core$Time$inMinutes(
			dur - (_elm_lang$core$Basics$toFloat(hrs) * _user$project$Duration$ticksPerHour)));
	if (_elm_lang$core$Native_Utils.eq(hrs + mins, 0)) {
		return '0';
	} else {
		var minsStr = A2(_user$project$Duration$toPluralStr, mins, 'min');
		var hrsStr = A2(_user$project$Duration$toPluralStr, hrs, 'hr');
		return _elm_lang$core$String$trim(
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: hrsStr,
					_1: {
						ctor: '::',
						_0: minsStr,
						_1: {ctor: '[]'}
					}
				}));
	}
};
var _user$project$Duration$fromString = _elm_lang$core$String$toFloat;

var _user$project$DjangoRestFramework$httpErrToStr = function (err) {
	var _p0 = err;
	switch (_p0.ctor) {
		case 'Timeout':
			return 'Timeout';
		case 'NetworkError':
			return 'Network Error';
		case 'BadPayload':
			return _p0._0;
		case 'BadStatus':
			return _p0._0.status.message;
		default:
			return _p0._0;
	}
};
var _user$project$DjangoRestFramework$authenticationHeader = function (auth) {
	var _p1 = auth;
	switch (_p1.ctor) {
		case 'Token':
			return A2(
				_elm_lang$http$Http$header,
				'Authorization',
				A2(_elm_lang$core$Basics_ops['++'], 'Token ', _p1._0));
		case 'LoggedIn':
			return A2(_elm_lang$http$Http$header, 'X-CSRFToken', _p1._0);
		default:
			return A2(_elm_lang$http$Http$header, 'X-NoAuth', 'NoAuth');
	}
};
var _user$project$DjangoRestFramework$getRequest = F3(
	function (auth, url, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'GET',
				url: url,
				headers: {
					ctor: '::',
					_0: _user$project$DjangoRestFramework$authenticationHeader(auth),
					_1: {ctor: '[]'}
				},
				withCredentials: false,
				body: _elm_lang$http$Http$emptyBody,
				timeout: _elm_lang$core$Maybe$Nothing,
				expect: _elm_lang$http$Http$expectJson(decoder)
			});
	});
var _user$project$DjangoRestFramework$deleteRequest = F2(
	function (auth, url) {
		return _elm_lang$http$Http$request(
			{
				method: 'DELETE',
				url: url,
				headers: {
					ctor: '::',
					_0: _user$project$DjangoRestFramework$authenticationHeader(auth),
					_1: {ctor: '[]'}
				},
				withCredentials: false,
				body: _elm_lang$http$Http$emptyBody,
				timeout: _elm_lang$core$Maybe$Nothing,
				expect: _elm_lang$http$Http$expectString
			});
	});
var _user$project$DjangoRestFramework$postRequest = F4(
	function (auth, url, responseDecoder, encodedData) {
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {
					ctor: '::',
					_0: _user$project$DjangoRestFramework$authenticationHeader(auth),
					_1: {ctor: '[]'}
				},
				url: url,
				body: _elm_lang$http$Http$jsonBody(encodedData),
				expect: _elm_lang$http$Http$expectJson(responseDecoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _user$project$DjangoRestFramework$postRequestExpectingString = F3(
	function (auth, url, encodedData) {
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {
					ctor: '::',
					_0: _user$project$DjangoRestFramework$authenticationHeader(auth),
					_1: {ctor: '[]'}
				},
				url: url,
				body: _elm_lang$http$Http$jsonBody(encodedData),
				expect: _elm_lang$http$Http$expectString,
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _user$project$DjangoRestFramework$idFromUrl = function (url) {
	var parts = A2(_elm_lang$core$String$split, '/', url);
	var numberStrs = A2(
		_elm_lang$core$List$filter,
		_elm_lang$core$String$all(_elm_lang$core$Char$isDigit),
		A2(
			_elm_lang$core$List$filter,
			function (_p2) {
				return !_elm_lang$core$String$isEmpty(_p2);
			},
			parts));
	var numberStr = A2(
		_elm_lang$core$Maybe$withDefault,
		'FOO',
		_elm_lang$core$List$head(numberStrs));
	return (!_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(numberStrs),
		1)) ? _elm_lang$core$Result$Err('Unhandled URL format.') : _elm_lang$core$String$toInt(numberStr);
};
var _user$project$DjangoRestFramework$urlFromId = F2(
	function (listUrl, resNum) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			listUrl,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(resNum),
				'/'));
	});
var _user$project$DjangoRestFramework$extractRelativeUrl = function (url) {
	var urlBaseRegex = _elm_lang$core$Regex$regex('^.+?[^\\/:](?=[?\\/]|$)');
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$AtMost(1),
		urlBaseRegex,
		_elm_lang$core$Basics$always(''),
		url);
};
var _user$project$DjangoRestFramework$decodeResourceUrl = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (str) {
		return _elm_lang$core$Json_Decode$succeed(
			_user$project$DjangoRestFramework$extractRelativeUrl(str));
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$DjangoRestFramework$encodeResource = F2(
	function (dataNVPer, res) {
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'id',
					_1: _elm_lang$core$Json_Encode$int(res.id)
				},
				_1: dataNVPer(res.data)
			});
	});
var _user$project$DjangoRestFramework$durationToPythonRepr = function (dur1) {
	var pad = function (_p3) {
		return A3(
			_elm_lang$core$String$padLeft,
			2,
			_elm_lang$core$Native_Utils.chr('0'),
			_elm_lang$core$Basics$toString(_p3));
	};
	var day = 24.0 * _user$project$Duration$ticksPerHour;
	var daysInt = _elm_lang$core$Basics$floor(dur1 / day);
	var dur2 = dur1 - (_elm_lang$core$Basics$toFloat(daysInt) * day);
	var hoursInt = _elm_lang$core$Basics$floor(dur2 / _user$project$Duration$ticksPerHour);
	var dur3 = dur2 - (_elm_lang$core$Basics$toFloat(hoursInt) * _user$project$Duration$ticksPerHour);
	var minsInt = _elm_lang$core$Basics$floor(dur3 / _user$project$Duration$ticksPerMinute);
	var dur4 = dur3 - (_elm_lang$core$Basics$toFloat(minsInt) * _user$project$Duration$ticksPerMinute);
	var secsInt = _elm_lang$core$Basics$floor(dur4 / _user$project$Duration$ticksPerSecond);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(daysInt),
		A2(
			_elm_lang$core$Basics_ops['++'],
			' ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				pad(hoursInt),
				A2(
					_elm_lang$core$Basics_ops['++'],
					':',
					A2(
						_elm_lang$core$Basics_ops['++'],
						pad(minsInt),
						A2(
							_elm_lang$core$Basics_ops['++'],
							':',
							pad(secsInt)))))));
};
var _user$project$DjangoRestFramework$encodeDuration = function (_p4) {
	return _elm_lang$core$Json_Encode$string(
		_user$project$DjangoRestFramework$durationToPythonRepr(_p4));
};
var _user$project$DjangoRestFramework$durationFromPythonRepr = function (s) {
	var weights3 = {
		ctor: '::',
		_0: 1 * _user$project$Duration$ticksPerHour,
		_1: {
			ctor: '::',
			_0: 1 * _user$project$Duration$ticksPerMinute,
			_1: {
				ctor: '::',
				_0: 1 * _user$project$Duration$ticksPerSecond,
				_1: {ctor: '[]'}
			}
		}
	};
	var weights4 = {ctor: '::', _0: 24 * _user$project$Duration$ticksPerHour, _1: weights3};
	var partsAsListString = A3(
		_elm_lang$core$Regex$split,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('[: ]'),
		s);
	var partCount = _elm_lang$core$List$length(partsAsListString);
	var weights = _elm_lang$core$Native_Utils.eq(partCount, 3) ? weights3 : weights4;
	var partsAsListResultFloat = A2(_elm_lang$core$List$map, _elm_lang$core$String$toFloat, partsAsListString);
	var partsAsResultListFloat = _elm_community$result_extra$Result_Extra$combine(partsAsListResultFloat);
	return A2(
		_elm_lang$core$Result$map,
		_elm_lang$core$List$sum,
		A3(
			_elm_lang$core$Result$map2,
			_elm_lang$core$List$map2(
				F2(
					function (x, y) {
						return x * y;
					})),
			_elm_lang$core$Result$Ok(weights),
			partsAsResultListFloat));
};
var _user$project$DjangoRestFramework$decodeDuration = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (str) {
		var _p5 = _user$project$DjangoRestFramework$durationFromPythonRepr(str);
		if (_p5.ctor === 'Ok') {
			return _elm_lang$core$Json_Decode$succeed(_p5._0);
		} else {
			return _elm_lang$core$Json_Decode$fail(
				A2(_elm_lang$core$Basics_ops['++'], 'Incorrectly formatted duration: ', str));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$DjangoRestFramework$encodePointInTime = function (_p6) {
	return _elm_lang$core$Json_Encode$string(
		_user$project$PointInTime$isoString(_p6));
};
var _user$project$DjangoRestFramework$decodePointInTime = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (str) {
		var _p7 = _user$project$PointInTime$fromString(str);
		if (_p7.ctor === 'Ok') {
			return _elm_lang$core$Json_Decode$succeed(_p7._0);
		} else {
			return _elm_lang$core$Json_Decode$fail(_p7._0);
		}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$DjangoRestFramework$clockTimeFromDate = function (d) {
	return A2(
		_user$project$ClockTime$ClockTime,
		_elm_lang$core$Date$hour(d),
		_elm_lang$core$Date$minute(d));
};
var _user$project$DjangoRestFramework$clockTimeFromTime = function (t) {
	return _user$project$DjangoRestFramework$clockTimeFromDate(
		_elm_lang$core$Date$fromTime(t));
};
var _user$project$DjangoRestFramework$clockTimeFromPythonRepr = function (s) {
	var parts = A3(
		_elm_lang$core$Regex$split,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('[:]'),
		s);
	var hourResult = A2(
		_elm_lang$core$Maybe$map,
		_elm_lang$core$String$toInt,
		A2(_elm_community$list_extra$List_Extra$getAt, 0, parts));
	var minuteResult = A2(
		_elm_lang$core$Maybe$map,
		_elm_lang$core$String$toInt,
		A2(_elm_community$list_extra$List_Extra$getAt, 1, parts));
	var _p8 = {ctor: '_Tuple2', _0: hourResult, _1: minuteResult};
	if (((((_p8.ctor === '_Tuple2') && (_p8._0.ctor === 'Just')) && (_p8._0._0.ctor === 'Ok')) && (_p8._1.ctor === 'Just')) && (_p8._1._0.ctor === 'Ok')) {
		return _elm_lang$core$Result$Ok(
			A2(_user$project$ClockTime$ClockTime, _p8._0._0._0, _p8._1._0._0));
	} else {
		return _elm_lang$core$Result$Err(
			A2(_elm_lang$core$Basics_ops['++'], s, ' is an invalid clock time'));
	}
};
var _user$project$DjangoRestFramework$decodeClockTime = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (str) {
		var _p9 = _user$project$DjangoRestFramework$clockTimeFromPythonRepr(str);
		if (_p9.ctor === 'Ok') {
			return _elm_lang$core$Json_Decode$succeed(_p9._0);
		} else {
			return _elm_lang$core$Json_Decode$fail(_p9._0);
		}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$DjangoRestFramework$clockTimeToPythonRepr = function (ct) {
	var minute = A3(
		_elm_lang$core$String$padLeft,
		2,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(ct.minute));
	var hour = A3(
		_elm_lang$core$String$padLeft,
		2,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(ct.hour));
	return A2(
		_elm_lang$core$Basics_ops['++'],
		hour,
		A2(_elm_lang$core$Basics_ops['++'], ':', minute));
};
var _user$project$DjangoRestFramework$encodeClockTime = function (_p10) {
	return _elm_lang$core$Json_Encode$string(
		_user$project$DjangoRestFramework$clockTimeToPythonRepr(_p10));
};
var _user$project$DjangoRestFramework$clockTimeToString = function (clockTime) {
	var _p11 = clockTime;
	if (_p11.ctor === 'Just') {
		return _user$project$DjangoRestFramework$clockTimeToPythonRepr(_p11._0);
	} else {
		return '--:--';
	}
};
var _user$project$DjangoRestFramework$decodeCalendarDate = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (str) {
		var _p12 = _user$project$CalendarDate$fromString(str);
		if (_p12.ctor === 'Ok') {
			return _elm_lang$core$Json_Decode$succeed(_p12._0);
		} else {
			return _elm_lang$core$Json_Decode$fail(_p12._0);
		}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$DjangoRestFramework$encodeCalendarDate = function (_p13) {
	return _elm_lang$core$Json_Encode$string(
		_user$project$CalendarDate$toString(_p13));
};
var _user$project$DjangoRestFramework$PageOf = F4(
	function (a, b, c, d) {
		return {count: a, next: b, previous: c, results: d};
	});
var _user$project$DjangoRestFramework$decodePageOf = function (decoder) {
	return A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'results',
		_elm_lang$core$Json_Decode$list(decoder),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'previous',
			_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'next',
				_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'count',
					_elm_lang$core$Json_Decode$int,
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$DjangoRestFramework$PageOf)))));
};
var _user$project$DjangoRestFramework$Resource = F2(
	function (a, b) {
		return {id: a, data: b};
	});
var _user$project$DjangoRestFramework$decodeResource = function (dataDecoder) {
	return A3(
		_elm_lang$core$Json_Decode$map2,
		_user$project$DjangoRestFramework$Resource,
		A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
		dataDecoder);
};
var _user$project$DjangoRestFramework$Token = function (a) {
	return {ctor: 'Token', _0: a};
};
var _user$project$DjangoRestFramework$LoggedIn = function (a) {
	return {ctor: 'LoggedIn', _0: a};
};
var _user$project$DjangoRestFramework$NoAuthorization = {ctor: 'NoAuthorization'};

var _user$project$RangeOfTime$containsPoint = F2(
	function (_p0, pt) {
		var _p1 = _p0;
		return (_elm_lang$core$Native_Utils.cmp(_p1._0, pt) < 1) && (_elm_lang$core$Native_Utils.cmp(pt, _p1._1) < 0);
	});
var _user$project$RangeOfTime$fromCalendarDate = function (someCD) {
	var begin = A2(
		_user$project$PointInTime$fromCalendarDateAndClockTime,
		someCD,
		A2(_user$project$ClockTime$ClockTime, 0, 0));
	var end = begin + (24 * _elm_lang$core$Time$hour);
	return {ctor: '_Tuple2', _0: begin, _1: end};
};
var _user$project$RangeOfTime$fromCalendarDates = F2(
	function (startCD, endCD) {
		var _p2 = _user$project$RangeOfTime$fromCalendarDate(endCD);
		var end = _p2._1;
		var _p3 = _user$project$RangeOfTime$fromCalendarDate(startCD);
		var start = _p3._0;
		return {ctor: '_Tuple2', _0: start, _1: end};
	});

var _user$project$XisRestApi$emailMembershipInfo = F4(
	function (flags, auth, memberId, tagger) {
		var val = _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'memberpk',
					_1: _elm_lang$core$Json_Encode$int(memberId)
				},
				_1: {ctor: '[]'}
			});
		var request = A3(_user$project$DjangoRestFramework$postRequestExpectingString, auth, flags.emailMembershipInfoUrl, val);
		return A2(_elm_lang$http$Http$send, tagger, request);
	});
var _user$project$XisRestApi$encodeAuthenticateRequestData = F2(
	function (userName, password) {
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'username',
					_1: _elm_lang$core$Json_Encode$string(userName)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'userpw',
						_1: _elm_lang$core$Json_Encode$string(password)
					},
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$XisRestApi$logLevelToStr = function (logLevel) {
	var _p0 = logLevel;
	switch (_p0.ctor) {
		case 'LL_Debug':
			return 'D';
		case 'LL_Info':
			return 'I';
		case 'LL_Warning':
			return 'W';
		case 'LL_Error':
			return 'E';
		default:
			return 'C';
	}
};
var _user$project$XisRestApi$logMessage = F6(
	function (flags, auth, loggerName, logLevel, msgToLog, tagger) {
		var obj = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'logger_name',
				_1: _elm_lang$core$Json_Encode$string(loggerName)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'log_level',
					_1: _elm_lang$core$Json_Encode$string(
						_user$project$XisRestApi$logLevelToStr(logLevel))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'msg_to_log',
						_1: _elm_lang$core$Json_Encode$string(msgToLog)
					},
					_1: {ctor: '[]'}
				}
			}
		};
		var val = _elm_lang$core$Json_Encode$object(obj);
		var request = A3(_user$project$DjangoRestFramework$postRequestExpectingString, auth, flags.logMessageUrl, val);
		return A2(_elm_lang$http$Http$send, tagger, request);
	});
var _user$project$XisRestApi$replaceAll = F2(
	function (_p1, whole) {
		var _p2 = _p1;
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex(_p2.oldSub),
			function (_p3) {
				return _p2.newSub;
			},
			whole);
	});
var _user$project$XisRestApi$djangoizeId = function (rawId) {
	return A2(
		_user$project$XisRestApi$replaceAll,
		{oldSub: '[^-a-zA-Z0-9_@+.]', newSub: '_'},
		rawId);
};
var _user$project$XisRestApi$filteredListUrl = F3(
	function (listUrl, filters, filterToString) {
		var filtersStr = function () {
			var _p4 = filters;
			if (_p4.ctor === '[]') {
				return '';
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'?',
					A2(
						_elm_lang$core$String$join,
						'&',
						A2(_elm_lang$core$List$map, filterToString, filters)));
			}
		}();
		return A2(_elm_lang$core$Basics_ops['++'], listUrl, filtersStr);
	});
var _user$project$XisRestApi$eventReasonString = function (x) {
	var _p5 = x;
	switch (_p5.ctor) {
		case 'VER_Class':
			return 'CLS';
		case 'VER_Club':
			return 'CLB';
		case 'VER_Curious':
			return 'CUR';
		case 'VER_Guest':
			return 'GST';
		case 'VER_Member':
			return 'MEM';
		case 'VER_PublicAccess':
			return 'PUB';
		case 'VER_Other':
			return 'OTH';
		default:
			return 'VOL';
	}
};
var _user$project$XisRestApi$eventMethodString = function (x) {
	var _p6 = x;
	switch (_p6.ctor) {
		case 'VEM_Rfid':
			return 'R';
		case 'VEM_FrontDesk':
			return 'F';
		case 'VEM_MobileApp':
			return 'M';
		default:
			return 'U';
	}
};
var _user$project$XisRestApi$eventTypeString = function (x) {
	var _p7 = x;
	switch (_p7.ctor) {
		case 'VET_Arrival':
			return 'A';
		case 'VET_Departure':
			return 'D';
		default:
			return 'P';
	}
};
var _user$project$XisRestApi$visitEventListFilterToString = function (filter) {
	var _p8 = filter;
	switch (_p8.ctor) {
		case 'VEF_WhenGreaterOrEquals':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'when__gte=',
				_user$project$PointInTime$isoString(_p8._0));
		case 'VEF_EventTypeEquals':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'event_type=',
				_user$project$XisRestApi$eventTypeString(_p8._0));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'method=',
				_user$project$XisRestApi$eventMethodString(_p8._0));
	}
};
var _user$project$XisRestApi$visitEventDataNVPs = F2(
	function (flags, ved) {
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'who',
				_1: _elm_lang$core$Json_Encode$string(ved.who)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'when',
					_1: _user$project$DjangoRestFramework$encodePointInTime(ved.when)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'event_type',
						_1: _elm_lang$core$Json_Encode$string(
							_user$project$XisRestApi$eventTypeString(ved.eventType))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'reason',
							_1: A2(
								_elm_community$json_extra$Json_Encode_Extra$maybe,
								_elm_lang$core$Json_Encode$string,
								A2(_elm_lang$core$Maybe$map, _user$project$XisRestApi$eventReasonString, ved.reason))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'method',
								_1: _elm_lang$core$Json_Encode$string(
									_user$project$XisRestApi$eventMethodString(ved.method))
							},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		};
	});
var _user$project$XisRestApi$compareMembershipByEndDate = F2(
	function (m1, m2) {
		return A2(_user$project$CalendarDate$compare, m1.data.endDate, m2.data.endDate);
	});
var _user$project$XisRestApi$mostRecentMembership = function (memberships) {
	return _elm_lang$core$List$head(
		_elm_lang$core$List$reverse(
			A2(_elm_lang$core$List$sortWith, _user$project$XisRestApi$compareMembershipByEndDate, memberships)));
};
var _user$project$XisRestApi$coverTime = F2(
	function (memberships, now) {
		var _p9 = _user$project$XisRestApi$mostRecentMembership(memberships);
		if (_p9.ctor === 'Nothing') {
			return false;
		} else {
			var _p10 = _p9._0;
			var membershipRange = A2(_user$project$RangeOfTime$fromCalendarDates, _p10.data.startDate, _p10.data.endDate);
			return A2(_user$project$RangeOfTime$containsPoint, membershipRange, now);
		}
	});
var _user$project$XisRestApi$membershipListFilterToString = function (filter) {
	var _p11 = filter;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'member=',
		_elm_lang$core$Basics$toString(_p11._0));
};
var _user$project$XisRestApi$pitInBlock = F2(
	function (pit, block) {
		var actualToD = _user$project$ClockTime$fromTime(pit);
		var actualDoW = _user$project$PointInTime$dayOfWeek(pit);
		var actualNth = ((_user$project$PointInTime$dayOfMonth(pit) / 7) | 0) + 1;
		var dayOfMonth = _user$project$PointInTime$dayOfMonth(pit);
		var month = _user$project$PointInTime$month(pit);
		var year = _user$project$PointInTime$year(pit);
		var calendarDate = A3(_user$project$CalendarDate$CalendarDate, year, month, dayOfMonth);
		var bd = block.data;
		var _p12 = bd.last ? _elm_lang$core$Native_Utils.crash(
			'XisRestApi',
			{
				start: {line: 1035, column: 25},
				end: {line: 1035, column: 36}
			})('The \'last xday\' case is not yet supported') : 'OK';
		var nthMatch = bd.every || ((bd.first && _elm_lang$core$Native_Utils.eq(actualNth, 1)) || ((bd.second && _elm_lang$core$Native_Utils.eq(actualNth, 2)) || ((bd.third && _elm_lang$core$Native_Utils.eq(actualNth, 3)) || (bd.fourth && _elm_lang$core$Native_Utils.eq(actualNth, 4)))));
		var dowMatch = (bd.monday && _elm_lang$core$Native_Utils.eq(actualDoW, _elm_lang$core$Date$Mon)) || ((bd.tuesday && _elm_lang$core$Native_Utils.eq(actualDoW, _elm_lang$core$Date$Tue)) || ((bd.wednesday && _elm_lang$core$Native_Utils.eq(actualDoW, _elm_lang$core$Date$Wed)) || ((bd.thursday && _elm_lang$core$Native_Utils.eq(actualDoW, _elm_lang$core$Date$Thu)) || ((bd.friday && _elm_lang$core$Native_Utils.eq(actualDoW, _elm_lang$core$Date$Fri)) || ((bd.saturday && _elm_lang$core$Native_Utils.eq(actualDoW, _elm_lang$core$Date$Sat)) || (bd.sunday && _elm_lang$core$Native_Utils.eq(actualDoW, _elm_lang$core$Date$Sun)))))));
		var startPit = A2(_user$project$PointInTime$fromCalendarDateAndClockTime, calendarDate, bd.startTime);
		var lateEnough = _elm_lang$core$Native_Utils.cmp(startPit, pit) < 1;
		var earlyEnough = _elm_lang$core$Native_Utils.cmp(pit, startPit + bd.duration) < 1;
		return nthMatch && (dowMatch && (lateEnough && earlyEnough));
	});
var _user$project$XisRestApi$getBlocksTypes = F2(
	function (specificBlock, allBlockTypes) {
		var relatedBlockTypeIds = A2(_elm_lang$core$List$map, _user$project$DjangoRestFramework$idFromUrl, specificBlock.data.types);
		var isRelatedBlockType = function (x) {
			return A2(
				_elm_lang$core$List$member,
				_elm_lang$core$Result$Ok(x.id),
				relatedBlockTypeIds);
		};
		return A2(_elm_lang$core$List$filter, isRelatedBlockType, allBlockTypes);
	});
var _user$project$XisRestApi$blockHasType = F3(
	function (typeName, allBlockTypes, block) {
		var blocksTypes = A2(_user$project$XisRestApi$getBlocksTypes, block, allBlockTypes);
		return A2(
			_elm_lang$core$List$member,
			typeName,
			A2(
				_elm_lang$core$List$map,
				function (_p13) {
					return function (_) {
						return _.name;
					}(
						function (_) {
							return _.data;
						}(_p13));
				},
				blocksTypes));
	});
var _user$project$XisRestApi$defaultBlockType = function (allBlockTypes) {
	return _elm_lang$core$List$head(
		A2(
			_elm_lang$core$List$filter,
			function (_p14) {
				return function (_) {
					return _.isDefault;
				}(
					function (_) {
						return _.data;
					}(_p14));
			},
			allBlockTypes));
};
var _user$project$XisRestApi$memberListFilterToString = function (filter) {
	var _p15 = filter;
	switch (_p15.ctor) {
		case 'RfidNumberEquals':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'rfidnum=',
				_elm_lang$core$Basics$toString(_p15._0));
		case 'EmailEquals':
			return A2(_elm_lang$core$Basics_ops['++'], 'auth_user__email__iexact=', _p15._0);
		case 'UsernameEquals':
			return A2(_elm_lang$core$Basics_ops['++'], 'auth_user__username__iexact=', _p15._0);
		case 'UsernameContains':
			return A2(_elm_lang$core$Basics_ops['++'], 'auth_user__username__icontains=', _p15._0);
		case 'UsernameStartsWith':
			return A2(_elm_lang$core$Basics_ops['++'], 'auth_user__username__istartswith=', _p15._0);
		case 'LastNameStartsWith':
			return A2(_elm_lang$core$Basics_ops['++'], 'auth_user__last_name__istartswith=', _p15._0);
		case 'LastNameEquals':
			return A2(_elm_lang$core$Basics_ops['++'], 'auth_user__last_name__iexact=', _p15._0);
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'auth_user__is_active=',
				_p15._0 ? '1' : '0');
	}
};
var _user$project$XisRestApi$workNoteDataNVPs = function (wnd) {
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'author',
			_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _elm_lang$core$Json_Encode$string, wnd.author)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'content',
				_1: _elm_lang$core$Json_Encode$string(wnd.content)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'work',
					_1: _elm_lang$core$Json_Encode$string(wnd.work)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'when_written',
						_1: _elm_lang$core$Json_Encode$string(
							_user$project$PointInTime$isoString(wnd.whenWritten))
					},
					_1: {ctor: '[]'}
				}
			}
		}
	};
};
var _user$project$XisRestApi$workDataNVPs = function (wd) {
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'claim',
			_1: _elm_lang$core$Json_Encode$string(wd.claim)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'witness',
				_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _elm_lang$core$Json_Encode$string, wd.witness)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'work_date',
					_1: _user$project$DjangoRestFramework$encodeCalendarDate(wd.workDate)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'work_duration',
						_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _user$project$DjangoRestFramework$encodeDuration, wd.workDuration)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'work_start_time',
							_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _user$project$DjangoRestFramework$encodeClockTime, wd.workStartTime)
						},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	};
};
var _user$project$XisRestApi$encodeWorkData = function (_p16) {
	return _elm_lang$core$Json_Encode$object(
		_user$project$XisRestApi$workDataNVPs(_p16));
};
var _user$project$XisRestApi$deleteWorkByUrl = F4(
	function (flags, auth, url, tagger) {
		var request = A2(_user$project$DjangoRestFramework$deleteRequest, auth, url);
		return A2(_elm_lang$http$Http$send, tagger, request);
	});
var _user$project$XisRestApi$deleteWorkById = F4(
	function (flags, auth, id, tagger) {
		var url = A2(_user$project$DjangoRestFramework$urlFromId, flags.workListUrl, id);
		return A4(_user$project$XisRestApi$deleteWorkByUrl, flags, auth, url, tagger);
	});
var _user$project$XisRestApi$workListFilterToString = function (filter) {
	var _p17 = filter;
	if (_p17.ctor === 'WorkedClaimEquals') {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'claim=',
			_elm_lang$core$Basics$toString(_p17._0));
	} else {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'work_duration__isnull=',
			_elm_lang$core$String$toLower(
				_elm_lang$core$Basics$toString(_p17._0)));
	}
};
var _user$project$XisRestApi$setWorksDuration = F2(
	function (newSetting, oldWork) {
		var data = oldWork.data;
		var newData = _elm_lang$core$Native_Utils.update(
			data,
			{workDuration: newSetting});
		return _elm_lang$core$Native_Utils.update(
			oldWork,
			{data: newData});
	});
var _user$project$XisRestApi$setWorksWitness = F2(
	function (newSetting, oldWork) {
		var data = oldWork.data;
		var newData = _elm_lang$core$Native_Utils.update(
			data,
			{witness: newSetting});
		return _elm_lang$core$Native_Utils.update(
			oldWork,
			{data: newData});
	});
var _user$project$XisRestApi$encodeClaimStatus = function (status) {
	var _p18 = status;
	switch (_p18.ctor) {
		case 'AbandonedClaimStatus':
			return _elm_lang$core$Json_Encode$string('A');
		case 'CurrentClaimStatus':
			return _elm_lang$core$Json_Encode$string('C');
		case 'DoneClaimStatus':
			return _elm_lang$core$Json_Encode$string('D');
		case 'ExpiredClaimStatus':
			return _elm_lang$core$Json_Encode$string('X');
		case 'QueuedClaimStatus':
			return _elm_lang$core$Json_Encode$string('Q');
		case 'UninterestedClaimStatus':
			return _elm_lang$core$Json_Encode$string('U');
		default:
			return _elm_lang$core$Json_Encode$string('W');
	}
};
var _user$project$XisRestApi$claimDataNVPs = function (cd) {
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'claiming_member',
			_1: _elm_lang$core$Json_Encode$string(cd.claimingMember)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'claimed_task',
				_1: _elm_lang$core$Json_Encode$string(cd.claimedTask)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'claimed_start_time',
					_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _user$project$DjangoRestFramework$encodeClockTime, cd.claimedStartTime)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'claimed_duration',
						_1: _user$project$DjangoRestFramework$encodeDuration(cd.claimedDuration)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'status',
							_1: _user$project$XisRestApi$encodeClaimStatus(cd.status)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'date_verified',
								_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _user$project$DjangoRestFramework$encodeCalendarDate, cd.dateVerified)
							},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	};
};
var _user$project$XisRestApi$encodeClaim = _user$project$DjangoRestFramework$encodeResource(_user$project$XisRestApi$claimDataNVPs);
var _user$project$XisRestApi$encodeClaimData = function (_p19) {
	return _elm_lang$core$Json_Encode$object(
		_user$project$XisRestApi$claimDataNVPs(_p19));
};
var _user$project$XisRestApi$setClaimsStatus = F2(
	function (newSetting, oldClaim) {
		var data = oldClaim.data;
		var newData = _elm_lang$core$Native_Utils.update(
			data,
			{status: newSetting});
		return _elm_lang$core$Native_Utils.update(
			oldClaim,
			{data: newData});
	});
var _user$project$XisRestApi$setClaimsDateVerified = F2(
	function (newSetting, oldClaim) {
		var data = oldClaim.data;
		var newData = _elm_lang$core$Native_Utils.update(
			data,
			{dateVerified: newSetting});
		return _elm_lang$core$Native_Utils.update(
			oldClaim,
			{data: newData});
	});
var _user$project$XisRestApi$claimStatusValue = function (status) {
	var _p20 = status;
	switch (_p20.ctor) {
		case 'AbandonedClaimStatus':
			return 'A';
		case 'CurrentClaimStatus':
			return 'C';
		case 'DoneClaimStatus':
			return 'D';
		case 'ExpiredClaimStatus':
			return 'X';
		case 'QueuedClaimStatus':
			return 'Q';
		case 'UninterestedClaimStatus':
			return 'U';
		default:
			return 'W';
	}
};
var _user$project$XisRestApi$claimListFilterToString = function (filter) {
	var _p21 = filter;
	switch (_p21.ctor) {
		case 'ClaimStatusEquals':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'status=',
				_user$project$XisRestApi$claimStatusValue(_p21._0));
		case 'ClaimingMemberEquals':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'claiming_member=',
				_elm_lang$core$Basics$toString(_p21._0));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'claimed_task=',
				_elm_lang$core$Basics$toString(_p21._0));
	}
};
var _user$project$XisRestApi$membersWithStatusOnTask = F2(
	function (status, task) {
		var hasStatus = function (claim) {
			return _elm_lang$core$Native_Utils.eq(claim.data.status, status);
		};
		var claimsWithStatus = A2(_elm_lang$core$List$filter, hasStatus, task.data.claimSet);
		return A2(
			_elm_lang$core$List$map,
			function (_p22) {
				return function (_) {
					return _.claimingMember;
				}(
					function (_) {
						return _.data;
					}(_p22));
			},
			claimsWithStatus);
	});
var _user$project$XisRestApi$membersClaimOnTask = F3(
	function (flags, memberNum, task) {
		var memberUrl = A2(_user$project$DjangoRestFramework$urlFromId, flags.memberListUrl, memberNum);
		var isMembersClaim = function (c) {
			return _elm_lang$core$Native_Utils.eq(c.data.claimingMember, memberUrl);
		};
		return A2(_elm_community$list_extra$List_Extra$find, isMembersClaim, task.data.claimSet);
	});
var _user$project$XisRestApi$membersStatusOnTask = F3(
	function (flags, memberNum, task) {
		var membersClaim = A3(_user$project$XisRestApi$membersClaimOnTask, flags, memberNum, task);
		return A2(
			_elm_lang$core$Maybe$map,
			function (_p23) {
				return function (_) {
					return _.status;
				}(
					function (_) {
						return _.data;
					}(_p23));
			},
			membersClaim);
	});
var _user$project$XisRestApi$memberHasStatusOnTask = F4(
	function (flags, memberNum, questionedStatus, task) {
		var actualStatus = A3(_user$project$XisRestApi$membersStatusOnTask, flags, memberNum, task);
		var _p24 = actualStatus;
		if (_p24.ctor === 'Nothing') {
			return false;
		} else {
			return _elm_lang$core$Native_Utils.eq(_p24._0, questionedStatus);
		}
	});
var _user$project$XisRestApi$taskListFilterToString = function (filter) {
	var _p25 = filter;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'scheduled_date=',
		_user$project$CalendarDate$toString(_p25._0));
};
var _user$project$XisRestApi$XisRestFlags = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {authenticateUrl: a, claimListUrl: b, discoveryMethodListUrl: c, emailMembershipInfoUrl: d, logMessageUrl: e, memberListUrl: f, membershipListUrl: g, taskListUrl: h, timeBlocksUrl: i, timeBlockTypesUrl: j, visitEventListUrl: k, workListUrl: l, workNoteListUrl: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$XisRestApi$Session = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return function (v) {
																						return function (w) {
																							return function (x) {
																								return function (y) {
																									return function (z) {
																										return function (_1) {
																											return function (_2) {
																												return function (_3) {
																													return function (_4) {
																														return function (_5) {
																															return function (_6) {
																																return function (_7) {
																																	return function (_8) {
																																		return function (_9) {
																																			return function (_10) {
																																				return function (_11) {
																																					return function (_12) {
																																						return function (_13) {
																																							return function (_14) {
																																								return function (_15) {
																																									return function (_16) {
																																										return {getMembershipById: a, getTaskById: b, getTaskFromUrl: c, getWorkFromUrl: d, createClaim: e, createVisitEvent: f, createWork: g, createWorkNote: h, deleteWorkById: i, deleteWorkByUrl: j, listClaims: k, listDiscoveryMethods: l, listMembers: m, listMemberships: n, listTasks: o, listTimeBlocks: p, listTimeBlockTypes: q, listVisitEvents: r, listWorks: s, moreVisitEvents: t, replaceClaim: u, replaceWork: v, claimUrl: w, memberUrl: x, taskUrl: y, visitEventUrl: z, workUrl: _1, workNoteUrl: _2, authenticate: _3, blockHasType: _4, coverTime: _5, defaultBlockType: _6, emailMembershipInfo: _7, logMessage: _8, getBlocksTypes: _9, memberCanClaimTask: _10, memberHasStatusOnTask: _11, membersClaimOnTask: _12, membersStatusOnTask: _13, membersWithStatusOnTask: _14, mostRecentMembership: _15, pitInBlock: _16};
																																									};
																																								};
																																							};
																																						};
																																					};
																																				};
																																			};
																																		};
																																	};
																																};
																															};
																														};
																													};
																												};
																											};
																										};
																									};
																								};
																							};
																						};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$XisRestApi$TaskData = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return {anybodyIsEligible: a, claimSet: b, creationDate: c, deadline: d, eligibleClaimants: e, instructions: f, isFullyClaimed: g, maxWork: h, maxWorkers: i, nameOfLikelyWorker: j, owner: k, priority: l, reviewer: m, scheduledDate: n, shortDesc: o, shouldNag: p, staffingStatus: q, status: r, workDuration: s, workStartTime: t};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$XisRestApi$ClaimData = F7(
	function (a, b, c, d, e, f, g) {
		return {claimedDuration: a, claimedStartTime: b, claimedTask: c, claimingMember: d, dateVerified: e, status: f, workSet: g};
	});
var _user$project$XisRestApi$WorkData = F5(
	function (a, b, c, d, e) {
		return {claim: a, witness: b, workDate: c, workDuration: d, workStartTime: e};
	});
var _user$project$XisRestApi$decodeWorkData = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'work_start_time',
	_elm_lang$core$Json_Decode$maybe(_user$project$DjangoRestFramework$decodeClockTime),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'work_duration',
		_elm_lang$core$Json_Decode$maybe(_user$project$DjangoRestFramework$decodeDuration),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'work_date',
			_user$project$DjangoRestFramework$decodeCalendarDate,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'witness',
				_elm_lang$core$Json_Decode$maybe(_user$project$DjangoRestFramework$decodeResourceUrl),
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'claim',
					_user$project$DjangoRestFramework$decodeResourceUrl,
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$XisRestApi$WorkData))))));
var _user$project$XisRestApi$decodeWork = _user$project$DjangoRestFramework$decodeResource(_user$project$XisRestApi$decodeWorkData);
var _user$project$XisRestApi$listWorks = F4(
	function (flags, auth, filters, resultToMsg) {
		var request = A3(
			_user$project$DjangoRestFramework$getRequest,
			auth,
			A3(_user$project$XisRestApi$filteredListUrl, flags.workListUrl, filters, _user$project$XisRestApi$workListFilterToString),
			_user$project$DjangoRestFramework$decodePageOf(_user$project$XisRestApi$decodeWork));
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$getWorkFromUrl = F4(
	function (flags, auth, url, resultToMsg) {
		var request = A3(_user$project$DjangoRestFramework$getRequest, auth, url, _user$project$XisRestApi$decodeWork);
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$createWork = F4(
	function (flags, auth, workData, resultToMsg) {
		var request = _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {
					ctor: '::',
					_0: _user$project$DjangoRestFramework$authenticationHeader(auth),
					_1: {ctor: '[]'}
				},
				url: flags.workListUrl,
				body: _elm_lang$http$Http$jsonBody(
					_user$project$XisRestApi$encodeWorkData(workData)),
				expect: _elm_lang$http$Http$expectJson(_user$project$XisRestApi$decodeWork),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$replaceWork = F4(
	function (flags, auth, work, resultToMsg) {
		var request = _elm_lang$http$Http$request(
			{
				method: 'PUT',
				headers: {
					ctor: '::',
					_0: _user$project$DjangoRestFramework$authenticationHeader(auth),
					_1: {ctor: '[]'}
				},
				url: A2(_user$project$DjangoRestFramework$urlFromId, flags.workListUrl, work.id),
				body: _elm_lang$http$Http$jsonBody(
					_user$project$XisRestApi$encodeWorkData(work.data)),
				expect: _elm_lang$http$Http$expectJson(_user$project$XisRestApi$decodeWork),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$WorkerData = F5(
	function (a, b, c, d, e) {
		return {member: a, shouldIncludeAlarms: b, shouldNag: c, shouldSendStatements: d, timeAcctBalance: e};
	});
var _user$project$XisRestApi$decodeWorkerData = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'time_acct_balance',
	_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$int),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'should_report_work_mtd',
		_elm_lang$core$Json_Decode$bool,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'should_nag',
			_elm_lang$core$Json_Decode$bool,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'should_include_alarms',
				_elm_lang$core$Json_Decode$bool,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'member',
					_user$project$DjangoRestFramework$decodeResourceUrl,
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$XisRestApi$WorkerData))))));
var _user$project$XisRestApi$decodeWorker = _user$project$DjangoRestFramework$decodeResource(_user$project$XisRestApi$decodeWorkerData);
var _user$project$XisRestApi$WorkNoteData = F4(
	function (a, b, c, d) {
		return {author: a, content: b, work: c, whenWritten: d};
	});
var _user$project$XisRestApi$decodeWorkNoteData = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'when_written',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (_p26) {
			return _elm_community$json_extra$Json_Decode_Extra$fromResult(
				_user$project$PointInTime$fromString(_p26));
		},
		_elm_lang$core$Json_Decode$string),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'work',
		_user$project$DjangoRestFramework$decodeResourceUrl,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'content',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'author',
				_elm_lang$core$Json_Decode$maybe(_user$project$DjangoRestFramework$decodeResourceUrl),
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$XisRestApi$WorkNoteData)))));
var _user$project$XisRestApi$decodeWorkNote = _user$project$DjangoRestFramework$decodeResource(_user$project$XisRestApi$decodeWorkNoteData);
var _user$project$XisRestApi$createWorkNote = F4(
	function (flags, auth, workNoteData, resultToMsg) {
		var request = _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {
					ctor: '::',
					_0: _user$project$DjangoRestFramework$authenticationHeader(auth),
					_1: {ctor: '[]'}
				},
				url: flags.workNoteListUrl,
				body: _elm_lang$http$Http$jsonBody(
					_elm_lang$core$Json_Encode$object(
						_user$project$XisRestApi$workNoteDataNVPs(workNoteData))),
				expect: _elm_lang$http$Http$expectJson(_user$project$XisRestApi$decodeWorkNote),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$MemberData = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {email: a, firstName: b, friendlyName: c, isActive: d, isCurrentlyPaid: e, lastName: f, latestNonfutureMembership: g, userName: h, worker: i};
	});
var _user$project$XisRestApi$TimeBlockTypeData = F3(
	function (a, b, c) {
		return {name: a, description: b, isDefault: c};
	});
var _user$project$XisRestApi$decodeTimeBlockTypeData = A4(
	_elm_lang$core$Json_Decode$map3,
	_user$project$XisRestApi$TimeBlockTypeData,
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'description', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'is_default', _elm_lang$core$Json_Decode$bool));
var _user$project$XisRestApi$decodeTimeBlockType = _user$project$DjangoRestFramework$decodeResource(_user$project$XisRestApi$decodeTimeBlockTypeData);
var _user$project$XisRestApi$listTimeBlockTypes = F3(
	function (model, auth, resultToMsg) {
		var request = A2(
			_elm_lang$http$Http$get,
			model.timeBlockTypesUrl,
			_user$project$DjangoRestFramework$decodePageOf(_user$project$XisRestApi$decodeTimeBlockType));
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$TimeBlockData = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return {startTime: a, duration: b, first: c, second: d, third: e, fourth: f, last: g, every: h, monday: i, tuesday: j, wednesday: k, thursday: l, friday: m, saturday: n, sunday: o, types: p};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$XisRestApi$decodeTimeBlockData = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'types',
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'sunday',
		_elm_lang$core$Json_Decode$bool,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'saturday',
			_elm_lang$core$Json_Decode$bool,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'friday',
				_elm_lang$core$Json_Decode$bool,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'thursday',
					_elm_lang$core$Json_Decode$bool,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'wednesday',
						_elm_lang$core$Json_Decode$bool,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'tuesday',
							_elm_lang$core$Json_Decode$bool,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'monday',
								_elm_lang$core$Json_Decode$bool,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'every',
									_elm_lang$core$Json_Decode$bool,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'last',
										_elm_lang$core$Json_Decode$bool,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'fourth',
											_elm_lang$core$Json_Decode$bool,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'third',
												_elm_lang$core$Json_Decode$bool,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'second',
													_elm_lang$core$Json_Decode$bool,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'first',
														_elm_lang$core$Json_Decode$bool,
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'duration',
															_user$project$DjangoRestFramework$decodeDuration,
															A3(
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																'start_time',
																_user$project$DjangoRestFramework$decodeClockTime,
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$XisRestApi$TimeBlockData)))))))))))))))));
var _user$project$XisRestApi$decodeTimeBlock = _user$project$DjangoRestFramework$decodeResource(_user$project$XisRestApi$decodeTimeBlockData);
var _user$project$XisRestApi$listTimeBlocks = F3(
	function (flags, auth, resultToMsg) {
		var request = A2(
			_elm_lang$http$Http$get,
			flags.timeBlocksUrl,
			_user$project$DjangoRestFramework$decodePageOf(_user$project$XisRestApi$decodeTimeBlock));
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$MembershipData = F7(
	function (a, b, c, d, e, f, g) {
		return {member: a, startDate: b, endDate: c, sale: d, sale_price: e, ctrlid: f, $protected: g};
	});
var _user$project$XisRestApi$decodeMembershipData = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'protected',
	_elm_lang$core$Json_Decode$bool,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'ctrlid',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'sale_price',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'sale',
				_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$int),
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'end_date',
					_user$project$DjangoRestFramework$decodeCalendarDate,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'start_date',
						_user$project$DjangoRestFramework$decodeCalendarDate,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'member',
							_elm_lang$core$Json_Decode$string,
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$XisRestApi$MembershipData))))))));
var _user$project$XisRestApi$decodeMembership = _user$project$DjangoRestFramework$decodeResource(_user$project$XisRestApi$decodeMembershipData);
var _user$project$XisRestApi$decodeMemberData = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'worker',
	_user$project$XisRestApi$decodeWorker,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'username',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'latest_nonfuture_membership',
			_elm_lang$core$Json_Decode$maybe(_user$project$XisRestApi$decodeMembership),
			A4(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
				'last_name',
				_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
				_elm_lang$core$Maybe$Nothing,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'is_currently_paid',
					_elm_lang$core$Json_Decode$bool,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'is_active',
						_elm_lang$core$Json_Decode$bool,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'friendly_name',
							_elm_lang$core$Json_Decode$string,
							A4(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
								'first_name',
								_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
								_elm_lang$core$Maybe$Nothing,
								A4(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
									'email',
									_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
									_elm_lang$core$Maybe$Nothing,
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$XisRestApi$MemberData))))))))));
var _user$project$XisRestApi$decodeMember = _user$project$DjangoRestFramework$decodeResource(_user$project$XisRestApi$decodeMemberData);
var _user$project$XisRestApi$listMembers = F4(
	function (flags, auth, filters, resultToMsg) {
		var request = A3(
			_user$project$DjangoRestFramework$getRequest,
			auth,
			A3(_user$project$XisRestApi$filteredListUrl, flags.memberListUrl, filters, _user$project$XisRestApi$memberListFilterToString),
			_user$project$DjangoRestFramework$decodePageOf(_user$project$XisRestApi$decodeMember));
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$listMemberships = F4(
	function (flags, auth, filters, resultToMsg) {
		var request = A3(
			_user$project$DjangoRestFramework$getRequest,
			auth,
			A3(_user$project$XisRestApi$filteredListUrl, flags.membershipListUrl, filters, _user$project$XisRestApi$membershipListFilterToString),
			_user$project$DjangoRestFramework$decodePageOf(_user$project$XisRestApi$decodeMembership));
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$getMembershipFromUrl = F4(
	function (flags, auth, url, resultToMsg) {
		var request = A3(_user$project$DjangoRestFramework$getRequest, auth, url, _user$project$XisRestApi$decodeMembership);
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$getMembershipById = F4(
	function (flags, auth, memberNum, resultToMsg) {
		var url = A2(_user$project$DjangoRestFramework$urlFromId, flags.memberListUrl, memberNum);
		return A4(_user$project$XisRestApi$getMembershipFromUrl, flags, auth, url, resultToMsg);
	});
var _user$project$XisRestApi$DiscoveryMethodData = F3(
	function (a, b, c) {
		return {name: a, order: b, visible: c};
	});
var _user$project$XisRestApi$decodeDiscoveryMethodData = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'visible',
	_elm_lang$core$Json_Decode$bool,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'order',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'name',
			_elm_lang$core$Json_Decode$string,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$XisRestApi$DiscoveryMethodData))));
var _user$project$XisRestApi$decodeDiscoveryMethod = _user$project$DjangoRestFramework$decodeResource(_user$project$XisRestApi$decodeDiscoveryMethodData);
var _user$project$XisRestApi$listDiscoveryMethods = F3(
	function (flags, auth, resultToMsg) {
		var request = A2(
			_elm_lang$http$Http$get,
			flags.discoveryMethodListUrl,
			_user$project$DjangoRestFramework$decodePageOf(_user$project$XisRestApi$decodeDiscoveryMethod));
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$VisitEventDataIn = F5(
	function (a, b, c, d, e) {
		return {who: a, when: b, eventType: c, reason: d, method: e};
	});
var _user$project$XisRestApi$VisitEventDataOut = F5(
	function (a, b, c, d, e) {
		return {who: a, when: b, eventType: c, reason: d, method: e};
	});
var _user$project$XisRestApi$AuthenticationResult = F2(
	function (a, b) {
		return {isAuthentic: a, authenticatedMember: b};
	});
var _user$project$XisRestApi$decodeAuthenticationResult = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'authenticated_member',
	_elm_lang$core$Json_Decode$maybe(_user$project$XisRestApi$decodeMember),
	_elm_lang$core$Maybe$Nothing,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'is_authentic',
		_elm_lang$core$Json_Decode$bool,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$XisRestApi$AuthenticationResult)));
var _user$project$XisRestApi$authenticate = F5(
	function (flags, auth, userName, password, tagger) {
		var request = A4(
			_user$project$DjangoRestFramework$postRequest,
			auth,
			flags.authenticateUrl,
			_user$project$XisRestApi$decodeAuthenticationResult,
			A2(_user$project$XisRestApi$encodeAuthenticateRequestData, userName, password));
		return A2(_elm_lang$http$Http$send, tagger, request);
	});
var _user$project$XisRestApi$LowPriority = {ctor: 'LowPriority'};
var _user$project$XisRestApi$MediumPriority = {ctor: 'MediumPriority'};
var _user$project$XisRestApi$HighPriority = {ctor: 'HighPriority'};
var _user$project$XisRestApi$taskPriorityDecoder = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (str) {
		var _p27 = str;
		switch (_p27) {
			case 'H':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$HighPriority);
			case 'M':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$MediumPriority);
			case 'L':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$LowPriority);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Unknown priority: ', _p27));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$XisRestApi$SS_Done = {ctor: 'SS_Done'};
var _user$project$XisRestApi$SS_Provisional = {ctor: 'SS_Provisional'};
var _user$project$XisRestApi$SS_Unstaffed = {ctor: 'SS_Unstaffed'};
var _user$project$XisRestApi$SS_Staffed = {ctor: 'SS_Staffed'};
var _user$project$XisRestApi$staffingStatusDecoder = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (str) {
		var _p28 = str;
		switch (_p28) {
			case 'S':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$SS_Staffed);
			case 'U':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$SS_Unstaffed);
			case 'P':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$SS_Provisional);
			case 'D':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$SS_Done);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Unknown staffing status: ', _p28));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$XisRestApi$ScheduledDateEquals = function (a) {
	return {ctor: 'ScheduledDateEquals', _0: a};
};
var _user$project$XisRestApi$WorkingClaimStatus = {ctor: 'WorkingClaimStatus'};
var _user$project$XisRestApi$UninterestedClaimStatus = {ctor: 'UninterestedClaimStatus'};
var _user$project$XisRestApi$QueuedClaimStatus = {ctor: 'QueuedClaimStatus'};
var _user$project$XisRestApi$ExpiredClaimStatus = {ctor: 'ExpiredClaimStatus'};
var _user$project$XisRestApi$DoneClaimStatus = {ctor: 'DoneClaimStatus'};
var _user$project$XisRestApi$CurrentClaimStatus = {ctor: 'CurrentClaimStatus'};
var _user$project$XisRestApi$AbandonedClaimStatus = {ctor: 'AbandonedClaimStatus'};
var _user$project$XisRestApi$memberCanClaimTask = F3(
	function (flags, memberNum, task) {
		var abandonedClaim = A4(_user$project$XisRestApi$memberHasStatusOnTask, flags, memberNum, _user$project$XisRestApi$AbandonedClaimStatus, task);
		var alreadyClaimed = A4(_user$project$XisRestApi$memberHasStatusOnTask, flags, memberNum, _user$project$XisRestApi$CurrentClaimStatus, task);
		var url = A2(_user$project$DjangoRestFramework$urlFromId, flags.memberListUrl, memberNum);
		var memberIsEligible = A2(_elm_lang$core$List$member, url, task.data.eligibleClaimants);
		var canClaim = memberIsEligible && (!task.data.isFullyClaimed);
		return canClaim || (alreadyClaimed || (abandonedClaim || task.data.anybodyIsEligible));
	});
var _user$project$XisRestApi$decodeClaimStatus = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (str) {
		var _p29 = str;
		switch (_p29) {
			case 'A':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$AbandonedClaimStatus);
			case 'C':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$CurrentClaimStatus);
			case 'D':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$DoneClaimStatus);
			case 'X':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$ExpiredClaimStatus);
			case 'Q':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$QueuedClaimStatus);
			case 'U':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$UninterestedClaimStatus);
			case 'W':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$WorkingClaimStatus);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Unknown claim status: ', _p29));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$XisRestApi$decodeClaimData = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'work_set',
	_elm_lang$core$Json_Decode$list(_user$project$DjangoRestFramework$decodeResourceUrl),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'status',
		_user$project$XisRestApi$decodeClaimStatus,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'date_verified',
			_elm_lang$core$Json_Decode$maybe(_user$project$DjangoRestFramework$decodeCalendarDate),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'claiming_member',
				_user$project$DjangoRestFramework$decodeResourceUrl,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'claimed_task',
					_user$project$DjangoRestFramework$decodeResourceUrl,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'claimed_start_time',
						_elm_lang$core$Json_Decode$maybe(_user$project$DjangoRestFramework$decodeClockTime),
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'claimed_duration',
							_user$project$DjangoRestFramework$decodeDuration,
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$XisRestApi$ClaimData))))))));
var _user$project$XisRestApi$decodeClaim = _user$project$DjangoRestFramework$decodeResource(_user$project$XisRestApi$decodeClaimData);
var _user$project$XisRestApi$decodeTaskData = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'work_start_time',
	_elm_lang$core$Json_Decode$maybe(_user$project$DjangoRestFramework$decodeClockTime),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'work_duration',
		_elm_lang$core$Json_Decode$maybe(_user$project$DjangoRestFramework$decodeDuration),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'status',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'staffing_status',
				_user$project$XisRestApi$staffingStatusDecoder,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'should_nag',
					_elm_lang$core$Json_Decode$bool,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'short_desc',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'scheduled_date',
							_user$project$DjangoRestFramework$decodeCalendarDate,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'reviewer',
								_elm_lang$core$Json_Decode$maybe(_user$project$DjangoRestFramework$decodeResourceUrl),
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'priority',
									_user$project$XisRestApi$taskPriorityDecoder,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'owner',
										_elm_lang$core$Json_Decode$maybe(_user$project$DjangoRestFramework$decodeResourceUrl),
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'name_of_likely_worker',
											_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'max_workers',
												_elm_lang$core$Json_Decode$int,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'max_work',
													_user$project$DjangoRestFramework$decodeDuration,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'is_fully_claimed',
														_elm_lang$core$Json_Decode$bool,
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'instructions',
															_elm_lang$core$Json_Decode$string,
															A3(
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																'eligible_claimants',
																_elm_lang$core$Json_Decode$list(_user$project$DjangoRestFramework$decodeResourceUrl),
																A3(
																	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																	'deadline',
																	_elm_lang$core$Json_Decode$maybe(_user$project$DjangoRestFramework$decodeCalendarDate),
																	A3(
																		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																		'creation_date',
																		_user$project$DjangoRestFramework$decodeCalendarDate,
																		A3(
																			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																			'claim_set',
																			_elm_lang$core$Json_Decode$list(_user$project$XisRestApi$decodeClaim),
																			A3(
																				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																				'anybody_is_eligible',
																				_elm_lang$core$Json_Decode$bool,
																				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$XisRestApi$TaskData)))))))))))))))))))));
var _user$project$XisRestApi$decodeTask = _user$project$DjangoRestFramework$decodeResource(_user$project$XisRestApi$decodeTaskData);
var _user$project$XisRestApi$listTasks = F4(
	function (flags, auth, filters, resultToMsg) {
		var request = A3(
			_user$project$DjangoRestFramework$getRequest,
			auth,
			A3(_user$project$XisRestApi$filteredListUrl, flags.taskListUrl, filters, _user$project$XisRestApi$taskListFilterToString),
			_user$project$DjangoRestFramework$decodePageOf(_user$project$XisRestApi$decodeTask));
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$getTaskFromUrl = F4(
	function (flags, auth, url, resultToMsg) {
		var request = A3(_user$project$DjangoRestFramework$getRequest, auth, url, _user$project$XisRestApi$decodeTask);
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$getTaskById = F4(
	function (flags, auth, taskNum, resultToMsg) {
		var url = A2(_user$project$DjangoRestFramework$urlFromId, flags.taskListUrl, taskNum);
		return A4(_user$project$XisRestApi$getTaskFromUrl, flags, auth, url, resultToMsg);
	});
var _user$project$XisRestApi$listClaims = F4(
	function (flags, auth, filters, resultToMsg) {
		var request = A3(
			_user$project$DjangoRestFramework$getRequest,
			auth,
			A3(_user$project$XisRestApi$filteredListUrl, flags.claimListUrl, filters, _user$project$XisRestApi$claimListFilterToString),
			_user$project$DjangoRestFramework$decodePageOf(_user$project$XisRestApi$decodeClaim));
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$replaceClaim = F4(
	function (flags, auth, claim, resultToMsg) {
		var request = _elm_lang$http$Http$request(
			{
				method: 'PUT',
				headers: {
					ctor: '::',
					_0: _user$project$DjangoRestFramework$authenticationHeader(auth),
					_1: {ctor: '[]'}
				},
				url: A2(_user$project$DjangoRestFramework$urlFromId, flags.claimListUrl, claim.id),
				body: _elm_lang$http$Http$jsonBody(
					_user$project$XisRestApi$encodeClaimData(claim.data)),
				expect: _elm_lang$http$Http$expectJson(_user$project$XisRestApi$decodeClaim),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$createClaim = F4(
	function (flags, auth, claimData, resultToMsg) {
		var request = _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {
					ctor: '::',
					_0: _user$project$DjangoRestFramework$authenticationHeader(auth),
					_1: {ctor: '[]'}
				},
				url: flags.claimListUrl,
				body: _elm_lang$http$Http$jsonBody(
					_user$project$XisRestApi$encodeClaimData(claimData)),
				expect: _elm_lang$http$Http$expectJson(_user$project$XisRestApi$decodeClaim),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$ClaimedTaskEquals = function (a) {
	return {ctor: 'ClaimedTaskEquals', _0: a};
};
var _user$project$XisRestApi$ClaimingMemberEquals = function (a) {
	return {ctor: 'ClaimingMemberEquals', _0: a};
};
var _user$project$XisRestApi$ClaimStatusEquals = function (a) {
	return {ctor: 'ClaimStatusEquals', _0: a};
};
var _user$project$XisRestApi$WorkDurationIsNull = function (a) {
	return {ctor: 'WorkDurationIsNull', _0: a};
};
var _user$project$XisRestApi$WorkedClaimEquals = function (a) {
	return {ctor: 'WorkedClaimEquals', _0: a};
};
var _user$project$XisRestApi$IsActive = function (a) {
	return {ctor: 'IsActive', _0: a};
};
var _user$project$XisRestApi$LastNameEquals = function (a) {
	return {ctor: 'LastNameEquals', _0: a};
};
var _user$project$XisRestApi$LastNameStartsWith = function (a) {
	return {ctor: 'LastNameStartsWith', _0: a};
};
var _user$project$XisRestApi$UsernameStartsWith = function (a) {
	return {ctor: 'UsernameStartsWith', _0: a};
};
var _user$project$XisRestApi$UsernameContains = function (a) {
	return {ctor: 'UsernameContains', _0: a};
};
var _user$project$XisRestApi$UsernameEquals = function (a) {
	return {ctor: 'UsernameEquals', _0: a};
};
var _user$project$XisRestApi$EmailEquals = function (a) {
	return {ctor: 'EmailEquals', _0: a};
};
var _user$project$XisRestApi$RfidNumberEquals = function (a) {
	return {ctor: 'RfidNumberEquals', _0: a};
};
var _user$project$XisRestApi$MembershipsWithMemberIdEqualTo = function (a) {
	return {ctor: 'MembershipsWithMemberIdEqualTo', _0: a};
};
var _user$project$XisRestApi$VEM_Unknown = {ctor: 'VEM_Unknown'};
var _user$project$XisRestApi$VEM_MobileApp = {ctor: 'VEM_MobileApp'};
var _user$project$XisRestApi$VEM_FrontDesk = {ctor: 'VEM_FrontDesk'};
var _user$project$XisRestApi$VEM_Rfid = {ctor: 'VEM_Rfid'};
var _user$project$XisRestApi$decodeVisitEventMethod = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (str) {
		var _p30 = str;
		switch (_p30) {
			case 'F':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VEM_FrontDesk);
			case 'R':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VEM_Rfid);
			case 'M':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VEM_MobileApp);
			case 'U':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VEM_Unknown);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Unknown visit event type: ', _p30));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$XisRestApi$VER_Volunteer = {ctor: 'VER_Volunteer'};
var _user$project$XisRestApi$VER_PublicAccess = {ctor: 'VER_PublicAccess'};
var _user$project$XisRestApi$VER_Other = {ctor: 'VER_Other'};
var _user$project$XisRestApi$VER_Member = {ctor: 'VER_Member'};
var _user$project$XisRestApi$VER_Guest = {ctor: 'VER_Guest'};
var _user$project$XisRestApi$VER_Curious = {ctor: 'VER_Curious'};
var _user$project$XisRestApi$VER_Club = {ctor: 'VER_Club'};
var _user$project$XisRestApi$VER_Class = {ctor: 'VER_Class'};
var _user$project$XisRestApi$decodeVisitEventReason = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (str) {
		var _p31 = str;
		switch (_p31) {
			case 'CLS':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VER_Class);
			case 'CLB':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VER_Club);
			case 'CUR':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VER_Curious);
			case 'GST':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VER_Guest);
			case 'MEM':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VER_Member);
			case 'OTH':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VER_Other);
			case 'PUB':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VER_PublicAccess);
			case 'VOL':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VER_Volunteer);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Unknown visit event type: ', _p31));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$XisRestApi$VET_Departure = {ctor: 'VET_Departure'};
var _user$project$XisRestApi$VET_Present = {ctor: 'VET_Present'};
var _user$project$XisRestApi$VET_Arrival = {ctor: 'VET_Arrival'};
var _user$project$XisRestApi$decodeVisitEventType = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (str) {
		var _p32 = str;
		switch (_p32) {
			case 'A':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VET_Arrival);
			case 'P':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VET_Present);
			case 'D':
				return _elm_lang$core$Json_Decode$succeed(_user$project$XisRestApi$VET_Departure);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Unknown visit event type: ', _p32));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$XisRestApi$decodeVisitEventDataIn = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'method',
	_user$project$XisRestApi$decodeVisitEventMethod,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'reason',
		_elm_lang$core$Json_Decode$maybe(_user$project$XisRestApi$decodeVisitEventReason),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'event_type',
			_user$project$XisRestApi$decodeVisitEventType,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'when',
				_user$project$DjangoRestFramework$decodePointInTime,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'who_embed',
					_user$project$XisRestApi$decodeMember,
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$XisRestApi$VisitEventDataIn))))));
var _user$project$XisRestApi$decodeVisitEvent = _user$project$DjangoRestFramework$decodeResource(_user$project$XisRestApi$decodeVisitEventDataIn);
var _user$project$XisRestApi$listVisitEvents = F4(
	function (flags, auth, filters, resultToMsg) {
		var request = A3(
			_user$project$DjangoRestFramework$getRequest,
			auth,
			A3(_user$project$XisRestApi$filteredListUrl, flags.visitEventListUrl, filters, _user$project$XisRestApi$visitEventListFilterToString),
			_user$project$DjangoRestFramework$decodePageOf(_user$project$XisRestApi$decodeVisitEvent));
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$moreVisitEvents = F4(
	function (flags, auth, pageUrl, resultToMsg) {
		var request = A3(
			_user$project$DjangoRestFramework$getRequest,
			auth,
			pageUrl,
			_user$project$DjangoRestFramework$decodePageOf(_user$project$XisRestApi$decodeVisitEvent));
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$createVisitEvent = F4(
	function (flags, auth, visitEventData, resultToMsg) {
		var request = _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {
					ctor: '::',
					_0: _user$project$DjangoRestFramework$authenticationHeader(auth),
					_1: {ctor: '[]'}
				},
				url: flags.visitEventListUrl,
				body: _elm_lang$http$Http$jsonBody(
					_elm_lang$core$Json_Encode$object(
						A2(_user$project$XisRestApi$visitEventDataNVPs, flags, visitEventData))),
				expect: _elm_lang$http$Http$expectJson(_user$project$XisRestApi$decodeVisitEvent),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$XisRestApi$createSession = F2(
	function (flags, auth) {
		return {
			getMembershipById: A2(_user$project$XisRestApi$getMembershipById, flags, auth),
			getTaskById: A2(_user$project$XisRestApi$getTaskById, flags, auth),
			getTaskFromUrl: A2(_user$project$XisRestApi$getTaskFromUrl, flags, auth),
			getWorkFromUrl: A2(_user$project$XisRestApi$getWorkFromUrl, flags, auth),
			createClaim: A2(_user$project$XisRestApi$createClaim, flags, auth),
			createVisitEvent: A2(_user$project$XisRestApi$createVisitEvent, flags, auth),
			createWork: A2(_user$project$XisRestApi$createWork, flags, auth),
			createWorkNote: A2(_user$project$XisRestApi$createWorkNote, flags, auth),
			deleteWorkById: A2(_user$project$XisRestApi$deleteWorkById, flags, auth),
			deleteWorkByUrl: A2(_user$project$XisRestApi$deleteWorkByUrl, flags, auth),
			listClaims: A2(_user$project$XisRestApi$listClaims, flags, auth),
			listDiscoveryMethods: A2(_user$project$XisRestApi$listDiscoveryMethods, flags, auth),
			listMembers: A2(_user$project$XisRestApi$listMembers, flags, auth),
			listMemberships: A2(_user$project$XisRestApi$listMemberships, flags, auth),
			listTasks: A2(_user$project$XisRestApi$listTasks, flags, auth),
			listTimeBlocks: A2(_user$project$XisRestApi$listTimeBlocks, flags, auth),
			listTimeBlockTypes: A2(_user$project$XisRestApi$listTimeBlockTypes, flags, auth),
			listVisitEvents: A2(_user$project$XisRestApi$listVisitEvents, flags, auth),
			listWorks: A2(_user$project$XisRestApi$listWorks, flags, auth),
			moreVisitEvents: A2(_user$project$XisRestApi$moreVisitEvents, flags, auth),
			replaceClaim: A2(_user$project$XisRestApi$replaceClaim, flags, auth),
			replaceWork: A2(_user$project$XisRestApi$replaceWork, flags, auth),
			claimUrl: _user$project$DjangoRestFramework$urlFromId(flags.claimListUrl),
			memberUrl: _user$project$DjangoRestFramework$urlFromId(flags.memberListUrl),
			taskUrl: _user$project$DjangoRestFramework$urlFromId(flags.taskListUrl),
			workUrl: _user$project$DjangoRestFramework$urlFromId(flags.workListUrl),
			visitEventUrl: _user$project$DjangoRestFramework$urlFromId(flags.visitEventListUrl),
			workNoteUrl: _user$project$DjangoRestFramework$urlFromId(flags.workNoteListUrl),
			authenticate: A2(_user$project$XisRestApi$authenticate, flags, auth),
			blockHasType: _user$project$XisRestApi$blockHasType,
			coverTime: _user$project$XisRestApi$coverTime,
			defaultBlockType: _user$project$XisRestApi$defaultBlockType,
			emailMembershipInfo: A2(_user$project$XisRestApi$emailMembershipInfo, flags, auth),
			logMessage: A2(_user$project$XisRestApi$logMessage, flags, auth),
			getBlocksTypes: _user$project$XisRestApi$getBlocksTypes,
			memberCanClaimTask: _user$project$XisRestApi$memberCanClaimTask(flags),
			memberHasStatusOnTask: _user$project$XisRestApi$memberHasStatusOnTask(flags),
			membersClaimOnTask: _user$project$XisRestApi$membersClaimOnTask(flags),
			membersStatusOnTask: _user$project$XisRestApi$membersStatusOnTask(flags),
			membersWithStatusOnTask: _user$project$XisRestApi$membersWithStatusOnTask,
			mostRecentMembership: _user$project$XisRestApi$mostRecentMembership,
			pitInBlock: _user$project$XisRestApi$pitInBlock
		};
	});
var _user$project$XisRestApi$VEF_EventMethodEquals = function (a) {
	return {ctor: 'VEF_EventMethodEquals', _0: a};
};
var _user$project$XisRestApi$VEF_EventTypeEquals = function (a) {
	return {ctor: 'VEF_EventTypeEquals', _0: a};
};
var _user$project$XisRestApi$VEF_WhenGreaterOrEquals = function (a) {
	return {ctor: 'VEF_WhenGreaterOrEquals', _0: a};
};
var _user$project$XisRestApi$LL_Critical = {ctor: 'LL_Critical'};
var _user$project$XisRestApi$LL_Error = {ctor: 'LL_Error'};
var _user$project$XisRestApi$LL_Warning = {ctor: 'LL_Warning'};
var _user$project$XisRestApi$LL_Info = {ctor: 'LL_Info'};
var _user$project$XisRestApi$LL_Debug = {ctor: 'LL_Debug'};

var _user$project$MembersApi$addDiscoveryMethods = F5(
	function (flags, username, userpw, methodPks, resultToMsg) {
		var oneCmd = function (req) {
			return A2(_elm_lang$http$Http$send, resultToMsg, req);
		};
		var request = function (bo) {
			return _elm_lang$http$Http$request(
				{
					method: 'POST',
					url: flags.addDiscoveryMethodUrl,
					headers: {
						ctor: '::',
						_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', flags.csrfToken),
						_1: {ctor: '[]'}
					},
					withCredentials: false,
					body: _elm_lang$http$Http$jsonBody(
						_elm_lang$core$Json_Encode$object(bo)),
					timeout: _elm_lang$core$Maybe$Nothing,
					expect: _elm_lang$http$Http$expectString
				});
		};
		var bodyObject = function (pk) {
			return {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'username',
					_1: _elm_lang$core$Json_Encode$string(username)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'userpw',
						_1: _elm_lang$core$Json_Encode$string(userpw)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'methodpk',
							_1: _elm_lang$core$Json_Encode$int(pk)
						},
						_1: {ctor: '[]'}
					}
				}
			};
		};
		return _elm_lang$core$Platform_Cmd$batch(
			A2(
				_elm_lang$core$List$map,
				function (_p0) {
					return oneCmd(
						request(
							bodyObject(_p0)));
				},
				methodPks));
	});
var _user$project$MembersApi$setIsAdult = F5(
	function (flags, username, userpw, newValue, resultToMsg) {
		var bodyObject = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'username',
				_1: _elm_lang$core$Json_Encode$string(username)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'userpw',
					_1: _elm_lang$core$Json_Encode$string(userpw)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'isadult',
						_1: _elm_lang$core$Json_Encode$bool(newValue)
					},
					_1: {ctor: '[]'}
				}
			}
		};
		var request = _elm_lang$http$Http$request(
			{
				method: 'POST',
				url: flags.setIsAdultUrl,
				headers: {
					ctor: '::',
					_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', flags.csrfToken),
					_1: {ctor: '[]'}
				},
				withCredentials: false,
				body: _elm_lang$http$Http$jsonBody(
					_elm_lang$core$Json_Encode$object(bodyObject)),
				timeout: _elm_lang$core$Maybe$Nothing,
				expect: _elm_lang$http$Http$expectString
			});
		return A2(_elm_lang$http$Http$send, resultToMsg, request);
	});
var _user$project$MembersApi_ops = _user$project$MembersApi_ops || {};
_user$project$MembersApi_ops['=>'] = F2(
	function (key, value) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			key,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'=',
				_elm_lang$http$Http$encodeUri(value)));
	});
var _user$project$MembersApi$createNewAcct = F8(
	function (flags, fullName, userName, email, password, signature, isAdult, tagger) {
		var kvStrs = {
			ctor: '::',
			_0: A2(_user$project$MembersApi_ops['=>'], 'action', 'CheckInFirstTime'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$MembersApi_ops['=>'], 'UserInfo-Name', fullName),
				_1: {
					ctor: '::',
					_0: A2(_user$project$MembersApi_ops['=>'], 'UserInfo-Username', userName),
					_1: {
						ctor: '::',
						_0: A2(_user$project$MembersApi_ops['=>'], 'UserInfo-Email', email),
						_1: {
							ctor: '::',
							_0: A2(_user$project$MembersApi_ops['=>'], 'UserInfo-Password', password),
							_1: {
								ctor: '::',
								_0: A2(_user$project$MembersApi_ops['=>'], 'passwordShow', '1'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$MembersApi_ops['=>'], 'signature-uri', signature),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$MembersApi_ops['=>'],
											'JoinMinor',
											isAdult ? 'No' : 'Yes'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		};
		var formDataStr = A2(_elm_lang$core$String$join, '&', kvStrs);
		var request = _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {ctor: '[]'},
				url: flags.xcOrgActionUrl,
				body: A2(_elm_lang$http$Http$stringBody, 'application/x-www-form-urlencoded', formDataStr),
				expect: _elm_lang$http$Http$expectString,
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
		return A2(_elm_lang$http$Http$send, tagger, request);
	});
var _user$project$MembersApi$replaceAll = F2(
	function (_p1, whole) {
		var _p2 = _p1;
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex(_p2.oldSub),
			function (_p3) {
				return _p2.newSub;
			},
			whole);
	});
var _user$project$MembersApi$createSession = function (flags) {
	return {
		addDiscoveryMethods: _user$project$MembersApi$addDiscoveryMethods(flags),
		createNewAcct: _user$project$MembersApi$createNewAcct(flags),
		setIsAdult: _user$project$MembersApi$setIsAdult(flags)
	};
};
var _user$project$MembersApi$Session = F3(
	function (a, b, c) {
		return {addDiscoveryMethods: a, createNewAcct: b, setIsAdult: c};
	});
var _user$project$MembersApi$Flags = F6(
	function (a, b, c, d, e, f) {
		return {addDiscoveryMethodUrl: a, csrfToken: b, discoveryMethodsUrl: c, setIsAdultUrl: d, uniqueKioskId: e, xcOrgActionUrl: f};
	});

var _user$project$Types$sessionTypeStr = function (st) {
	var _p0 = st;
	if (_p0.ctor === 'CheckInSession') {
		return 'check in';
	} else {
		return 'check out';
	}
};
var _user$project$Types$mdlIdBase = function (scene) {
	var _p1 = scene;
	switch (_p1.ctor) {
		case 'AuthorizeEntry':
			return 900;
		case 'BuyMembership':
			return 2500;
		case 'CheckIn':
			return 100;
		case 'CheckInDone':
			return 200;
		case 'CheckOut':
			return 300;
		case 'CheckOutDone':
			return 400;
		case 'CreatingAcct':
			return 500;
		case 'EmailInUse':
			return 600;
		case 'Error':
			return 700;
		case 'HowDidYouHear':
			return 800;
		case 'NewMember':
			return 1000;
		case 'NewUser':
			return 1100;
		case 'OldBusiness':
			return 1200;
		case 'PublicHours':
			return 2800;
		case 'ReasonForVisit':
			return 1300;
		case 'RfidHelper':
			return 2400;
		case 'SignUpDone':
			return 1500;
		case 'Start':
			return 1400;
		case 'TaskInfo':
			return 1600;
		case 'TaskList':
			return 1700;
		case 'TimeSheetPt1':
			return 1800;
		case 'TimeSheetPt2':
			return 1900;
		case 'TimeSheetPt3':
			return 2000;
		case 'UseBankedHours':
			return 2600;
		case 'Waiver':
			return 2100;
		case 'Welcome':
			return 2200;
		case 'WelcomeForRfid':
			return 2300;
		default:
			return 2700;
	}
};
var _user$project$Types$missingArguments = 'Can\'t continue because required arguments were not received.';
var _user$project$Types$Flags = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return {timeShift: a, bannerBottomUrl: b, bannerTopUrl: c, cloneAcctUrl: d, csrfToken: e, membersApiFlags: f, orgName: g, scrapeLoginsUrl: h, uniqueKioskId: i, wavingHandUrl: j, xcOrgActionUrl: k, xisApiFlags: l};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Types$TaskClaimWork = F3(
	function (a, b, c) {
		return {task: a, claim: b, work: c};
	});
var _user$project$Types$YouCantEnter = {ctor: 'YouCantEnter'};
var _user$project$Types$WelcomeForRfid = {ctor: 'WelcomeForRfid'};
var _user$project$Types$Welcome = {ctor: 'Welcome'};
var _user$project$Types$Waiver = {ctor: 'Waiver'};
var _user$project$Types$UseBankedHours = {ctor: 'UseBankedHours'};
var _user$project$Types$TimeSheetPt3 = {ctor: 'TimeSheetPt3'};
var _user$project$Types$TimeSheetPt2 = {ctor: 'TimeSheetPt2'};
var _user$project$Types$TimeSheetPt1 = {ctor: 'TimeSheetPt1'};
var _user$project$Types$TaskList = {ctor: 'TaskList'};
var _user$project$Types$TaskInfo = {ctor: 'TaskInfo'};
var _user$project$Types$Start = {ctor: 'Start'};
var _user$project$Types$SignUpDone = {ctor: 'SignUpDone'};
var _user$project$Types$RfidHelper = {ctor: 'RfidHelper'};
var _user$project$Types$ReasonForVisit = {ctor: 'ReasonForVisit'};
var _user$project$Types$PublicHours = {ctor: 'PublicHours'};
var _user$project$Types$OldBusiness = {ctor: 'OldBusiness'};
var _user$project$Types$NewUser = {ctor: 'NewUser'};
var _user$project$Types$NewMember = {ctor: 'NewMember'};
var _user$project$Types$HowDidYouHear = {ctor: 'HowDidYouHear'};
var _user$project$Types$Error = {ctor: 'Error'};
var _user$project$Types$EmailInUse = {ctor: 'EmailInUse'};
var _user$project$Types$CreatingAcct = {ctor: 'CreatingAcct'};
var _user$project$Types$CheckOutDone = {ctor: 'CheckOutDone'};
var _user$project$Types$CheckOut = {ctor: 'CheckOut'};
var _user$project$Types$CheckInDone = {ctor: 'CheckInDone'};
var _user$project$Types$CheckIn = {ctor: 'CheckIn'};
var _user$project$Types$BuyMembership = {ctor: 'BuyMembership'};
var _user$project$Types$AuthorizeEntry = {ctor: 'AuthorizeEntry'};
var _user$project$Types$CheckOutSession = {ctor: 'CheckOutSession'};
var _user$project$Types$CheckInSession = {ctor: 'CheckInSession'};
var _user$project$Types$BM_Segue = function (a) {
	return {ctor: 'BM_Segue', _0: a};
};
var _user$project$Types$CID_Segue = function (a) {
	return {ctor: 'CID_Segue', _0: a};
};
var _user$project$Types$CI_UpdateMember = function (a) {
	return {ctor: 'CI_UpdateMember', _0: a};
};
var _user$project$Types$CI_UpdateFlexId = function (a) {
	return {ctor: 'CI_UpdateFlexId', _0: a};
};
var _user$project$Types$UpdateRecentRfidsRead = function (a) {
	return {ctor: 'UpdateRecentRfidsRead', _0: a};
};
var _user$project$Types$LastNamesEqualTo = F2(
	function (a, b) {
		return {ctor: 'LastNamesEqualTo', _0: a, _1: b};
	});
var _user$project$Types$LastNamesStartingWith = F2(
	function (a, b) {
		return {ctor: 'LastNamesStartingWith', _0: a, _1: b};
	});
var _user$project$Types$UsernamesEqualTo = F2(
	function (a, b) {
		return {ctor: 'UsernamesEqualTo', _0: a, _1: b};
	});
var _user$project$Types$UsernamesStartingWith = F2(
	function (a, b) {
		return {ctor: 'UsernamesStartingWith', _0: a, _1: b};
	});
var _user$project$Types$COD_LogCheckOutResult = function (a) {
	return {ctor: 'COD_LogCheckOutResult', _0: a};
};
var _user$project$Types$COD_Segue = function (a) {
	return {ctor: 'COD_Segue', _0: a};
};
var _user$project$Types$CO_MemberChosen = function (a) {
	return {ctor: 'CO_MemberChosen', _0: a};
};
var _user$project$Types$CO_AccVisitEvents = function (a) {
	return {ctor: 'CO_AccVisitEvents', _0: a};
};
var _user$project$Types$DiscoveryMethodAdded = function (a) {
	return {ctor: 'DiscoveryMethodAdded', _0: a};
};
var _user$project$Types$IsAdultWasSet = function (a) {
	return {ctor: 'IsAdultWasSet', _0: a};
};
var _user$project$Types$CloneAttempted = function (a) {
	return {ctor: 'CloneAttempted', _0: a};
};
var _user$project$Types$XcAcctCreationAttempted = function (a) {
	return {ctor: 'XcAcctCreationAttempted', _0: a};
};
var _user$project$Types$CA_Segue = function (a) {
	return {ctor: 'CA_Segue', _0: a};
};
var _user$project$Types$ERR_ResetClicked = {ctor: 'ERR_ResetClicked'};
var _user$project$Types$ERR_Segue = function (a) {
	return {ctor: 'ERR_Segue', _0: a};
};
var _user$project$Types$EIU_Segue = function (a) {
	return {ctor: 'EIU_Segue', _0: a};
};
var _user$project$Types$OkClicked = {ctor: 'OkClicked'};
var _user$project$Types$ShuffledDiscoveryMethods = function (a) {
	return {ctor: 'ShuffledDiscoveryMethods', _0: a};
};
var _user$project$Types$ToggleDiscoveryMethod = function (a) {
	return {ctor: 'ToggleDiscoveryMethod', _0: a};
};
var _user$project$Types$AccDiscoveryMethods = function (a) {
	return {ctor: 'AccDiscoveryMethods', _0: a};
};
var _user$project$Types$AE_Segue = F3(
	function (a, b, c) {
		return {ctor: 'AE_Segue', _0: a, _1: b, _2: c};
	});
var _user$project$Types$ValidateEmailUnique = function (a) {
	return {ctor: 'ValidateEmailUnique', _0: a};
};
var _user$project$Types$Validate = {ctor: 'Validate'};
var _user$project$Types$ToggleIsAdult = function (a) {
	return {ctor: 'ToggleIsAdult', _0: a};
};
var _user$project$Types$UpdateEmail = function (a) {
	return {ctor: 'UpdateEmail', _0: a};
};
var _user$project$Types$UpdateLastName = function (a) {
	return {ctor: 'UpdateLastName', _0: a};
};
var _user$project$Types$UpdateFirstName = function (a) {
	return {ctor: 'UpdateFirstName', _0: a};
};
var _user$project$Types$NM_Segue = function (a) {
	return {ctor: 'NM_Segue', _0: a};
};
var _user$project$Types$UpdatePassword2 = function (a) {
	return {ctor: 'UpdatePassword2', _0: a};
};
var _user$project$Types$UpdatePassword1 = function (a) {
	return {ctor: 'UpdatePassword1', _0: a};
};
var _user$project$Types$UpdateUserName = function (a) {
	return {ctor: 'UpdateUserName', _0: a};
};
var _user$project$Types$ValidateUserNameUnique = function (a) {
	return {ctor: 'ValidateUserNameUnique', _0: a};
};
var _user$project$Types$ValidateUserNameAndPw = {ctor: 'ValidateUserNameAndPw'};
var _user$project$Types$NU_Segue = function (a) {
	return {ctor: 'NU_Segue', _0: a};
};
var _user$project$Types$OB_NoteClaimUpdated = function (a) {
	return {ctor: 'OB_NoteClaimUpdated', _0: a};
};
var _user$project$Types$OB_NoteWorkDeleted = function (a) {
	return {ctor: 'OB_NoteWorkDeleted', _0: a};
};
var _user$project$Types$OB_ToggleItem = function (a) {
	return {ctor: 'OB_ToggleItem', _0: a};
};
var _user$project$Types$OB_NoteRelatedWork = F3(
	function (a, b, c) {
		return {ctor: 'OB_NoteRelatedWork', _0: a, _1: b, _2: c};
	});
var _user$project$Types$OB_NoteRelatedTask = F2(
	function (a, b) {
		return {ctor: 'OB_NoteRelatedTask', _0: a, _1: b};
	});
var _user$project$Types$OB_DeleteSelection = {ctor: 'OB_DeleteSelection'};
var _user$project$Types$OB_WorkingClaimsResult = function (a) {
	return {ctor: 'OB_WorkingClaimsResult', _0: a};
};
var _user$project$Types$OB_SegueB = F3(
	function (a, b, c) {
		return {ctor: 'OB_SegueB', _0: a, _1: b, _2: c};
	});
var _user$project$Types$OB_SegueA = F2(
	function (a, b) {
		return {ctor: 'OB_SegueA', _0: a, _1: b};
	});
var _user$project$Types$PH_Segue = function (a) {
	return {ctor: 'PH_Segue', _0: a};
};
var _user$project$Types$LogCheckInResult = function (a) {
	return {ctor: 'LogCheckInResult', _0: a};
};
var _user$project$Types$ValidateReason = {ctor: 'ValidateReason'};
var _user$project$Types$UpdateReasonForVisit = function (a) {
	return {ctor: 'UpdateReasonForVisit', _0: a};
};
var _user$project$Types$UpdateTimeBlockTypes = function (a) {
	return {ctor: 'UpdateTimeBlockTypes', _0: a};
};
var _user$project$Types$UpdateTimeBlocks = function (a) {
	return {ctor: 'UpdateTimeBlocks', _0: a};
};
var _user$project$Types$R4V_Segue = function (a) {
	return {ctor: 'R4V_Segue', _0: a};
};
var _user$project$Types$RH_MemberPresentResult = function (a) {
	return {ctor: 'RH_MemberPresentResult', _0: a};
};
var _user$project$Types$RH_MemberListResult = function (a) {
	return {ctor: 'RH_MemberListResult', _0: a};
};
var _user$project$Types$RH_KeyDown = function (a) {
	return {ctor: 'RH_KeyDown', _0: a};
};
var _user$project$Types$SUD_Segue = function (a) {
	return {ctor: 'SUD_Segue', _0: a};
};
var _user$project$Types$SS_MouseClick = function (a) {
	return {ctor: 'SS_MouseClick', _0: a};
};
var _user$project$Types$SS_KeyDown = function (a) {
	return {ctor: 'SS_KeyDown', _0: a};
};
var _user$project$Types$TI_Segue = function (a) {
	return {ctor: 'TI_Segue', _0: a};
};
var _user$project$Types$TL_WorkInsertResult = function (a) {
	return {ctor: 'TL_WorkInsertResult', _0: a};
};
var _user$project$Types$TL_ClaimUpsertResult = function (a) {
	return {ctor: 'TL_ClaimUpsertResult', _0: a};
};
var _user$project$Types$TL_ValidateTaskChoice = {ctor: 'TL_ValidateTaskChoice'};
var _user$project$Types$TL_ToggleTask = function (a) {
	return {ctor: 'TL_ToggleTask', _0: a};
};
var _user$project$Types$TL_TaskListResult = function (a) {
	return {ctor: 'TL_TaskListResult', _0: a};
};
var _user$project$Types$TL_Segue = function (a) {
	return {ctor: 'TL_Segue', _0: a};
};
var _user$project$Types$TS1_MinPad = function (a) {
	return {ctor: 'TS1_MinPad', _0: a};
};
var _user$project$Types$TS1_HrPad = function (a) {
	return {ctor: 'TS1_HrPad', _0: a};
};
var _user$project$Types$TS1_Submit = F3(
	function (a, b, c) {
		return {ctor: 'TS1_Submit', _0: a, _1: b, _2: c};
	});
var _user$project$Types$TS1_Segue = F3(
	function (a, b, c) {
		return {ctor: 'TS1_Segue', _0: a, _1: b, _2: c};
	});
var _user$project$Types$TS2_Continue = {ctor: 'TS2_Continue'};
var _user$project$Types$TS2_UpdateDescription = function (a) {
	return {ctor: 'TS2_UpdateDescription', _0: a};
};
var _user$project$Types$TS2_Segue = F3(
	function (a, b, c) {
		return {ctor: 'TS2_Segue', _0: a, _1: b, _2: c};
	});
var _user$project$Types$TS3_WitnessAuthResult = function (a) {
	return {ctor: 'TS3_WitnessAuthResult', _0: a};
};
var _user$project$Types$TS3_WorkNoteCreated = function (a) {
	return {ctor: 'TS3_WorkNoteCreated', _0: a};
};
var _user$project$Types$TS3_WorkUpdated = function (a) {
	return {ctor: 'TS3_WorkUpdated', _0: a};
};
var _user$project$Types$TS3_ClaimUpdated = function (a) {
	return {ctor: 'TS3_ClaimUpdated', _0: a};
};
var _user$project$Types$TS3_NeedWitness = {ctor: 'TS3_NeedWitness'};
var _user$project$Types$TS3_Skipped = {ctor: 'TS3_Skipped'};
var _user$project$Types$TS3_WitnessCredsReady = {ctor: 'TS3_WitnessCredsReady'};
var _user$project$Types$TS3_UpdateWitnessPassword = function (a) {
	return {ctor: 'TS3_UpdateWitnessPassword', _0: a};
};
var _user$project$Types$TS3_UpdateWitnessUsername = function (a) {
	return {ctor: 'TS3_UpdateWitnessUsername', _0: a};
};
var _user$project$Types$TS3_Segue = F4(
	function (a, b, c, d) {
		return {ctor: 'TS3_Segue', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Types$UBH_Segue = function (a) {
	return {ctor: 'UBH_Segue', _0: a};
};
var _user$project$Types$UpdateSignature = function (a) {
	return {ctor: 'UpdateSignature', _0: a};
};
var _user$project$Types$GetSignature = {ctor: 'GetSignature'};
var _user$project$Types$ClearSignaturePad = function (a) {
	return {ctor: 'ClearSignaturePad', _0: a};
};
var _user$project$Types$ShowSignaturePad = function (a) {
	return {ctor: 'ShowSignaturePad', _0: a};
};
var _user$project$Types$WVR_Segue = function (a) {
	return {ctor: 'WVR_Segue', _0: a};
};
var _user$project$Types$W4R_CheckOutClicked = {ctor: 'W4R_CheckOutClicked'};
var _user$project$Types$W4R_CheckInClicked = {ctor: 'W4R_CheckInClicked'};
var _user$project$Types$W4R_Segue = function (a) {
	return {ctor: 'W4R_Segue', _0: a};
};
var _user$project$Types$AlreadyPaid = function (a) {
	return {ctor: 'AlreadyPaid', _0: a};
};
var _user$project$Types$PayNowAtFrontDesk = function (a) {
	return {ctor: 'PayNowAtFrontDesk', _0: a};
};
var _user$project$Types$YCE_Segue = function (a) {
	return {ctor: 'YCE_Segue', _0: a};
};
var _user$project$Types$YouCantEnterVector = function (a) {
	return {ctor: 'YouCantEnterVector', _0: a};
};
var _user$project$Types$WelcomeForRfidVector = function (a) {
	return {ctor: 'WelcomeForRfidVector', _0: a};
};
var _user$project$Types$WaiverVector = function (a) {
	return {ctor: 'WaiverVector', _0: a};
};
var _user$project$Types$UseBankedHoursVector = function (a) {
	return {ctor: 'UseBankedHoursVector', _0: a};
};
var _user$project$Types$TimeSheetPt3Vector = function (a) {
	return {ctor: 'TimeSheetPt3Vector', _0: a};
};
var _user$project$Types$TimeSheetPt2Vector = function (a) {
	return {ctor: 'TimeSheetPt2Vector', _0: a};
};
var _user$project$Types$TimeSheetPt1Vector = function (a) {
	return {ctor: 'TimeSheetPt1Vector', _0: a};
};
var _user$project$Types$TaskListVector = function (a) {
	return {ctor: 'TaskListVector', _0: a};
};
var _user$project$Types$TaskInfoVector = function (a) {
	return {ctor: 'TaskInfoVector', _0: a};
};
var _user$project$Types$StartVector = function (a) {
	return {ctor: 'StartVector', _0: a};
};
var _user$project$Types$SignUpDoneVector = function (a) {
	return {ctor: 'SignUpDoneVector', _0: a};
};
var _user$project$Types$ReasonForVisitVector = function (a) {
	return {ctor: 'ReasonForVisitVector', _0: a};
};
var _user$project$Types$PublicHoursVector = function (a) {
	return {ctor: 'PublicHoursVector', _0: a};
};
var _user$project$Types$OldBusinessVector = function (a) {
	return {ctor: 'OldBusinessVector', _0: a};
};
var _user$project$Types$NewUserVector = function (a) {
	return {ctor: 'NewUserVector', _0: a};
};
var _user$project$Types$NewMemberVector = function (a) {
	return {ctor: 'NewMemberVector', _0: a};
};
var _user$project$Types$HowDidYouHearVector = function (a) {
	return {ctor: 'HowDidYouHearVector', _0: a};
};
var _user$project$Types$ErrorVector = function (a) {
	return {ctor: 'ErrorVector', _0: a};
};
var _user$project$Types$EmailInUseVector = function (a) {
	return {ctor: 'EmailInUseVector', _0: a};
};
var _user$project$Types$CreatingAcctVector = function (a) {
	return {ctor: 'CreatingAcctVector', _0: a};
};
var _user$project$Types$CheckOutVector = function (a) {
	return {ctor: 'CheckOutVector', _0: a};
};
var _user$project$Types$CheckOutDoneVector = function (a) {
	return {ctor: 'CheckOutDoneVector', _0: a};
};
var _user$project$Types$CheckInVector = function (a) {
	return {ctor: 'CheckInVector', _0: a};
};
var _user$project$Types$CheckInDoneVector = function (a) {
	return {ctor: 'CheckInDoneVector', _0: a};
};
var _user$project$Types$BuyMembershipVector = function (a) {
	return {ctor: 'BuyMembershipVector', _0: a};
};
var _user$project$Types$AuthorizeEntryVector = function (a) {
	return {ctor: 'AuthorizeEntryVector', _0: a};
};
var _user$project$Types$IgnoreResultHttpErrorString = function (a) {
	return {ctor: 'IgnoreResultHttpErrorString', _0: a};
};
var _user$project$Types$NoOp = {ctor: 'NoOp'};
var _user$project$Types$RfidWasSwiped = function (a) {
	return {ctor: 'RfidWasSwiped', _0: a};
};
var _user$project$Types$RfidHelperVector = function (a) {
	return {ctor: 'RfidHelperVector', _0: a};
};
var _user$project$Types$WizardVector = function (a) {
	return {ctor: 'WizardVector', _0: a};
};
var _user$project$Types$MdlVector = function (a) {
	return {ctor: 'MdlVector', _0: a};
};
var _user$project$Types$FocusOnIndex = function (a) {
	return {ctor: 'FocusOnIndex', _0: a};
};
var _user$project$Types$FocusWasSet = function (a) {
	return {ctor: 'FocusWasSet', _0: a};
};
var _user$project$Types$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Types$SceneWillAppear = F2(
	function (a, b) {
		return {ctor: 'SceneWillAppear', _0: a, _1: b};
	});
var _user$project$Types$Reset = {ctor: 'Reset'};
var _user$project$Types$ReplaceWith = function (a) {
	return {ctor: 'ReplaceWith', _0: a};
};
var _user$project$Types$PopTo = function (a) {
	return {ctor: 'PopTo', _0: a};
};
var _user$project$Types$Pop = {ctor: 'Pop'};
var _user$project$Types$RebaseTo = function (a) {
	return {ctor: 'RebaseTo', _0: a};
};
var _user$project$Types$Rebase = {ctor: 'Rebase'};
var _user$project$Types$Push = function (a) {
	return {ctor: 'Push', _0: a};
};

var _user$project$Wizard_SceneUtils$textAreaColor = 'rgb(102,153,204,.2)';
var _user$project$Wizard_SceneUtils$sceneButtonCss = {
	ctor: '::',
	_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-left', '10px'),
	_1: {
		ctor: '::',
		_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-right', '10px'),
		_1: {
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-top', '25px'),
			_1: {
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-bottom', '55px'),
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-left', '30px'),
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-right', '30px'),
						_1: {
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Options$css, 'font-size', '18pt'),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	}
};
var _user$project$Wizard_SceneUtils$navButtonCss = {
	ctor: '::',
	_0: A2(_debois$elm_mdl$Material_Options$css, 'display', 'inline-block'),
	_1: {
		ctor: '::',
		_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '30px'),
		_1: {
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Options$css, 'font-size', '14pt'),
			_1: {
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Options$css, 'color', '#eeeeee'),
				_1: {ctor: '[]'}
			}
		}
	}
};
var _user$project$Wizard_SceneUtils$sceneDivBorderWidth = 1;
var _user$project$Wizard_SceneUtils$bottomBannerHeight = 84;
var _user$project$Wizard_SceneUtils$topBannerHeight = 155;
var _user$project$Wizard_SceneUtils$sceneHeight = 1280;
var _user$project$Wizard_SceneUtils$sceneWidth = 800;
var _user$project$Wizard_SceneUtils$pt = function (num) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(num),
		'pt');
};
var _user$project$Wizard_SceneUtils$px = function (num) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(num),
		'px');
};
var _user$project$Wizard_SceneUtils_ops = _user$project$Wizard_SceneUtils_ops || {};
_user$project$Wizard_SceneUtils_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _user$project$Wizard_SceneUtils$frameDivStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-family', 'Roboto Condensed, Arial, Helvetica'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'text-align', 'center'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'padding-left', '0'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'padding-right', '0'),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$Wizard_SceneUtils_ops['=>'],
							'padding-top',
							_user$project$Wizard_SceneUtils$px(_user$project$Wizard_SceneUtils$topBannerHeight)),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$Wizard_SceneUtils_ops['=>'],
								'padding-bottom',
								_user$project$Wizard_SceneUtils$px(_user$project$Wizard_SceneUtils$bottomBannerHeight)),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'position', 'absolute'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'top', '0'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'bottom', '0'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'left', '0'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'right', '0'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Wizard_SceneUtils$sceneDivStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-left', 'auto'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-right', 'auto'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'border', '1px solid #bbbbbb'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'background-color', 'white'),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$Wizard_SceneUtils_ops['=>'],
							'width',
							_user$project$Wizard_SceneUtils$px(_user$project$Wizard_SceneUtils$sceneWidth - (2 * _user$project$Wizard_SceneUtils$sceneDivBorderWidth))),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'min-height', '99.8%'),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$Wizard_SceneUtils$sceneTitleStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '32pt'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-left', 'auto'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-right', 'auto'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-top', '2em'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-bottom', '0.5em'),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _user$project$Wizard_SceneUtils$sceneTextStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '22pt'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'line-height', '1em'),
			_1: {ctor: '[]'}
		}
	});
var _user$project$Wizard_SceneUtils$sceneTextBlockStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(
			_user$project$Wizard_SceneUtils_ops['=>'],
			'padding-left',
			_user$project$Wizard_SceneUtils$px(100)),
		_1: {
			ctor: '::',
			_0: A2(
				_user$project$Wizard_SceneUtils_ops['=>'],
				'padding-right',
				_user$project$Wizard_SceneUtils$px(100)),
			_1: {ctor: '[]'}
		}
	});
var _user$project$Wizard_SceneUtils$sceneSubtitleStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '24pt'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-left', 'auto'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-right', 'auto'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-bottom', '1em'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-top', '0'),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _user$project$Wizard_SceneUtils$bannerTopStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'display', 'block'),
		_1: {
			ctor: '::',
			_0: A2(
				_user$project$Wizard_SceneUtils_ops['=>'],
				'margin-top',
				_user$project$Wizard_SceneUtils$px(-1 * _user$project$Wizard_SceneUtils$topBannerHeight)),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-left', 'auto'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-right', 'auto'),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$Wizard_SceneUtils_ops['=>'],
							'height',
							_user$project$Wizard_SceneUtils$px(_user$project$Wizard_SceneUtils$topBannerHeight)),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$Wizard_SceneUtils_ops['=>'],
								'width',
								_user$project$Wizard_SceneUtils$px(_user$project$Wizard_SceneUtils$sceneWidth)),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$Wizard_SceneUtils$bannerBottomStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'display', 'block'),
		_1: {
			ctor: '::',
			_0: A2(
				_user$project$Wizard_SceneUtils_ops['=>'],
				'margin-bottom',
				_user$project$Wizard_SceneUtils$px(-1 * _user$project$Wizard_SceneUtils$bottomBannerHeight)),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-left', 'auto'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-right', 'auto'),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$Wizard_SceneUtils_ops['=>'],
							'height',
							_user$project$Wizard_SceneUtils$px(_user$project$Wizard_SceneUtils$bottomBannerHeight)),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$Wizard_SceneUtils_ops['=>'],
								'width',
								_user$project$Wizard_SceneUtils$px(_user$project$Wizard_SceneUtils$sceneWidth)),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$Wizard_SceneUtils$navDivStyle = _user$project$Wizard_SceneUtils$bannerBottomStyle;
var _user$project$Wizard_SceneUtils$errorMsgStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'color', 'red'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '22pt'),
			_1: {ctor: '[]'}
		}
	});
var _user$project$Wizard_SceneUtils$userIdStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin', '10px'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'padding', '10px'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'background-color', '#ccffff'),
				_1: {ctor: '[]'}
			}
		}
	});
var _user$project$Wizard_SceneUtils$programmingError = 'Programming error. Contact staff.';
var _user$project$Wizard_SceneUtils$redSpan = function (inner) {
	return A2(
		_elm_lang$html$Html$span,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'color', 'red'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		inner);
};
var _user$project$Wizard_SceneUtils$hspace = function (amount) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'display', 'inline-block'),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$Wizard_SceneUtils_ops['=>'],
							'width',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(amount),
								'px')),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'});
};
var _user$project$Wizard_SceneUtils$vspace = function (amount) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: A2(
						_user$project$Wizard_SceneUtils_ops['=>'],
						'height',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(amount),
							'px')),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'});
};
var _user$project$Wizard_SceneUtils$formatBadNews = function (msgs) {
	return _elm_lang$core$Native_Utils.eq(
		msgs,
		{ctor: '[]'}) ? _elm_lang$html$Html$text('') : A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		_elm_lang$core$List$concat(
			{
				ctor: '::',
				_0: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '32pt'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Whoops!'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$vspace(15),
						_1: {ctor: '[]'}
					}
				},
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$List$map,
						function (msg) {
							return A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _user$project$Wizard_SceneUtils$errorMsgStyle,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(msg),
									_1: {ctor: '[]'}
								});
						},
						msgs),
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Please correct these issues and try again.'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						_1: {ctor: '[]'}
					}
				}
			}));
};
var _user$project$Wizard_SceneUtils$sceneCheckbox = F5(
	function (model, index, label, value, msger) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'text-align', 'left'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'display', 'inline-block'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'width', '400px'),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A5(
					_debois$elm_mdl$Material_Toggles$checkbox,
					_user$project$Types$MdlVector,
					index,
					model.mdl,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$onToggle(msger),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Toggles$value(value),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '24pt'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-left', '16px'),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(label),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Wizard_SceneUtils$sceneGenericTextField = F6(
	function (model, index, hint, value, msger, options) {
		return A5(
			_debois$elm_mdl$Material_Textfield$render,
			_user$project$Types$MdlVector,
			index,
			model.mdl,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Textfield$label(hint),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Textfield$value(value),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$onInput(msger),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$attribute(
										_elm_lang$html$Html_Attributes$tabindex(
											_elm_lang$core$List$sum(index))),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$attribute(
											_elm_lang$html$Html_Attributes$id(
												_elm_lang$core$Basics$toString(index))),
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '500px'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				},
				options),
			{ctor: '[]'});
	});
var _user$project$Wizard_SceneUtils$sceneTextField = F5(
	function (model, index, hint, value, msger) {
		return A6(
			_user$project$Wizard_SceneUtils$sceneGenericTextField,
			model,
			index,
			hint,
			value,
			msger,
			{ctor: '[]'});
	});
var _user$project$Wizard_SceneUtils$scenePasswordField = F5(
	function (model, index, hint, value, msger) {
		return A6(
			_user$project$Wizard_SceneUtils$sceneGenericTextField,
			model,
			index,
			hint,
			value,
			msger,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Textfield$password,
				_1: {ctor: '[]'}
			});
	});
var _user$project$Wizard_SceneUtils$sceneEmailField = F5(
	function (model, index, hint, value, msger) {
		return A6(
			_user$project$Wizard_SceneUtils$sceneGenericTextField,
			model,
			index,
			hint,
			value,
			msger,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Textfield$email,
				_1: {ctor: '[]'}
			});
	});
var _user$project$Wizard_SceneUtils$sceneTextArea = F6(
	function (model, index, hint, value, numRows, msger) {
		return A6(
			_user$project$Wizard_SceneUtils$sceneGenericTextField,
			model,
			index,
			hint,
			value,
			msger,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Textfield$textarea,
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Textfield$rows(numRows),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Wizard_SceneUtils$padButton = F2(
	function (model, spec) {
		return A5(
			_debois$elm_mdl$Material_Button$render,
			_user$project$Types$MdlVector,
			{
				ctor: '::',
				_0: 0,
				_1: {ctor: '[]'}
			},
			model.mdl,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Button$fab,
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$onClick(spec.msg),
						_1: {ctor: '[]'}
					}
				},
				spec.colored ? {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Button$colored,
					_1: {ctor: '[]'}
				} : {ctor: '[]'}),
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(spec.title),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Wizard_SceneUtils$option_NoTabIndex = _debois$elm_mdl$Material_Options$attribute(
	_elm_lang$html$Html_Attributes$tabindex(-99));
var _user$project$Wizard_SceneUtils$frameNavButtons = function (model) {
	var isBaseScene = _mgold$elm_nonempty_list$List_Nonempty$isSingleton(model.sceneStack);
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _user$project$Wizard_SceneUtils$navDivStyle,
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A5(
				_debois$elm_mdl$Material_Button$render,
				_user$project$Types$MdlVector,
				{
					ctor: '::',
					_0: 10000,
					_1: {ctor: '[]'}
				},
				model.mdl,
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Button$flat,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$disabled(isBaseScene),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$onClick(
									_user$project$Types$WizardVector(_user$project$Types$Pop)),
								_1: {
									ctor: '::',
									_0: _user$project$Wizard_SceneUtils$option_NoTabIndex,
									_1: {ctor: '[]'}
								}
							}
						}
					},
					_user$project$Wizard_SceneUtils$navButtonCss),
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Back'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$hspace(600),
				_1: {
					ctor: '::',
					_0: A5(
						_debois$elm_mdl$Material_Button$render,
						_user$project$Types$MdlVector,
						{
							ctor: '::',
							_0: 10001,
							_1: {ctor: '[]'}
						},
						model.mdl,
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Button$flat,
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onClick(
										_user$project$Types$WizardVector(_user$project$Types$Reset)),
									_1: {
										ctor: '::',
										_0: _user$project$Wizard_SceneUtils$option_NoTabIndex,
										_1: {ctor: '[]'}
									}
								}
							},
							_user$project$Wizard_SceneUtils$navButtonCss),
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Quit'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Wizard_SceneUtils$sceneFrame = F2(
	function (model, sceneHtml) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$frameDivStyle,
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src(model.flags.bannerTopUrl),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$bannerTopStyle,
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$sceneDivStyle,
							_1: {ctor: '[]'}
						},
						sceneHtml),
					_1: {
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$frameNavButtons(model),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src(model.flags.bannerBottomUrl),
									_1: {
										ctor: '::',
										_0: _user$project$Wizard_SceneUtils$bannerBottomStyle,
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _user$project$Wizard_SceneUtils$sceneButton = F2(
	function (model, spec) {
		return A5(
			_debois$elm_mdl$Material_Button$render,
			_user$project$Types$MdlVector,
			{
				ctor: '::',
				_0: 0,
				_1: {ctor: '[]'}
			},
			model.mdl,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Button$raised,
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Button$colored,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$onClick(spec.msg),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$disabled(!spec.enabled),
								_1: {
									ctor: '::',
									_0: _user$project$Wizard_SceneUtils$option_NoTabIndex,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				_user$project$Wizard_SceneUtils$sceneButtonCss),
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(spec.title),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Wizard_SceneUtils$genericScene = F6(
	function (model, title, subtitle, extraContent, buttonSpecs, badNews) {
		var sceneHtml = {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$sceneTitleStyle,
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(title),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$sceneSubtitleStyle,
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(subtitle),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: extraContent,
					_1: {
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$vspace(50),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$formatBadNews(badNews),
							_1: {
								ctor: '::',
								_0: _user$project$Wizard_SceneUtils$vspace(
									_elm_lang$core$List$isEmpty(badNews) ? 0 : 50),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{ctor: '[]'},
										A2(
											_elm_lang$core$List$map,
											_user$project$Wizard_SceneUtils$sceneButton(model),
											buttonSpecs)),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		};
		return A2(_user$project$Wizard_SceneUtils$sceneFrame, model, sceneHtml);
	});
var _user$project$Wizard_SceneUtils$blankGenericScene = function (model) {
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		model,
		'',
		'',
		_elm_lang$html$Html$text(''),
		{ctor: '[]'},
		{ctor: '[]'});
};
var _user$project$Wizard_SceneUtils$currentScene = function (model) {
	return _mgold$elm_nonempty_list$List_Nonempty$head(model.sceneStack);
};
var _user$project$Wizard_SceneUtils$sceneIsVisible = F2(
	function (model, scene) {
		return _elm_lang$core$Native_Utils.eq(
			_user$project$Wizard_SceneUtils$currentScene(model),
			scene);
	});
var _user$project$Wizard_SceneUtils$msgForReset = _user$project$Types$WizardVector(_user$project$Types$Reset);
var _user$project$Wizard_SceneUtils$popToMsg = function (_p0) {
	return _user$project$Types$WizardVector(
		_user$project$Types$PopTo(_p0));
};
var _user$project$Wizard_SceneUtils$msgForSegueTo = function (_p1) {
	return _user$project$Types$WizardVector(
		_user$project$Types$Push(_p1));
};
var _user$project$Wizard_SceneUtils$send = function (msg) {
	return A2(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Task$succeed(msg));
};
var _user$project$Wizard_SceneUtils$segueTo = function (scene) {
	return _user$project$Wizard_SceneUtils$send(
		_user$project$Wizard_SceneUtils$msgForSegueTo(scene));
};
var _user$project$Wizard_SceneUtils$focusOnIndex = function (idx) {
	return _user$project$Wizard_SceneUtils$send(
		_user$project$Types$WizardVector(
			_user$project$Types$FocusOnIndex(idx)));
};
var _user$project$Wizard_SceneUtils$pop = _user$project$Wizard_SceneUtils$send(
	_user$project$Types$WizardVector(_user$project$Types$Pop));
var _user$project$Wizard_SceneUtils$popTo = function (_p2) {
	return _user$project$Wizard_SceneUtils$send(
		_user$project$Wizard_SceneUtils$popToMsg(_p2));
};
var _user$project$Wizard_SceneUtils$replaceWith = function (_p3) {
	return _user$project$Wizard_SceneUtils$send(
		_user$project$Types$WizardVector(
			_user$project$Types$ReplaceWith(_p3)));
};
var _user$project$Wizard_SceneUtils$rebaseTo = function (_p4) {
	return _user$project$Wizard_SceneUtils$send(
		_user$project$Types$WizardVector(
			_user$project$Types$RebaseTo(_p4)));
};
var _user$project$Wizard_SceneUtils$rebase = _user$project$Wizard_SceneUtils$send(
	_user$project$Types$WizardVector(_user$project$Types$Rebase));
var _user$project$Wizard_SceneUtils$hideKeyboard = _elm_lang$core$Native_Platform.outgoingPort(
	'hideKeyboard',
	function (v) {
		return null;
	});
var _user$project$Wizard_SceneUtils$PadButtonSpec = F3(
	function (a, b, c) {
		return {title: a, msg: b, colored: c};
	});
var _user$project$Wizard_SceneUtils$ButtonSpec = F3(
	function (a, b, c) {
		return {title: a, msg: b, enabled: c};
	});
var _user$project$Wizard_SceneUtils$errorView = F2(
	function (kioskModel, error) {
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Sorry!',
			'An error has occurred:',
			A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$vspace(125),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(error),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _user$project$Wizard_SceneUtils$vspace(40),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Scene Stack:'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$List$map,
							function (s) {
								return A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(s)),
										_1: {ctor: '[]'}
									});
							},
							_mgold$elm_nonempty_list$List_Nonempty$tail(kioskModel.sceneStack)),
						{
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(125),
							_1: {ctor: '[]'}
						}))),
			{
				ctor: '::',
				_0: A3(
					_user$project$Wizard_SceneUtils$ButtonSpec,
					'Reset',
					_user$project$Types$ErrorVector(_user$project$Types$ERR_ResetClicked),
					true),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'});
	});
var _user$project$Wizard_SceneUtils$Manual = function (a) {
	return {ctor: 'Manual', _0: a};
};
var _user$project$Wizard_SceneUtils$Auto = function (a) {
	return {ctor: 'Auto', _0: a};
};

var _user$project$AuthorizeEntryScene$view = function (kioskModel) {
	var xis = kioskModel.xisSession;
	var sceneModel = kioskModel.authorizeEntryModel;
	return A2(_user$project$Wizard_SceneUtils$errorView, kioskModel, 'AuthorizeEntryScene should never be on the scene stack.');
};
var _user$project$AuthorizeEntryScene$membersOnlyButNotMember = F5(
	function (xis, member, now, nowBlock, allTypes) {
		var isCurrent = function () {
			var _p0 = member.data.latestNonfutureMembership;
			if (_p0.ctor === 'Just') {
				return A2(
					xis.coverTime,
					{
						ctor: '::',
						_0: _p0._0,
						_1: {ctor: '[]'}
					},
					now);
			} else {
				return false;
			}
		}();
		var defaultBlockTypeName = function () {
			var _p1 = xis.defaultBlockType(allTypes);
			if (_p1.ctor === 'Just') {
				return _p1._0.data.name;
			} else {
				return '';
			}
		}();
		var membersOnlyStr = 'Members Only';
		var isMembersOnly = function () {
			var _p2 = nowBlock;
			if (_p2.ctor === 'Just') {
				return A3(xis.blockHasType, membersOnlyStr, allTypes, _p2._0);
			} else {
				return _elm_lang$core$Native_Utils.eq(defaultBlockTypeName, membersOnlyStr);
			}
		}();
		return isMembersOnly && (!isCurrent);
	});
var _user$project$AuthorizeEntryScene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.authorizeEntryModel;
		var _p3 = msg;
		var _p4 = _p3._0;
		var newSceneModel = _elm_lang$core$Native_Utils.update(
			sceneModel,
			{
				member: _elm_lang$core$Maybe$Just(_p4)
			});
		return A5(_user$project$AuthorizeEntryScene$membersOnlyButNotMember, xis, _p4, kioskModel.currTime, _p3._1, _p3._2) ? {
			ctor: '_Tuple2',
			_0: newSceneModel,
			_1: _user$project$Wizard_SceneUtils$send(
				_user$project$Types$YouCantEnterVector(
					_user$project$Types$YCE_Segue(_p4)))
		} : {
			ctor: '_Tuple2',
			_0: newSceneModel,
			_1: _user$project$Wizard_SceneUtils$send(
				_user$project$Types$OldBusinessVector(
					A2(_user$project$Types$OB_SegueA, _user$project$Types$CheckInSession, _p4)))
		};
	});
var _user$project$AuthorizeEntryScene$init = function (flags) {
	var sceneModel = {
		member: _elm_lang$core$Maybe$Nothing,
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$AuthorizeEntryScene$AuthorizeEntryModel = F2(
	function (a, b) {
		return {member: a, badNews: b};
	});

var _user$project$BuyMembershipScene$payTypesImgStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'text-align', 'center'),
		_1: {
			ctor: '::',
			_0: A2(
				_user$project$Wizard_SceneUtils_ops['=>'],
				'width',
				_user$project$Wizard_SceneUtils$px(400)),
			_1: {ctor: '[]'}
		}
	});
var _user$project$BuyMembershipScene$view = function (kioskModel) {
	var xis = kioskModel.xisSession;
	var sceneModel = kioskModel.buyMembershipModel;
	var _p0 = sceneModel.member;
	if (_p0.ctor === 'Nothing') {
		return A2(_user$project$Wizard_SceneUtils$errorView, kioskModel, _user$project$Types$missingArguments);
	} else {
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Buy a Membership',
			'Please ask a Staffer for Assistance',
			A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
					_1: {
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$sceneTextBlockStyle,
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(40),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src('/static/bzw_ops/VisaMcDiscAmexCashCheck.png'),
								_1: {
									ctor: '::',
									_0: _user$project$BuyMembershipScene$payTypesImgStyle,
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(60),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('We accept credit card, cash, and checks.'),
								_1: {
									ctor: '::',
									_0: _user$project$Wizard_SceneUtils$vspace(0),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text('Ask our staff to help you process the payment.'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}),
			{
				ctor: '::',
				_0: A3(
					_user$project$Wizard_SceneUtils$ButtonSpec,
					'I Did It!',
					_user$project$Types$OldBusinessVector(
						A2(_user$project$Types$OB_SegueA, _user$project$Types$CheckInSession, _p0._0)),
					true),
				_1: {
					ctor: '::',
					_0: A3(
						_user$project$Wizard_SceneUtils$ButtonSpec,
						'No Thanks',
						_user$project$Types$WizardVector(_user$project$Types$Pop),
						true),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'});
	}
};
var _user$project$BuyMembershipScene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.buyMembershipModel;
		var _p1 = msg;
		var newSceneModel = _elm_lang$core$Native_Utils.update(
			sceneModel,
			{
				member: _elm_lang$core$Maybe$Just(_p1._0)
			});
		return {
			ctor: '_Tuple2',
			_0: newSceneModel,
			_1: _user$project$Wizard_SceneUtils$send(
				_user$project$Types$WizardVector(
					_user$project$Types$Push(_user$project$Types$BuyMembership)))
		};
	});
var _user$project$BuyMembershipScene$init = function (flags) {
	var sceneModel = {
		member: _elm_lang$core$Maybe$Nothing,
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$BuyMembershipScene$BuyMembershipModel = F2(
	function (a, b) {
		return {member: a, badNews: b};
	});

var _user$project$CheckInDoneScene$view = function (kioskModel) {
	var sceneModel = kioskModel.checkInDoneModel;
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		'You\'re Checked In',
		'Have fun!',
		_user$project$Wizard_SceneUtils$vspace(40),
		{
			ctor: '::',
			_0: A3(
				_user$project$Wizard_SceneUtils$ButtonSpec,
				'Ok',
				_user$project$Types$WizardVector(_user$project$Types$Reset),
				true),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'});
};
var _user$project$CheckInDoneScene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.checkInDoneModel;
		var _p0 = msg;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				sceneModel,
				{
					member: _elm_lang$core$Maybe$Just(_p0._0)
				}),
			_1: _user$project$Wizard_SceneUtils$send(
				_user$project$Types$WizardVector(
					_user$project$Types$Push(_user$project$Types$CheckInDone)))
		};
	});
var _user$project$CheckInDoneScene$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: {member: _elm_lang$core$Maybe$Nothing},
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$CheckInDoneScene$CheckInDoneModel = function (a) {
	return {member: a};
};

var _user$project$RfidHelper$send = function (msg) {
	return A2(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Task$succeed(msg));
};
var _user$project$RfidHelper$subscriptions = _elm_lang$keyboard$Keyboard$downs(
	function (_p0) {
		return _user$project$Types$RfidHelperVector(
			_user$project$Types$RH_KeyDown(_p0));
	});
var _user$project$RfidHelper$viewBadRfid = function (kioskModel) {
	var model = kioskModel.rfidHelperModel;
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		'RFID Problem',
		'',
		A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$vspace(225),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text('Couldn\'t find your RFID in our database.'),
					_1: {
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$vspace(0),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Tap the BACK button and try again or'),
							_1: {
								ctor: '::',
								_0: _user$project$Wizard_SceneUtils$vspace(0),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text('speak to a staff member for help.'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}),
		{ctor: '[]'},
		{ctor: '[]'});
};
var _user$project$RfidHelper$viewHttpError = F2(
	function (kioskModel, err) {
		var model = kioskModel.rfidHelperModel;
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Http Problem!',
			_user$project$DjangoRestFramework$httpErrToStr(err),
			A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(225),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text('Tap the BACK button and try again or'),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(0),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('speak to a staff member for help.'),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			{ctor: '[]'},
			{ctor: '[]'});
	});
var _user$project$RfidHelper$viewCheckingRfid = F2(
	function (kioskModel, waitCount) {
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Checking Your RFID',
			'',
			A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(225),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text('One moment while we check our database.'),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(20),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(_elm_lang$core$String$repeat, waitCount, '●')),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			{ctor: '[]'},
			{ctor: '[]'});
	});
var _user$project$RfidHelper$view = function (kioskModel) {
	var _p1 = kioskModel.rfidHelperModel.state;
	switch (_p1.ctor) {
		case 'Nominal':
			return _user$project$Wizard_SceneUtils$blankGenericScene(kioskModel);
		case 'CheckingAnRfid':
			return A2(_user$project$RfidHelper$viewCheckingRfid, kioskModel, _p1._0);
		case 'FoundRfidToBe':
			if (_p1._0 === false) {
				return _user$project$RfidHelper$viewBadRfid(kioskModel);
			} else {
				return _user$project$Wizard_SceneUtils$blankGenericScene(kioskModel);
			}
		default:
			return A2(_user$project$RfidHelper$viewHttpError, kioskModel, _p1._0);
	}
};
var _user$project$RfidHelper$popThisScene = function (kioskModel) {
	return A2(_user$project$Wizard_SceneUtils$sceneIsVisible, kioskModel, _user$project$Types$RfidHelper) ? _user$project$RfidHelper$send(
		_user$project$Types$WizardVector(_user$project$Types$Pop)) : _elm_lang$core$Platform_Cmd$none;
};
var _user$project$RfidHelper$pushThisScene = function (kioskModel) {
	return A2(_user$project$Wizard_SceneUtils$sceneIsVisible, kioskModel, _user$project$Types$RfidHelper) ? _elm_lang$core$Platform_Cmd$none : _user$project$RfidHelper$send(
		_user$project$Types$WizardVector(
			_user$project$Types$Push(_user$project$Types$RfidHelper)));
};
var _user$project$RfidHelper$rfidCharsOnly = _elm_lang$core$Regex$regex('^>[0-9A-F]*$');
var _user$project$RfidHelper$delimitedRfidNum = _elm_lang$core$Regex$regex('>[0-9A-F]{8}');
var _user$project$RfidHelper$RfidHelperModel = F5(
	function (a, b, c, d, e) {
		return {state: a, typed: b, rfidsToCheck: c, loggedAsPresent: d, clientsMemberVector: e};
	});
var _user$project$RfidHelper$FoundRfidToBe = function (a) {
	return {ctor: 'FoundRfidToBe', _0: a};
};
var _user$project$RfidHelper$HitAnHttpErr = function (a) {
	return {ctor: 'HitAnHttpErr', _0: a};
};
var _user$project$RfidHelper$CheckingAnRfid = function (a) {
	return {ctor: 'CheckingAnRfid', _0: a};
};
var _user$project$RfidHelper$checkAnRfid = F3(
	function (kioskModel, model, xis) {
		var _p2 = model.state;
		switch (_p2.ctor) {
			case 'CheckingAnRfid':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'HitAnHttpErr':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'FoundRfidToBe':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				var _p3 = model.rfidsToCheck;
				if (_p3.ctor === '::') {
					var pushCmd = _user$project$RfidHelper$pushThisScene(kioskModel);
					var memberFilters = {
						ctor: '::',
						_0: _user$project$XisRestApi$RfidNumberEquals(_p3._0),
						_1: {ctor: '[]'}
					};
					var listCmd = A2(
						xis.listMembers,
						memberFilters,
						function (_p4) {
							return _user$project$Types$RfidHelperVector(
								_user$project$Types$RH_MemberListResult(_p4));
						});
					var newModel = _elm_lang$core$Native_Utils.update(
						model,
						{
							rfidsToCheck: _p3._1,
							state: _user$project$RfidHelper$CheckingAnRfid(0)
						});
					return {
						ctor: '_Tuple2',
						_0: newModel,
						_1: _elm_lang$core$Platform_Cmd$batch(
							{
								ctor: '::',
								_0: listCmd,
								_1: {
									ctor: '::',
									_0: pushCmd,
									_1: {ctor: '[]'}
								}
							})
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$RfidHelper$FoundRfidToBe(false)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _user$project$RfidHelper$tick = F2(
	function (time, kioskModel) {
		var sceneModel = kioskModel.rfidHelperModel;
		var _p5 = sceneModel.state;
		if (_p5.ctor === 'CheckingAnRfid') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					sceneModel,
					{
						state: _user$project$RfidHelper$CheckingAnRfid(_p5._0 + 1)
					}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$RfidHelper$Nominal = {ctor: 'Nominal'};
var _user$project$RfidHelper$create = function (vectorForMember) {
	return {
		state: _user$project$RfidHelper$Nominal,
		typed: '',
		rfidsToCheck: {ctor: '[]'},
		loggedAsPresent: _elm_lang$core$Set$empty,
		clientsMemberVector: vectorForMember
	};
};
var _user$project$RfidHelper$sceneWillAppear = F3(
	function (kioskModel, appearing, vanishing) {
		var sceneModel = kioskModel.rfidHelperModel;
		return _elm_lang$core$Native_Utils.eq(vanishing, _user$project$Types$RfidHelper) ? {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				sceneModel,
				{
					state: _user$project$RfidHelper$Nominal,
					typed: '',
					rfidsToCheck: {ctor: '[]'},
					loggedAsPresent: _elm_lang$core$Set$empty
				}),
			_1: _elm_lang$core$Platform_Cmd$none
		} : {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$RfidHelper$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var model = kioskModel.rfidHelperModel;
		var _p6 = msg;
		switch (_p6.ctor) {
			case 'RH_KeyDown':
				var typed = function () {
					var _p7 = _p6._0;
					switch (_p7) {
						case 16:
							return model.typed;
						case 190:
							return '>';
						default:
							return A2(
								_elm_lang$core$Basics_ops['++'],
								model.typed,
								_elm_lang$core$String$fromChar(
									_elm_lang$core$Char$fromCode(_p7)));
					}
				}();
				var finds = A3(_elm_lang$core$Regex$find, _elm_lang$core$Regex$All, _user$project$RfidHelper$delimitedRfidNum, typed);
				if (_elm_lang$core$List$isEmpty(finds)) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{typed: typed}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var hexToInt = function (_p8) {
						return _rtfeldman$hex$Hex$fromString(
							_elm_lang$core$String$toLower(_p8));
					};
					var delimitedMatches = A2(
						_elm_lang$core$List$map,
						function (_) {
							return _.match;
						},
						finds);
					var hexMatches = A2(
						_elm_lang$core$List$map,
						_elm_lang$core$String$dropLeft(1),
						delimitedMatches);
					var resultIntMatches = A2(_elm_lang$core$List$map, hexToInt, hexMatches);
					var intMatches = A2(_elm_lang$core$List$filterMap, _elm_lang$core$Result$toMaybe, resultIntMatches);
					var newRfidsToCheck = _elm_community$list_extra$List_Extra$unique(
						A2(_elm_lang$core$Basics_ops['++'], model.rfidsToCheck, intMatches));
					return A3(
						_user$project$RfidHelper$checkAnRfid,
						kioskModel,
						_elm_lang$core$Native_Utils.update(
							model,
							{typed: typed, rfidsToCheck: newRfidsToCheck}),
						xis);
				}
			case 'RH_MemberListResult':
				if (_p6._0.ctor === 'Ok') {
					var _p9 = _p6._0._0.results;
					if (_p9.ctor === '[]') {
						return A3(
							_user$project$RfidHelper$checkAnRfid,
							kioskModel,
							_elm_lang$core$Native_Utils.update(
								model,
								{
									state: _user$project$RfidHelper$FoundRfidToBe(false)
								}),
							xis);
					} else {
						if (_p9._1.ctor === '[]') {
							var _p11 = _p9._0;
							var newModel = _elm_lang$core$Native_Utils.update(
								model,
								{
									state: _user$project$RfidHelper$Nominal,
									rfidsToCheck: {ctor: '[]'},
									typed: '',
									loggedAsPresent: A2(_elm_lang$core$Set$insert, _p11.id, model.loggedAsPresent)
								});
							var cmd3 = _user$project$RfidHelper$popThisScene(kioskModel);
							var cmd2 = A2(_elm_lang$core$Set$member, _p11.id, model.loggedAsPresent) ? _elm_lang$core$Platform_Cmd$none : A2(
								xis.createVisitEvent,
								{
									who: xis.memberUrl(_p11.id),
									when: kioskModel.currTime,
									eventType: _user$project$XisRestApi$VET_Present,
									method: _user$project$XisRestApi$VEM_FrontDesk,
									reason: _elm_lang$core$Maybe$Nothing
								},
								function (_p10) {
									return _user$project$Types$RfidHelperVector(
										_user$project$Types$RH_MemberPresentResult(_p10));
								});
							var cmd1 = _user$project$RfidHelper$send(
								model.clientsMemberVector(
									_elm_lang$core$Result$Ok(_p11)));
							return {
								ctor: '_Tuple2',
								_0: newModel,
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: cmd1,
										_1: {
											ctor: '::',
											_0: cmd2,
											_1: {
												ctor: '::',
												_0: cmd3,
												_1: {ctor: '[]'}
											}
										}
									})
							};
						} else {
							return A3(
								_user$project$RfidHelper$checkAnRfid,
								kioskModel,
								_elm_lang$core$Native_Utils.update(
									model,
									{
										state: _user$project$RfidHelper$FoundRfidToBe(false)
									}),
								xis);
						}
					}
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$RfidHelper$HitAnHttpErr(_p6._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			default:
				if (_p6._0.ctor === 'Ok') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$RfidHelper$HitAnHttpErr(_p6._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});

var _user$project$CheckInScene$sceneChipCss = function (isExactMatch) {
	return {
		ctor: '::',
		_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-left', '5px'),
		_1: {
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-right', '5px'),
			_1: {
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Options$css,
					'background-color',
					isExactMatch ? '#FFCDD2' : '#DCEDC8'),
				_1: {ctor: '[]'}
			}
		}
	};
};
var _user$project$CheckInScene$getRecentRfidsReadCmd = function (kioskModel) {
	var tagger = function (_p0) {
		return _user$project$Types$CheckInVector(
			_user$project$Types$UpdateRecentRfidsRead(_p0));
	};
	var lowerBound = kioskModel.currTime - (15 * _elm_lang$core$Time$minute);
	var filters = {
		ctor: '::',
		_0: _user$project$XisRestApi$VEF_WhenGreaterOrEquals(lowerBound),
		_1: {
			ctor: '::',
			_0: _user$project$XisRestApi$VEF_EventMethodEquals(_user$project$XisRestApi$VEM_Rfid),
			_1: {ctor: '[]'}
		}
	};
	return A2(kioskModel.xisSession.listVisitEvents, filters, tagger);
};
var _user$project$CheckInScene$rfidWasSwiped = F2(
	function (kioskModel, result) {
		var sceneModel = kioskModel.checkInModel;
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					sceneModel,
					{
						badNews: {ctor: '[]'}
					}),
				_1: _user$project$Wizard_SceneUtils$send(
					_user$project$Types$ReasonForVisitVector(
						_user$project$Types$R4V_Segue(_p1._0)))
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					sceneModel,
					{
						badNews: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(_p1._0),
							_1: {ctor: '[]'}
						}
					}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});
var _user$project$CheckInScene$tick = F2(
	function (time, kioskModel) {
		var visible = A2(_user$project$Wizard_SceneUtils$sceneIsVisible, kioskModel, _user$project$Types$CheckIn);
		var inc = visible ? 1 : 0;
		var sceneModel = kioskModel.checkInModel;
		var cmd1 = (visible && _elm_lang$core$String$isEmpty(sceneModel.flexId)) ? _user$project$CheckInScene$getRecentRfidsReadCmd(kioskModel) : _elm_lang$core$Platform_Cmd$none;
		var cmd = visible ? cmd1 : _elm_lang$core$Platform_Cmd$none;
		return {ctor: '_Tuple2', _0: sceneModel, _1: cmd};
	});
var _user$project$CheckInScene$idxCheckInScene = _user$project$Types$mdlIdBase(_user$project$Types$CheckIn);
var _user$project$CheckInScene$idxFlexId = {
	ctor: '::',
	_0: _user$project$CheckInScene$idxCheckInScene,
	_1: {
		ctor: '::',
		_0: 1,
		_1: {ctor: '[]'}
	}
};
var _user$project$CheckInScene$view = function (kioskModel) {
	var clickMsg = function (m) {
		return _user$project$Types$CheckInVector(
			_user$project$Types$CI_UpdateMember(
				_elm_lang$core$Result$Ok(m)));
	};
	var sceneModel = kioskModel.checkInModel;
	var isLastNameMatch = function (m) {
		return A2(_elm_lang$core$List$member, m, sceneModel.lastNameMatches_EQ);
	};
	var isUserNameMatch = function (m) {
		return A2(_elm_lang$core$List$member, m, sceneModel.userNameMatches_EQ);
	};
	var isExactMatch = function (m) {
		return isLastNameMatch(m) || isUserNameMatch(m);
	};
	var acctToChip = function (m) {
		return A2(
			_debois$elm_mdl$Material_Chip$button,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Options$onClick(
						clickMsg(m)),
					_1: {ctor: '[]'}
				},
				_user$project$CheckInScene$sceneChipCss(
					isExactMatch(m))),
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Chip$content,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(m.data.userName),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	};
	var matches = _elm_lang$core$String$isEmpty(sceneModel.flexId) ? sceneModel.recentRfidArrivals : function (_p2) {
		return A2(
			_elm_community$list_extra$List_Extra$uniqueBy,
			function (_) {
				return _.id;
			},
			_elm_lang$core$List$concat(_p2));
	}(
		{
			ctor: '::',
			_0: sceneModel.userNameMatches_SW,
			_1: {
				ctor: '::',
				_0: sceneModel.lastNameMatches_SW,
				_1: {
					ctor: '::',
					_0: sceneModel.userNameMatches_EQ,
					_1: {
						ctor: '::',
						_0: sceneModel.lastNameMatches_EQ,
						_1: {ctor: '[]'}
					}
				}
			}
		});
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		'Let\'s Get You Checked-In!',
		'Who are you?',
		A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			_elm_lang$core$List$concat(
				{
					ctor: '::',
					_0: {
						ctor: '::',
						_0: A5(
							_user$project$Wizard_SceneUtils$sceneTextField,
							kioskModel,
							_user$project$CheckInScene$idxFlexId,
							'Enter your Userid or Last Name',
							sceneModel.flexId,
							function (_p3) {
								return _user$project$Types$CheckInVector(
									_user$project$Types$CI_UpdateFlexId(_p3));
							}),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(0),
							_1: {ctor: '[]'}
						}
					},
					_1: {
						ctor: '::',
						_0: (_elm_lang$core$Native_Utils.cmp(
							_elm_lang$core$List$length(matches),
							0) > 0) ? {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(50),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('Tap your userid if you see it below:'),
								_1: {
									ctor: '::',
									_0: _user$project$Wizard_SceneUtils$vspace(20),
									_1: {ctor: '[]'}
								}
							}
						} : {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(0),
							_1: {ctor: '[]'}
						},
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$core$List$map, acctToChip, matches),
							_1: {
								ctor: '::',
								_0: {
									ctor: '::',
									_0: _user$project$Wizard_SceneUtils$vspace(
										(_elm_lang$core$Native_Utils.cmp(
											_elm_lang$core$List$length(sceneModel.badNews),
											0) > 0) ? 40 : 0),
									_1: {ctor: '[]'}
								},
								_1: {ctor: '[]'}
							}
						}
					}
				})),
		{ctor: '[]'},
		sceneModel.badNews);
};
var _user$project$CheckInScene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.checkInModel;
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'CI_UpdateFlexId':
				var _p9 = _p4._0;
				if (A2(_elm_lang$core$Regex$contains, _user$project$RfidHelper$rfidCharsOnly, _p9)) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{flexId: _p9}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					if (_elm_lang$core$Native_Utils.cmp(
						_elm_lang$core$String$length(_p9),
						2) > 0) {
						var djId = _user$project$XisRestApi$djangoizeId(_p9);
						var cmd1 = A2(
							xis.listMembers,
							{
								ctor: '::',
								_0: _user$project$XisRestApi$UsernameStartsWith(djId),
								_1: {
									ctor: '::',
									_0: _user$project$XisRestApi$IsActive(true),
									_1: {ctor: '[]'}
								}
							},
							function (_p5) {
								return _user$project$Types$CheckInVector(
									A2(_user$project$Types$UsernamesStartingWith, _p9, _p5));
							});
						var cmd2 = A2(
							xis.listMembers,
							{
								ctor: '::',
								_0: _user$project$XisRestApi$LastNameStartsWith(djId),
								_1: {
									ctor: '::',
									_0: _user$project$XisRestApi$IsActive(true),
									_1: {ctor: '[]'}
								}
							},
							function (_p6) {
								return _user$project$Types$CheckInVector(
									A2(_user$project$Types$LastNamesStartingWith, _p9, _p6));
							});
						var cmd3 = A2(
							xis.listMembers,
							{
								ctor: '::',
								_0: _user$project$XisRestApi$UsernameEquals(djId),
								_1: {
									ctor: '::',
									_0: _user$project$XisRestApi$IsActive(true),
									_1: {ctor: '[]'}
								}
							},
							function (_p7) {
								return _user$project$Types$CheckInVector(
									A2(_user$project$Types$UsernamesEqualTo, _p9, _p7));
							});
						var cmd4 = A2(
							xis.listMembers,
							{
								ctor: '::',
								_0: _user$project$XisRestApi$LastNameEquals(djId),
								_1: {
									ctor: '::',
									_0: _user$project$XisRestApi$IsActive(true),
									_1: {ctor: '[]'}
								}
							},
							function (_p8) {
								return _user$project$Types$CheckInVector(
									A2(_user$project$Types$LastNamesEqualTo, _p9, _p8));
							});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								sceneModel,
								{flexId: _p9}),
							_1: _elm_lang$core$Platform_Cmd$batch(
								{
									ctor: '::',
									_0: cmd1,
									_1: {
										ctor: '::',
										_0: cmd2,
										_1: {
											ctor: '::',
											_0: cmd3,
											_1: {
												ctor: '::',
												_0: cmd4,
												_1: {ctor: '[]'}
											}
										}
									}
								})
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								sceneModel,
								{
									flexId: _p9,
									userNameMatches_SW: {ctor: '[]'},
									lastNameMatches_SW: {ctor: '[]'}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
			case 'UsernamesStartingWith':
				if (_p4._1.ctor === 'Ok') {
					var _p10 = _p4._1._0.count;
					return ((_elm_lang$core$Native_Utils.cmp(_p10, 20) < 0) && (_elm_lang$core$Native_Utils.cmp(
						_p10,
						_elm_lang$core$List$length(sceneModel.userNameMatches_SW)) > 0)) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								userNameMatches_SW: _p4._1._0.results,
								badNews: {ctor: '[]'}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					} : {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(_p4._1._0),
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'UsernamesEqualTo':
				if (_p4._1.ctor === 'Ok') {
					return _elm_lang$core$Native_Utils.eq(_p4._0, sceneModel.flexId) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								userNameMatches_EQ: _p4._1._0.results,
								badNews: {ctor: '[]'}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					} : {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(_p4._1._0),
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'LastNamesStartingWith':
				if (_p4._1.ctor === 'Ok') {
					var _p11 = _p4._1._0.count;
					return ((_elm_lang$core$Native_Utils.cmp(_p11, 20) < 0) && (_elm_lang$core$Native_Utils.cmp(
						_p11,
						_elm_lang$core$List$length(sceneModel.lastNameMatches_SW)) > 0)) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								lastNameMatches_SW: _p4._1._0.results,
								badNews: {ctor: '[]'}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					} : {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(_p4._1._0),
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'LastNamesEqualTo':
				if (_p4._1.ctor === 'Ok') {
					return _elm_lang$core$Native_Utils.eq(_p4._0, sceneModel.flexId) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								lastNameMatches_EQ: _p4._1._0.results,
								badNews: {ctor: '[]'}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					} : {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(_p4._1._0),
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'UpdateRecentRfidsRead':
				if (_p4._0.ctor === 'Ok') {
					var recent = A2(
						_elm_lang$core$List$map,
						function (_p12) {
							return function (_) {
								return _.who;
							}(
								function (_) {
									return _.data;
								}(_p12));
						},
						_p4._0._0.results);
					var unique = A2(
						_elm_community$list_extra$List_Extra$uniqueBy,
						function (_) {
							return _.id;
						},
						recent);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{recentRfidArrivals: unique}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(_p4._0._0),
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			default:
				if (_p4._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {ctor: '[]'}
							}),
						_1: _user$project$Wizard_SceneUtils$send(
							_user$project$Types$ReasonForVisitVector(
								_user$project$Types$R4V_Segue(_p4._0._0)))
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(_p4._0._0),
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _user$project$CheckInScene$sceneWillAppear = F2(
	function (kioskModel, appearingScene) {
		if (_elm_lang$core$Native_Utils.eq(appearingScene, _user$project$Types$CheckIn)) {
			var cmd2 = _user$project$Wizard_SceneUtils$focusOnIndex(_user$project$CheckInScene$idxFlexId);
			var cmd1 = _user$project$CheckInScene$getRecentRfidsReadCmd(kioskModel);
			return {
				ctor: '_Tuple2',
				_0: kioskModel.checkInModel,
				_1: _elm_lang$core$Platform_Cmd$batch(
					{
						ctor: '::',
						_0: cmd1,
						_1: {
							ctor: '::',
							_0: cmd2,
							_1: {ctor: '[]'}
						}
					})
			};
		} else {
			return {ctor: '_Tuple2', _0: kioskModel.checkInModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$CheckInScene$init = function (flags) {
	var model = {
		flexId: '',
		userNameMatches_SW: {ctor: '[]'},
		userNameMatches_EQ: {ctor: '[]'},
		lastNameMatches_SW: {ctor: '[]'},
		lastNameMatches_EQ: {ctor: '[]'},
		recentRfidArrivals: {ctor: '[]'},
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$CheckInScene$CheckInModel = F7(
	function (a, b, c, d, e, f, g) {
		return {flexId: a, userNameMatches_SW: b, userNameMatches_EQ: c, lastNameMatches_SW: d, lastNameMatches_EQ: e, recentRfidArrivals: f, badNews: g};
	});

var _user$project$CheckOutDoneScene$view = function (kioskModel) {
	var sceneModel = kioskModel.checkOutDoneModel;
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		'You\'re Checked Out',
		'Have a Nice Day!',
		_user$project$Wizard_SceneUtils$vspace(40),
		sceneModel.logOpDone ? {
			ctor: '::',
			_0: A3(_user$project$Wizard_SceneUtils$ButtonSpec, 'Ok', _user$project$Wizard_SceneUtils$msgForReset, true),
			_1: {ctor: '[]'}
		} : {ctor: '[]'},
		{ctor: '[]'});
};
var _user$project$CheckOutDoneScene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.checkOutDoneModel;
		var _p0 = msg;
		if (_p0.ctor === 'COD_Segue') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					sceneModel,
					{
						member: _elm_lang$core$Maybe$Just(_p0._0)
					}),
				_1: _user$project$Wizard_SceneUtils$send(
					_user$project$Types$WizardVector(
						_user$project$Types$Push(_user$project$Types$CheckOutDone)))
			};
		} else {
			if (_p0._0.ctor === 'Ok') {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{logOpDone: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			} else {
				var _p1 = A2(
					_elm_lang$core$Debug$log,
					'COD',
					_elm_lang$core$Basics$toString(_p0._0._0));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{logOpDone: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			}
		}
	});
var _user$project$CheckOutDoneScene$sceneWillAppear = F3(
	function (kioskModel, appearing, vanishing) {
		var sceneModel = kioskModel.checkOutDoneModel;
		if (_elm_lang$core$Native_Utils.eq(appearing, _user$project$Types$CheckOutDone)) {
			var _p2 = sceneModel.member;
			if (_p2.ctor === 'Nothing') {
				return {
					ctor: '_Tuple2',
					_0: sceneModel,
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$ErrorVector(
							_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
				};
			} else {
				var tagger = function (_p3) {
					return _user$project$Types$CheckOutDoneVector(
						_user$project$Types$COD_LogCheckOutResult(_p3));
				};
				var xis = kioskModel.xisSession;
				var newVisitEvent = {
					who: xis.memberUrl(_p2._0.id),
					when: kioskModel.currTime,
					eventType: _user$project$XisRestApi$VET_Departure,
					reason: _elm_lang$core$Maybe$Nothing,
					method: _user$project$XisRestApi$VEM_FrontDesk
				};
				var recordVisitCmd = A2(xis.createVisitEvent, newVisitEvent, tagger);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{logOpDone: false}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: recordVisitCmd,
							_1: {
								ctor: '::',
								_0: _user$project$Wizard_SceneUtils$rebase,
								_1: {ctor: '[]'}
							}
						})
				};
			}
		} else {
			return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$CheckOutDoneScene$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: {member: _elm_lang$core$Maybe$Nothing, logOpDone: false},
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$CheckOutDoneScene$CheckOutDoneModel = F2(
	function (a, b) {
		return {member: a, logOpDone: b};
	});

var _user$project$CheckOutScene$sceneChipCss = {
	ctor: '::',
	_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-left', '3px'),
	_1: {
		ctor: '::',
		_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-right', '3px'),
		_1: {ctor: '[]'}
	}
};
var _user$project$CheckOutScene$view = function (kioskModel) {
	var memb2chip = function (memb) {
		return A2(
			_debois$elm_mdl$Material_Chip$button,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Options$onClick(
					_user$project$Types$CheckOutVector(
						_user$project$Types$CO_MemberChosen(memb))),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Chip$content,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(memb.data.userName),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	};
	var sceneModel = kioskModel.checkOutModel;
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		'Checking Out',
		'Tap Your Userid, Below',
		A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			_elm_lang$core$List$concat(
				{
					ctor: '::',
					_0: A2(_elm_lang$core$List$map, memb2chip, sceneModel.checkedIn),
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(
								(_elm_lang$core$Native_Utils.cmp(
									_elm_lang$core$List$length(sceneModel.badNews),
									0) > 0) ? 40 : 0),
							_1: {ctor: '[]'}
						},
						_1: {ctor: '[]'}
					}
				})),
		{ctor: '[]'},
		sceneModel.badNews);
};
var _user$project$CheckOutScene$checkedInMembers = function (events) {
	var stillHereFilter = function (x) {
		return A2(
			_elm_lang$core$List$member,
			x.data.eventType,
			{
				ctor: '::',
				_0: _user$project$XisRestApi$VET_Arrival,
				_1: {
					ctor: '::',
					_0: _user$project$XisRestApi$VET_Present,
					_1: {ctor: '[]'}
				}
			});
	};
	var whoId = function (_p0) {
		return function (_) {
			return _.id;
		}(
			function (_) {
				return _.who;
			}(
				function (_) {
					return _.data;
				}(_p0)));
	};
	var visitGrouper = F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(
				whoId(x),
				whoId(y));
		});
	return A2(
		_elm_lang$core$List$map,
		function (_p1) {
			return function (_) {
				return _.who;
			}(
				function (_) {
					return _.data;
				}(_p1));
		},
		A2(
			_elm_lang$core$List$filter,
			stillHereFilter,
			A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				_elm_community$maybe_extra$Maybe_Extra$combine(
					A2(
						_elm_lang$core$List$map,
						_elm_community$list_extra$List_Extra$maximumBy(
							function (_p2) {
								return function (_) {
									return _.when;
								}(
									function (_) {
										return _.data;
									}(_p2));
							}),
						A2(
							_elm_community$list_extra$List_Extra$groupWhile,
							visitGrouper,
							A2(_elm_lang$core$List$sortBy, whoId, events)))))));
};
var _user$project$CheckOutScene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.checkOutModel;
		var _p3 = msg;
		if (_p3.ctor === 'CO_MemberChosen') {
			return {
				ctor: '_Tuple2',
				_0: sceneModel,
				_1: _user$project$Wizard_SceneUtils$send(
					_user$project$Types$OldBusinessVector(
						A2(_user$project$Types$OB_SegueA, _user$project$Types$CheckOutSession, _p3._0)))
			};
		} else {
			if (_p3._0.ctor === 'Ok') {
				var ves = A2(_elm_lang$core$Basics_ops['++'], sceneModel.visitEvents, _p3._0._0.results);
				var newModel = _elm_lang$core$Native_Utils.update(
					sceneModel,
					{visitEvents: ves});
				var _p4 = _p3._0._0.next;
				if (_p4.ctor === 'Just') {
					return {
						ctor: '_Tuple2',
						_0: newModel,
						_1: A2(
							xis.moreVisitEvents,
							_p4._0,
							function (_p5) {
								return _user$project$Types$CheckOutVector(
									_user$project$Types$CO_AccVisitEvents(_p5));
							})
					};
				} else {
					var sorter = _elm_lang$core$List$sortBy(
						function (_p6) {
							return _elm_lang$core$String$toLower(
								function (_) {
									return _.userName;
								}(
									function (_) {
										return _.data;
									}(_p6)));
						});
					var checkedIn = sorter(
						_user$project$CheckOutScene$checkedInMembers(newModel.visitEvents));
					var newModel2 = _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							checkedIn: checkedIn,
							visitEvents: {ctor: '[]'}
						});
					return {ctor: '_Tuple2', _0: newModel2, _1: _elm_lang$core$Platform_Cmd$none};
				}
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							badNews: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(_p3._0._0),
								_1: {ctor: '[]'}
							}
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			}
		}
	});
var _user$project$CheckOutScene$rfidWasSwiped = F2(
	function (kioskModel, result) {
		var _p7 = result;
		if (_p7.ctor === 'Ok') {
			return A2(
				_user$project$CheckOutScene$update,
				_user$project$Types$CO_MemberChosen(_p7._0),
				kioskModel);
		} else {
			var sceneModel = kioskModel.checkOutModel;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					sceneModel,
					{
						badNews: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(_p7._0),
							_1: {ctor: '[]'}
						}
					}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});
var _user$project$CheckOutScene$sceneWillAppear = F2(
	function (kioskModel, appearingScene) {
		if (_elm_lang$core$Native_Utils.eq(appearingScene, _user$project$Types$CheckOut)) {
			var tagger = function (_p8) {
				return _user$project$Types$CheckOutVector(
					_user$project$Types$CO_AccVisitEvents(_p8));
			};
			var lowerBound = kioskModel.currTime - (12 * _user$project$Duration$ticksPerHour);
			var filters = {
				ctor: '::',
				_0: _user$project$XisRestApi$VEF_WhenGreaterOrEquals(lowerBound),
				_1: {ctor: '[]'}
			};
			var cmd = A2(kioskModel.xisSession.listVisitEvents, filters, tagger);
			return {ctor: '_Tuple2', _0: kioskModel.checkOutModel, _1: cmd};
		} else {
			return {ctor: '_Tuple2', _0: kioskModel.checkOutModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$CheckOutScene$init = function (flags) {
	var model = {
		visitEvents: {ctor: '[]'},
		checkedIn: {ctor: '[]'},
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$CheckOutScene$CheckOutModel = F3(
	function (a, b, c) {
		return {visitEvents: a, checkedIn: b, badNews: c};
	});

var _user$project$Fetchable$withDefault = F2(
	function ($default, fetchable) {
		var _p0 = fetchable;
		switch (_p0.ctor) {
			case 'Pending':
				return $default;
			case 'Received':
				return _p0._0;
			default:
				return $default;
		}
	});
var _user$project$Fetchable$received = function (x) {
	var _p1 = x;
	if (_p1.ctor === 'Received') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Fetchable$Failed = function (a) {
	return {ctor: 'Failed', _0: a};
};
var _user$project$Fetchable$Received = function (a) {
	return {ctor: 'Received', _0: a};
};
var _user$project$Fetchable$Pending = {ctor: 'Pending'};
var _user$project$Fetchable$map = F2(
	function (xform, fetchable) {
		var _p2 = fetchable;
		switch (_p2.ctor) {
			case 'Pending':
				return _user$project$Fetchable$Pending;
			case 'Received':
				return _user$project$Fetchable$Received(
					xform(_p2._0));
			default:
				return _user$project$Fetchable$Failed(_p2._0);
		}
	});

var _user$project$ReasonForVisitScene$reasonDivStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'background-color', '#eeeeee'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'padding', '10px'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin', '15px'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'border-radius', '20px'),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$ReasonForVisitScene$reasonListStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'width', '450px'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-left', 'auto'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-right', 'auto'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'text-align', 'left'),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$ReasonForVisitScene$reasonString = F2(
	function (kioskModel, reason) {
		var _p0 = reason;
		switch (_p0.ctor) {
			case 'VER_Class':
				return 'Attending a class or workshop';
			case 'VER_Club':
				return 'Club activity (FRC, VEX, PEC)';
			case 'VER_Curious':
				return A2(_elm_lang$core$Basics_ops['++'], 'Checking out ', kioskModel.flags.orgName);
			case 'VER_Guest':
				return 'Guest of a paying member';
			case 'VER_Member':
				return 'Membership privileges';
			case 'VER_Other':
				return 'Other';
			case 'VER_PublicAccess':
				return 'Free public access (Open Hack)';
			default:
				return 'Volunteering or staffing';
		}
	});
var _user$project$ReasonForVisitScene$makeActivityList = F2(
	function (kioskModel, reasons) {
		var reasonMsg = function (reason) {
			return _user$project$Types$ReasonForVisitVector(
				_user$project$Types$UpdateReasonForVisit(reason));
		};
		var sceneModel = kioskModel.reasonForVisitModel;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$ReasonForVisitScene$reasonListStyle,
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(30),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$List$indexedMap,
					F2(
						function (index, reason) {
							return A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _user$project$ReasonForVisitScene$reasonDivStyle,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A5(
										_debois$elm_mdl$Material_Toggles$radio,
										_user$project$Types$MdlVector,
										{
											ctor: '::',
											_0: _user$project$Types$mdlIdBase(_user$project$Types$ReasonForVisit) + index,
											_1: {ctor: '[]'}
										},
										kioskModel.mdl,
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Toggles$value(
												function () {
													var _p1 = sceneModel.reasonForVisit;
													if (_p1.ctor === 'Nothing') {
														return false;
													} else {
														return _elm_lang$core$Native_Utils.eq(_p1._0, reason);
													}
												}()),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Options$onToggle(
													reasonMsg(reason)),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_user$project$ReasonForVisitScene$reasonString, kioskModel, reason)),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								});
						}),
					reasons)));
	});
var _user$project$ReasonForVisitScene$view = function (kioskModel) {
	var xis = kioskModel.xisSession;
	var sceneModel = kioskModel.reasonForVisitModel;
	var allBlockTypes = function () {
		var _p2 = sceneModel.allTypes;
		if (_p2.ctor === 'Received') {
			return _p2._0;
		} else {
			return {ctor: '[]'};
		}
	}();
	var isPublicAccessTime = function () {
		var _p3 = sceneModel.nowBlock;
		if ((_p3.ctor === 'Received') && (_p3._0.ctor === 'Just')) {
			var _p4 = _p3._0._0;
			var wtf = A3(xis.blockHasType, 'Women, Trans, Femme', allBlockTypes, _p4);
			var openshop = A3(xis.blockHasType, 'Open Shop', allBlockTypes, _p4);
			return openshop || wtf;
		} else {
			return false;
		}
	}();
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		'Today\'s Activity',
		'Let us know what you\'ll be doing today',
		A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_user$project$ReasonForVisitScene$makeActivityList,
					kioskModel,
					{
						ctor: '::',
						_0: _user$project$XisRestApi$VER_Class,
						_1: {
							ctor: '::',
							_0: _user$project$XisRestApi$VER_Curious,
							_1: {
								ctor: '::',
								_0: isPublicAccessTime ? _user$project$XisRestApi$VER_PublicAccess : _user$project$XisRestApi$VER_Member,
								_1: {
									ctor: '::',
									_0: _user$project$XisRestApi$VER_Club,
									_1: {
										ctor: '::',
										_0: _user$project$XisRestApi$VER_Volunteer,
										_1: {
											ctor: '::',
											_0: _user$project$XisRestApi$VER_Guest,
											_1: {
												ctor: '::',
												_0: _user$project$XisRestApi$VER_Other,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}),
		{
			ctor: '::',
			_0: A3(
				_user$project$Wizard_SceneUtils$ButtonSpec,
				'OK',
				_user$project$Types$ReasonForVisitVector(_user$project$Types$ValidateReason),
				true),
			_1: {ctor: '[]'}
		},
		sceneModel.badNews);
};
var _user$project$ReasonForVisitScene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.reasonForVisitModel;
		var _p5 = msg;
		switch (_p5.ctor) {
			case 'R4V_Segue':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							member: _elm_lang$core$Maybe$Just(_p5._0)
						}),
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$WizardVector(
							_user$project$Types$Push(_user$project$Types$ReasonForVisit)))
				};
			case 'UpdateReasonForVisit':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							reasonForVisit: _elm_lang$core$Maybe$Just(_p5._0),
							badNews: {ctor: '[]'}
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ValidateReason':
				var _p6 = sceneModel.reasonForVisit;
				if (_p6.ctor === 'Nothing') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: 'You must choose an activity type.',
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var cmd = function () {
						var _p7 = sceneModel.member;
						if (_p7.ctor === 'Just') {
							return A2(
								xis.createVisitEvent,
								{
									who: xis.memberUrl(_p7._0.id),
									when: kioskModel.currTime,
									eventType: _user$project$XisRestApi$VET_Arrival,
									reason: _elm_lang$core$Maybe$Just(_p6._0),
									method: _user$project$XisRestApi$VEM_FrontDesk
								},
								function (_p8) {
									return _user$project$Types$ReasonForVisitVector(
										_user$project$Types$LogCheckInResult(_p8));
								});
						} else {
							return _user$project$Wizard_SceneUtils$send(
								_user$project$Types$ErrorVector(
									_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)));
						}
					}();
					return {ctor: '_Tuple2', _0: sceneModel, _1: cmd};
				}
			case 'LogCheckInResult':
				if (_p5._0.ctor === 'Ok') {
					var _p9 = sceneModel.reasonForVisit;
					_v7_2:
					do {
						if (_p9.ctor === 'Just') {
							switch (_p9._0.ctor) {
								case 'VER_Volunteer':
									return {
										ctor: '_Tuple2',
										_0: sceneModel,
										_1: function () {
											var _p10 = sceneModel.member;
											if (_p10.ctor === 'Just') {
												return _user$project$Wizard_SceneUtils$send(
													_user$project$Types$TaskListVector(
														_user$project$Types$TL_Segue(_p10._0)));
											} else {
												return _user$project$Wizard_SceneUtils$send(
													_user$project$Types$ErrorVector(
														_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)));
											}
										}()
									};
								case 'VER_Member':
									return {
										ctor: '_Tuple2',
										_0: sceneModel,
										_1: function () {
											var _p11 = {ctor: '_Tuple3', _0: sceneModel.member, _1: sceneModel.nowBlock, _2: sceneModel.allTypes};
											if ((((_p11.ctor === '_Tuple3') && (_p11._0.ctor === 'Just')) && (_p11._1.ctor === 'Received')) && (_p11._2.ctor === 'Received')) {
												return _user$project$Wizard_SceneUtils$send(
													_user$project$Types$AuthorizeEntryVector(
														A3(_user$project$Types$AE_Segue, _p11._0._0, _p11._1._0, _p11._2._0)));
											} else {
												return _user$project$Wizard_SceneUtils$send(
													_user$project$Types$ErrorVector(
														_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)));
											}
										}()
									};
								default:
									break _v7_2;
							}
						} else {
							break _v7_2;
						}
					} while(false);
					return {
						ctor: '_Tuple2',
						_0: sceneModel,
						_1: function () {
							var _p12 = sceneModel.member;
							if (_p12.ctor === 'Just') {
								return _user$project$Wizard_SceneUtils$send(
									_user$project$Types$OldBusinessVector(
										A2(_user$project$Types$OB_SegueA, _user$project$Types$CheckInSession, _p12._0)));
							} else {
								return _user$project$Wizard_SceneUtils$send(
									_user$project$Types$ErrorVector(
										_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)));
							}
						}()
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(_p5._0._0),
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'UpdateTimeBlocks':
				if (_p5._0.ctor === 'Ok') {
					var nowBlocks = A2(
						_elm_lang$core$List$filter,
						xis.pitInBlock(kioskModel.currTime),
						_p5._0._0.results);
					var nowBlock = _elm_lang$core$List$head(nowBlocks);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								nowBlock: _user$project$Fetchable$Received(nowBlock)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var msg = A2(
						_elm_lang$core$Debug$log,
						'Error getting time blocks',
						_elm_lang$core$Basics$toString(_p5._0._0));
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								nowBlock: _user$project$Fetchable$Failed(msg)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			default:
				if (_p5._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								allTypes: _user$project$Fetchable$Received(_p5._0._0.results)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var msg = A2(
						_elm_lang$core$Debug$log,
						'Error getting time block types',
						_elm_lang$core$Basics$toString(_p5._0._0));
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								allTypes: _user$project$Fetchable$Failed(msg)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _user$project$ReasonForVisitScene$getTimeBlocks = function (kioskModel) {
	var xis = kioskModel.xisSession;
	var cmd1 = xis.listTimeBlocks(
		function (_p13) {
			return _user$project$Types$ReasonForVisitVector(
				_user$project$Types$UpdateTimeBlocks(_p13));
		});
	var cmd2 = xis.listTimeBlockTypes(
		function (_p14) {
			return _user$project$Types$ReasonForVisitVector(
				_user$project$Types$UpdateTimeBlockTypes(_p14));
		});
	var sceneModel = kioskModel.reasonForVisitModel;
	return {
		ctor: '_Tuple2',
		_0: sceneModel,
		_1: _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: cmd1,
				_1: {
					ctor: '::',
					_0: cmd2,
					_1: {ctor: '[]'}
				}
			})
	};
};
var _user$project$ReasonForVisitScene$sceneWillAppear = F3(
	function (kioskModel, appearingScene, vanishingScene) {
		var sceneModel = kioskModel.reasonForVisitModel;
		var _p15 = appearingScene;
		switch (_p15.ctor) {
			case 'Welcome':
				return _user$project$ReasonForVisitScene$getTimeBlocks(kioskModel);
			case 'WelcomeForRfid':
				return _user$project$ReasonForVisitScene$getTimeBlocks(kioskModel);
			default:
				return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$ReasonForVisitScene$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: {
			member: _elm_lang$core$Maybe$Nothing,
			nowBlock: _user$project$Fetchable$Pending,
			allTypes: _user$project$Fetchable$Pending,
			reasonForVisit: _elm_lang$core$Maybe$Nothing,
			badNews: {ctor: '[]'}
		},
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$ReasonForVisitScene$ReasonForVisitModel = F5(
	function (a, b, c, d, e) {
		return {member: a, nowBlock: b, allTypes: c, reasonForVisit: d, badNews: e};
	});

var _user$project$NewMemberScene$emailRegex = function () {
	var dchar = '[a-z0-9-]';
	var alnum = '[a-z0-9]';
	var echar = '[a-z0-9!#$%&\'*+/=?^_`{|}~-]';
	var emailRegexStr = A3(
		_elm_community$string_extra$String_Extra$replace,
		'D',
		dchar,
		A3(
			_elm_community$string_extra$String_Extra$replace,
			'A',
			alnum,
			A3(_elm_community$string_extra$String_Extra$replace, 'E', echar, '^E+(?:\\.E+)*@(?:A(?:D*A)?\\.)+A(?:D*A)?$')));
	return _elm_lang$core$Regex$regex(emailRegexStr);
}();
var _user$project$NewMemberScene$idxNewMemberScene = _user$project$Types$mdlIdBase(_user$project$Types$NewMember);
var _user$project$NewMemberScene$idxUnder18 = {
	ctor: '::',
	_0: _user$project$NewMemberScene$idxNewMemberScene,
	_1: {
		ctor: '::',
		_0: 1,
		_1: {ctor: '[]'}
	}
};
var _user$project$NewMemberScene$idxOver18 = {
	ctor: '::',
	_0: _user$project$NewMemberScene$idxNewMemberScene,
	_1: {
		ctor: '::',
		_0: 2,
		_1: {ctor: '[]'}
	}
};
var _user$project$NewMemberScene$ageChoice = function (kioskModel) {
	var sceneModel = kioskModel.newMemberModel;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _user$project$Wizard_SceneUtils$vspace(40),
			_1: {
				ctor: '::',
				_0: A5(
					_debois$elm_mdl$Material_Toggles$radio,
					_user$project$Types$MdlVector,
					_user$project$NewMemberScene$idxOver18,
					kioskModel.mdl,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Toggles$value(
							A2(_elm_lang$core$Maybe$withDefault, false, sceneModel.isAdult)),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$onToggle(
								_user$project$Types$NewMemberVector(
									_user$project$Types$ToggleIsAdult(false))),
							_1: {
								ctor: '::',
								_0: _user$project$Wizard_SceneUtils$option_NoTabIndex,
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('I\'m aged 18 or older'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(30),
					_1: {
						ctor: '::',
						_0: A5(
							_debois$elm_mdl$Material_Toggles$radio,
							_user$project$Types$MdlVector,
							_user$project$NewMemberScene$idxUnder18,
							kioskModel.mdl,
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Toggles$value(
									function () {
										var _p0 = sceneModel.isAdult;
										if (_p0.ctor === 'Nothing') {
											return false;
										} else {
											return !_p0._0;
										}
									}()),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onToggle(
										function (_p1) {
											return _user$project$Types$NewMemberVector(
												_user$project$Types$ToggleIsAdult(_p1));
										}(true)),
									_1: {
										ctor: '::',
										_0: _user$project$Wizard_SceneUtils$option_NoTabIndex,
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('I\'m younger than 18'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(10),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$NewMemberScene$idxFirstName = {
	ctor: '::',
	_0: _user$project$NewMemberScene$idxNewMemberScene,
	_1: {
		ctor: '::',
		_0: 3,
		_1: {ctor: '[]'}
	}
};
var _user$project$NewMemberScene$idxLastName = {
	ctor: '::',
	_0: _user$project$NewMemberScene$idxNewMemberScene,
	_1: {
		ctor: '::',
		_0: 4,
		_1: {ctor: '[]'}
	}
};
var _user$project$NewMemberScene$idxEmail = {
	ctor: '::',
	_0: _user$project$NewMemberScene$idxNewMemberScene,
	_1: {
		ctor: '::',
		_0: 5,
		_1: {ctor: '[]'}
	}
};
var _user$project$NewMemberScene$view = function (kioskModel) {
	var sceneModel = kioskModel.newMemberModel;
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		'Let\'s Create an Account!',
		'Please tell us about yourself:',
		A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A5(
					_user$project$Wizard_SceneUtils$sceneTextField,
					kioskModel,
					_user$project$NewMemberScene$idxFirstName,
					'Enter your first name here',
					sceneModel.firstName,
					function (_p2) {
						return _user$project$Types$NewMemberVector(
							_user$project$Types$UpdateFirstName(_p2));
					}),
				_1: {
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(0),
					_1: {
						ctor: '::',
						_0: A5(
							_user$project$Wizard_SceneUtils$sceneTextField,
							kioskModel,
							_user$project$NewMemberScene$idxLastName,
							'Enter your last name here',
							sceneModel.lastName,
							function (_p3) {
								return _user$project$Types$NewMemberVector(
									_user$project$Types$UpdateLastName(_p3));
							}),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(0),
							_1: {
								ctor: '::',
								_0: A5(
									_user$project$Wizard_SceneUtils$sceneEmailField,
									kioskModel,
									_user$project$NewMemberScene$idxEmail,
									'Enter your email address here',
									sceneModel.email,
									function (_p4) {
										return _user$project$Types$NewMemberVector(
											_user$project$Types$UpdateEmail(_p4));
									}),
								_1: {
									ctor: '::',
									_0: _user$project$Wizard_SceneUtils$vspace(0),
									_1: {
										ctor: '::',
										_0: _user$project$NewMemberScene$ageChoice(kioskModel),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}),
		{
			ctor: '::',
			_0: A3(
				_user$project$Wizard_SceneUtils$ButtonSpec,
				'OK',
				_user$project$Types$NewMemberVector(_user$project$Types$Validate),
				true),
			_1: {ctor: '[]'}
		},
		sceneModel.badNews);
};
var _user$project$NewMemberScene$validate = function (kioskModel) {
	var norm = _elm_lang$core$String$trim;
	var xis = kioskModel.xisSession;
	var sceneModel = kioskModel.newMemberModel;
	var fname = norm(sceneModel.firstName);
	var fNameShort = _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$String$length(fname),
		0);
	var lname = norm(sceneModel.lastName);
	var lNameShort = _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$String$length(lname),
		0);
	var emailInvalid = !A2(
		_elm_lang$core$Regex$contains,
		_user$project$NewMemberScene$emailRegex,
		_elm_lang$core$String$toLower(sceneModel.email));
	var noAge = _elm_lang$core$Native_Utils.eq(sceneModel.isAdult, _elm_lang$core$Maybe$Nothing);
	var msgs = _elm_lang$core$List$concat(
		{
			ctor: '::',
			_0: fNameShort ? {
				ctor: '::',
				_0: 'Please provide your first name.',
				_1: {ctor: '[]'}
			} : {ctor: '[]'},
			_1: {
				ctor: '::',
				_0: lNameShort ? {
					ctor: '::',
					_0: 'Please provide your last name.',
					_1: {ctor: '[]'}
				} : {ctor: '[]'},
				_1: {
					ctor: '::',
					_0: emailInvalid ? {
						ctor: '::',
						_0: 'Your email address is not valid.',
						_1: {ctor: '[]'}
					} : {ctor: '[]'},
					_1: {
						ctor: '::',
						_0: noAge ? {
							ctor: '::',
							_0: 'Please specify if you are adult/minor.',
							_1: {ctor: '[]'}
						} : {ctor: '[]'},
						_1: {ctor: '[]'}
					}
				}
			}
		});
	var cmd = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(msgs),
		0) > 0) ? _elm_lang$core$Platform_Cmd$none : A2(
		xis.listMembers,
		{
			ctor: '::',
			_0: _user$project$XisRestApi$EmailEquals(sceneModel.email),
			_1: {
				ctor: '::',
				_0: _user$project$XisRestApi$IsActive(true),
				_1: {ctor: '[]'}
			}
		},
		function (_p5) {
			return _user$project$Types$NewMemberVector(
				_user$project$Types$ValidateEmailUnique(_p5));
		});
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			sceneModel,
			{badNews: msgs}),
		_1: cmd
	};
};
var _user$project$NewMemberScene$update = F2(
	function (msg, kioskModel) {
		var sceneModel = kioskModel.newMemberModel;
		var _p6 = msg;
		switch (_p6.ctor) {
			case 'NM_Segue':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							howDidYouHear: _elm_lang$core$Maybe$Just(_p6._0)
						}),
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$WizardVector(
							_user$project$Types$Push(_user$project$Types$NewMember)))
				};
			case 'UpdateFirstName':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{firstName: _p6._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateLastName':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{lastName: _p6._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateEmail':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{email: _p6._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleIsAdult':
				var newVal = _elm_lang$core$Maybe$Just(
					!A2(_elm_lang$core$Maybe$withDefault, _p6._0, sceneModel.isAdult));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{isAdult: newVal}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Validate':
				return _user$project$NewMemberScene$validate(kioskModel);
			default:
				if (_p6._0.ctor === 'Ok') {
					if (_elm_lang$core$Native_Utils.cmp(_p6._0._0.count, 0) > 0) {
						return {
							ctor: '_Tuple2',
							_0: sceneModel,
							_1: _user$project$Wizard_SceneUtils$send(
								_user$project$Types$EmailInUseVector(
									_user$project$Types$EIU_Segue(_p6._0._0.results)))
						};
					} else {
						var _p7 = {ctor: '_Tuple2', _0: sceneModel.howDidYouHear, _1: sceneModel.isAdult};
						if (((_p7.ctor === '_Tuple2') && (_p7._0.ctor === 'Just')) && (_p7._1.ctor === 'Just')) {
							return {
								ctor: '_Tuple2',
								_0: sceneModel,
								_1: _user$project$Wizard_SceneUtils$send(
									function (_p8) {
										return _user$project$Types$NewUserVector(
											_user$project$Types$NU_Segue(_p8));
									}(
										{ctor: '_Tuple5', _0: _p7._0._0, _1: sceneModel.firstName, _2: sceneModel.lastName, _3: sceneModel.email, _4: _p7._1._0}))
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: sceneModel,
								_1: _user$project$Wizard_SceneUtils$send(
									_user$project$Types$ErrorVector(
										_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
							};
						}
					}
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(_p6._0._0),
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _user$project$NewMemberScene$sceneWillAppear = F2(
	function (kioskModel, appearingScene) {
		return _elm_lang$core$Native_Utils.eq(appearingScene, _user$project$Types$NewMember) ? {
			ctor: '_Tuple2',
			_0: kioskModel.newMemberModel,
			_1: _user$project$Wizard_SceneUtils$focusOnIndex(_user$project$NewMemberScene$idxFirstName)
		} : {ctor: '_Tuple2', _0: kioskModel.newMemberModel, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$NewMemberScene$init = function (flags) {
	var model = {
		howDidYouHear: _elm_lang$core$Maybe$Nothing,
		firstName: '',
		lastName: '',
		email: '',
		isAdult: _elm_lang$core$Maybe$Nothing,
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$NewMemberScene$args = function (x) {
	return x.howDidYouHear;
};
var _user$project$NewMemberScene$NewMemberModel = F6(
	function (a, b, c, d, e, f) {
		return {howDidYouHear: a, firstName: b, lastName: c, email: d, isAdult: e, badNews: f};
	});

var _user$project$NewUserScene$idxNewUserScene = _user$project$Types$mdlIdBase(_user$project$Types$NewUser);
var _user$project$NewUserScene$idxUserName = {
	ctor: '::',
	_0: _user$project$NewUserScene$idxNewUserScene,
	_1: {
		ctor: '::',
		_0: 1,
		_1: {ctor: '[]'}
	}
};
var _user$project$NewUserScene$idxPassword1 = {
	ctor: '::',
	_0: _user$project$NewUserScene$idxNewUserScene,
	_1: {
		ctor: '::',
		_0: 2,
		_1: {ctor: '[]'}
	}
};
var _user$project$NewUserScene$idxPassword2 = {
	ctor: '::',
	_0: _user$project$NewUserScene$idxNewUserScene,
	_1: {
		ctor: '::',
		_0: 3,
		_1: {ctor: '[]'}
	}
};
var _user$project$NewUserScene$view = function (kioskModel) {
	var sceneModel = kioskModel.newUserModel;
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		'Login Details',
		'Choose an id and password for our website:',
		A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A5(
					_user$project$Wizard_SceneUtils$sceneTextField,
					kioskModel,
					_user$project$NewUserScene$idxUserName,
					'Choose a login id',
					sceneModel.userName,
					function (_p0) {
						return _user$project$Types$NewUserVector(
							_user$project$Types$UpdateUserName(_p0));
					}),
				_1: {
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(0),
					_1: {
						ctor: '::',
						_0: A5(
							_user$project$Wizard_SceneUtils$scenePasswordField,
							kioskModel,
							_user$project$NewUserScene$idxPassword1,
							'Choose a password',
							sceneModel.password1,
							function (_p1) {
								return _user$project$Types$NewUserVector(
									_user$project$Types$UpdatePassword1(_p1));
							}),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(0),
							_1: {
								ctor: '::',
								_0: A5(
									_user$project$Wizard_SceneUtils$scenePasswordField,
									kioskModel,
									_user$project$NewUserScene$idxPassword2,
									'Type password again',
									sceneModel.password2,
									function (_p2) {
										return _user$project$Types$NewUserVector(
											_user$project$Types$UpdatePassword2(_p2));
									}),
								_1: {
									ctor: '::',
									_0: _user$project$Wizard_SceneUtils$vspace(30),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}),
		{
			ctor: '::',
			_0: A3(
				_user$project$Wizard_SceneUtils$ButtonSpec,
				'OK',
				_user$project$Types$NewUserVector(_user$project$Types$ValidateUserNameAndPw),
				true),
			_1: {ctor: '[]'}
		},
		sceneModel.badNews);
};
var _user$project$NewUserScene$sceneWillAppear = F2(
	function (kioskModel, appearingScene) {
		return _elm_lang$core$Native_Utils.eq(appearingScene, _user$project$Types$NewUser) ? {
			ctor: '_Tuple2',
			_0: kioskModel.newUserModel,
			_1: _user$project$Wizard_SceneUtils$focusOnIndex(_user$project$NewUserScene$idxUserName)
		} : {ctor: '_Tuple2', _0: kioskModel.newUserModel, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$NewUserScene$init = function (flags) {
	var sceneModel = {
		howDidYouHear: _elm_lang$core$Maybe$Nothing,
		fname: _elm_lang$core$Maybe$Nothing,
		lname: _elm_lang$core$Maybe$Nothing,
		email: _elm_lang$core$Maybe$Nothing,
		adult: _elm_lang$core$Maybe$Nothing,
		userName: '',
		password1: '',
		password2: '',
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$NewUserScene$args = function (x) {
	return {ctor: '_Tuple5', _0: x.howDidYouHear, _1: x.fname, _2: x.lname, _3: x.email, _4: x.adult};
};
var _user$project$NewUserScene$validateUserIdAndPw = function (kioskModel) {
	var _p3 = _user$project$NewUserScene$args(kioskModel.newUserModel);
	if ((((((_p3.ctor === '_Tuple5') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) && (_p3._2.ctor === 'Just')) && (_p3._3.ctor === 'Just')) && (_p3._4.ctor === 'Just')) {
		var norm = function (_p4) {
			return _elm_lang$core$String$toLower(
				_elm_lang$core$String$trim(_p4));
		};
		var fname = norm(_p3._1._0);
		var lname = norm(_p3._2._0);
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.newUserModel;
		var uname = norm(sceneModel.userName);
		var userNameShort = _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(uname),
			4) < 0;
		var userNameLong = _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(uname),
			20) > 0;
		var userNameIsFName = _elm_lang$core$Native_Utils.eq(fname, uname);
		var userNameIsLName = _elm_lang$core$Native_Utils.eq(lname, uname);
		var pwMismatch = !_elm_lang$core$Native_Utils.eq(sceneModel.password1, sceneModel.password2);
		var pwShort = _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(sceneModel.password1),
			6) < 0;
		var msgs = _elm_lang$core$List$concat(
			{
				ctor: '::',
				_0: pwMismatch ? {
					ctor: '::',
					_0: 'The password fields don\'t match',
					_1: {ctor: '[]'}
				} : {ctor: '[]'},
				_1: {
					ctor: '::',
					_0: pwShort ? {
						ctor: '::',
						_0: 'The password must have at least 6 characters.',
						_1: {ctor: '[]'}
					} : {ctor: '[]'},
					_1: {
						ctor: '::',
						_0: userNameShort ? {
							ctor: '::',
							_0: 'The login id must have at least 4 characters.',
							_1: {ctor: '[]'}
						} : {ctor: '[]'},
						_1: {
							ctor: '::',
							_0: userNameLong ? {
								ctor: '::',
								_0: 'The login id cannot be more than 20 characters.',
								_1: {ctor: '[]'}
							} : {ctor: '[]'},
							_1: {
								ctor: '::',
								_0: userNameIsFName ? {
									ctor: '::',
									_0: 'The login id cannot be just your first name.',
									_1: {ctor: '[]'}
								} : {ctor: '[]'},
								_1: {
									ctor: '::',
									_0: userNameIsLName ? {
										ctor: '::',
										_0: 'The login id cannot be just your last name.',
										_1: {ctor: '[]'}
									} : {ctor: '[]'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
		var cmd = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(msgs),
			0) > 0) ? _elm_lang$core$Platform_Cmd$none : A2(
			xis.listMembers,
			{
				ctor: '::',
				_0: _user$project$XisRestApi$UsernameEquals(sceneModel.userName),
				_1: {
					ctor: '::',
					_0: _user$project$XisRestApi$IsActive(true),
					_1: {ctor: '[]'}
				}
			},
			function (_p5) {
				return _user$project$Types$NewUserVector(
					_user$project$Types$ValidateUserNameUnique(_p5));
			});
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				sceneModel,
				{badNews: msgs}),
			_1: cmd
		};
	} else {
		return {
			ctor: '_Tuple2',
			_0: kioskModel.newUserModel,
			_1: _user$project$Wizard_SceneUtils$send(
				_user$project$Types$ErrorVector(
					_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
		};
	}
};
var _user$project$NewUserScene$validateUserNameUnique = F2(
	function (kioskModel, matches) {
		var matchingNames = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _elm_lang$core$String$toLower(x.data.userName);
			},
			matches);
		var sceneModel = kioskModel.newUserModel;
		var chosenName = _elm_lang$core$String$toLower(sceneModel.userName);
		if (A2(_elm_lang$core$List$member, chosenName, matchingNames)) {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					sceneModel,
					{
						badNews: {
							ctor: '::',
							_0: 'That user name is already in use.',
							_1: {ctor: '[]'}
						}
					}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			var _p6 = _user$project$NewUserScene$args(sceneModel);
			if ((((((_p6.ctor === '_Tuple5') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) && (_p6._2.ctor === 'Just')) && (_p6._3.ctor === 'Just')) && (_p6._4.ctor === 'Just')) {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							badNews: {ctor: '[]'}
						}),
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$WaiverVector(
							_user$project$Types$WVR_Segue(
								{ctor: '_Tuple7', _0: _p6._0._0, _1: _p6._1._0, _2: _p6._2._0, _3: _p6._3._0, _4: _p6._4._0, _5: sceneModel.userName, _6: sceneModel.password1})))
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							badNews: {ctor: '[]'}
						}),
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$ErrorVector(
							_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
				};
			}
		}
	});
var _user$project$NewUserScene$update = F2(
	function (msg, kioskModel) {
		var sceneModel = kioskModel.newUserModel;
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'NU_Segue':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							howDidYouHear: _elm_lang$core$Maybe$Just(_p7._0._0),
							fname: _elm_lang$core$Maybe$Just(_p7._0._1),
							lname: _elm_lang$core$Maybe$Just(_p7._0._2),
							email: _elm_lang$core$Maybe$Just(_p7._0._3),
							adult: _elm_lang$core$Maybe$Just(_p7._0._4)
						}),
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$WizardVector(
							_user$project$Types$Push(_user$project$Types$NewUser)))
				};
			case 'UpdateUserName':
				var djangoizedVal = _user$project$XisRestApi$djangoizeId(_p7._0);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{userName: djangoizedVal}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdatePassword1':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{password1: _p7._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdatePassword2':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{password2: _p7._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ValidateUserNameAndPw':
				return _user$project$NewUserScene$validateUserIdAndPw(kioskModel);
			default:
				if (_p7._0.ctor === 'Ok') {
					return A2(_user$project$NewUserScene$validateUserNameUnique, kioskModel, _p7._0._0.results);
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(_p7._0._0),
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _user$project$NewUserScene$NewUserModel = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {howDidYouHear: a, fname: b, lname: c, email: d, adult: e, userName: f, password1: g, password2: h, badNews: i};
	});

var _user$project$WaiverScene$waiverHtml = {
	ctor: '::',
	_0: A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '20pt'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-weight', 'bold'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-top', '10px'),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('XEROCRAFT INC. RELEASE AND WAIVER OF LIABILITY, ASSUMPTION OF RISK, AND INDEMNITY CONSENT AGREEMENT'),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text('(\'Agreement\')'),
					_1: {ctor: '[]'}
				}
			}
		}),
	_1: {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'text-align', 'left'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-top', '20px'),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '16pt'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'line-height', '15pt'),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('IN CONSIDERATION of being permitted to participate in any way in the activities of Xerocraft Inc. I, for myself or personal representatives, assigns, heirs, and next of kin:'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ol,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '16pt'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'line-height', '15pt'),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$li,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-bottom', '15px'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('ACKNOWLEDGE, agree, and represent that I understand the nature of Xerocraft inc.\'s activities and that I am sober, qualified, in good health, and in proper physical and mental condition to participate in such Activity. I further agree and warrant that if at any time I believe conditions to be unsafe, I will immediately discontinue further participation in the Activity.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$li,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-bottom', '15px'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('FULLY UNDERSTAND THAT: (a) '),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$b,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('THESE ACTIVITIES MAY INVOLVE RISKS AND DANGERS OF SERIOUS BODILY INJURY, INCLUDING PERMANENT DISABILITY, AND DEATH '),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html$text('(\'RISKS\'); (b) these Risks and dangers may be caused by my own actions or inaction\'s, the actions or inaction\'s of others participating in the Activity, the condition(s) under which the Activity takes place, or THE NEGLIGENCE OF THE \'RELEASEES\' NAMED BELOW; (c) there may be OTHER RISK AND SOCIAL AND ECONOMIC LOSSES either not known to me or not readily foreseeable at this time; and I FULLY ACCEPT AND ASSUME ALL SUCH RISKS AND ALL RESPONSIBILITY FOR LOSSES, COSTS, AND DAMAGES I incur as a result of my participation or that of the minor in the Activity.'),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$li,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('HEREBY RELEASE, DISCHARGE, AND COVENANT NOT TO SUE Xerocraft inc., their respective administrators, directors, agents, officers, members, volunteers, and employees, other participants, any sponsors, advertisers, and, if applicable, owner(s) and lessors of premises on which the Activity takes place, (each considered one of the \'RELEASEES\' herein) FROM ALL LIABILITY, CLAIMS, DEMANDS, LOSSES, OR DAMAGES ON OR BY MY ACCOUNT CAUSED OR ALLEGED TO BE CAUSED IN WHOLE OR IN PART BY THE NEGLIGENCE OF THE \'RELEASEES\' OR OTHERWISE, INCLUDING NEGLIGENT RESCUE OPERATIONS AND I FURTHER AGREE that if, despite this RELEASE AND WAIVER OF LIABILITY, ASSUMPTION OF RISK, AND INDEMNITY AGREEMENT I, or anyone on my behalf, makes a claim against any of the Releasees, I WILL INDEMNIFY, SAVE, AND HOLD HARMLESS EACH OF THE RELEASEES from any litigation expenses, attorney fees, loss, liability, damage, or cost which may incur as the result of such claim. I have read this Agreement, fully understand its terms, understand that I have given up substantial rights by signing it and have signed it freely and without inducement or assurance of any nature and intend it to be a complete and unconditional release of all liability to the greatest extent allowed by law and agree that if any portion of this Agreement is held to be invalid the balance, notwithstanding, shall continue in full force and effect.'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '16pt'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'line-height', '15pt'),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$b,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('MINOR RELEASE.'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text('The minor\'s parent and/or legal guardian, understand the nature of Xerocraft inc.\'s activities and the minor\'s experience and capabilities and believe the minor to be qualified, in good health, and in proper physical and mental condition to participate in such activity. I hereby release, discharge, covenant not to sue, and agree to indemnify and save and hold harmless each of the releasee\'s from all liability claims, demands, losses, or damages on the minor\'s account caused or alleged to be caused in whole or in part by the negligence of the \'releasees\' or otherwise, including negligent rescue operation and further agree that if, despite this release, I, the minor, or anyone on the minor\'s behalf makes a claim against any of the releasees named above, I will indemnify, save, and hold harmless each of the releasees from any litigation expenses, attorney fees, loss liability, damage, or any cost which may incur as the result of any such claim.'),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	}
};
var _user$project$WaiverScene$signaturePadStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'height', '200px'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'width', '760px'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'border', '1px solid #bbbbbb'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'cursor', 'crosshair'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'touch-action', 'none'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-top', '50px'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-bottom', '50px'),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _user$project$WaiverScene$waiverBoxStyle = function (isSigning) {
	return _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: A2(
				_user$project$Wizard_SceneUtils_ops['=>'],
				'height',
				isSigning ? '200px' : '600px'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'overflow-y', 'scroll'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-left', '20px'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-right', '20px'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'border', '1px solid #bbbbbb'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '16pt'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'padding', '5px'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$WaiverScene$view = function (kioskModel) {
	var sceneModel = kioskModel.waiverModel;
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Be Careful at ',
			A2(_elm_lang$core$Basics_ops['++'], kioskModel.flags.orgName, '!')),
		'Please read and sign the following waiver',
		A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$vspace(20),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('waiver-box'),
							_1: {
								ctor: '::',
								_0: _user$project$WaiverScene$waiverBoxStyle(sceneModel.isSigning),
								_1: {ctor: '[]'}
							}
						},
						_user$project$WaiverScene$waiverHtml),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: A2(
											_user$project$Wizard_SceneUtils_ops['=>'],
											'display',
											sceneModel.isSigning ? 'block' : 'none'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$canvas,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$width(760),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$height(200),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$id('signature-pad'),
												_1: {
													ctor: '::',
													_0: _user$project$WaiverScene$signaturePadStyle,
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}),
		sceneModel.isSigning ? {
			ctor: '::',
			_0: A3(
				_user$project$Wizard_SceneUtils$ButtonSpec,
				'Accept',
				_user$project$Types$WaiverVector(_user$project$Types$GetSignature),
				true),
			_1: {
				ctor: '::',
				_0: A3(
					_user$project$Wizard_SceneUtils$ButtonSpec,
					'Clear',
					_user$project$Types$WaiverVector(
						_user$project$Types$ClearSignaturePad('signature-pad')),
					true),
				_1: {ctor: '[]'}
			}
		} : {
			ctor: '::',
			_0: A3(
				_user$project$Wizard_SceneUtils$ButtonSpec,
				'Sign',
				_user$project$Types$WaiverVector(
					_user$project$Types$ShowSignaturePad('signature-pad')),
				true),
			_1: {ctor: '[]'}
		},
		sceneModel.badNews);
};
var _user$project$WaiverScene$sceneWillAppear = F2(
	function (kioskModel, appearingScene) {
		if (_elm_lang$core$Native_Utils.eq(appearingScene, _user$project$Types$Waiver)) {
			var sceneModel = kioskModel.waiverModel;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					sceneModel,
					{isSigning: false}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {ctor: '_Tuple2', _0: kioskModel.waiverModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$WaiverScene$init = function (flags) {
	var sceneModel = {
		methods: _elm_lang$core$Maybe$Nothing,
		firstName: _elm_lang$core$Maybe$Nothing,
		lastName: _elm_lang$core$Maybe$Nothing,
		email: _elm_lang$core$Maybe$Nothing,
		isAdult: _elm_lang$core$Maybe$Nothing,
		userName: _elm_lang$core$Maybe$Nothing,
		password: _elm_lang$core$Maybe$Nothing,
		isSigning: false,
		signature: '',
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$WaiverScene$args = function (m) {
	return {ctor: '_Tuple7', _0: m.methods, _1: m.firstName, _2: m.lastName, _3: m.email, _4: m.isAdult, _5: m.userName, _6: m.password};
};
var _user$project$WaiverScene$initSignaturePad = _elm_lang$core$Native_Platform.outgoingPort(
	'initSignaturePad',
	function (v) {
		return [v._0, v._1];
	});
var _user$project$WaiverScene$clearSignaturePad = _elm_lang$core$Native_Platform.outgoingPort(
	'clearSignaturePad',
	function (v) {
		return v;
	});
var _user$project$WaiverScene$sendSignatureImage = _elm_lang$core$Native_Platform.outgoingPort(
	'sendSignatureImage',
	function (v) {
		return v;
	});
var _user$project$WaiverScene$update = F2(
	function (msg, kioskModel) {
		var sceneModel = kioskModel.waiverModel;
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'WVR_Segue':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							methods: _elm_lang$core$Maybe$Just(_p0._0._0),
							firstName: _elm_lang$core$Maybe$Just(_p0._0._1),
							lastName: _elm_lang$core$Maybe$Just(_p0._0._2),
							email: _elm_lang$core$Maybe$Just(_p0._0._3),
							isAdult: _elm_lang$core$Maybe$Just(_p0._0._4),
							userName: _elm_lang$core$Maybe$Just(_p0._0._5),
							password: _elm_lang$core$Maybe$Just(_p0._0._6)
						}),
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$WizardVector(
							_user$project$Types$Push(_user$project$Types$Waiver)))
				};
			case 'ShowSignaturePad':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{isSigning: true}),
					_1: _user$project$WaiverScene$initSignaturePad(
						{ctor: '_Tuple2', _0: _p0._0, _1: sceneModel.signature})
				};
			case 'ClearSignaturePad':
				return {
					ctor: '_Tuple2',
					_0: sceneModel,
					_1: _user$project$WaiverScene$clearSignaturePad(_p0._0)
				};
			case 'GetSignature':
				return {
					ctor: '_Tuple2',
					_0: sceneModel,
					_1: _user$project$WaiverScene$sendSignatureImage('image/png')
				};
			default:
				var _p2 = _p0._0;
				var _p1 = _user$project$WaiverScene$args(sceneModel);
				if ((((((((_p1.ctor === '_Tuple7') && (_p1._0.ctor === 'Just')) && (_p1._1.ctor === 'Just')) && (_p1._2.ctor === 'Just')) && (_p1._3.ctor === 'Just')) && (_p1._4.ctor === 'Just')) && (_p1._5.ctor === 'Just')) && (_p1._6.ctor === 'Just')) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{signature: _p2}),
						_1: _user$project$Wizard_SceneUtils$send(
							_user$project$Types$CreatingAcctVector(
								_user$project$Types$CA_Segue(
									{ctor: '_Tuple8', _0: _p1._0._0, _1: _p1._1._0, _2: _p1._2._0, _3: _p1._3._0, _4: _p1._4._0, _5: _p1._5._0, _6: _p1._6._0, _7: _p2})))
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{signature: _p2}),
						_1: _user$project$Wizard_SceneUtils$send(
							_user$project$Types$ErrorVector(
								_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
					};
				}
		}
	});
var _user$project$WaiverScene$signatureImage = _elm_lang$core$Native_Platform.incomingPort('signatureImage', _elm_lang$core$Json_Decode$string);
var _user$project$WaiverScene$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$WaiverScene$signatureImage(
				function (_p3) {
					return _user$project$Types$WaiverVector(
						_user$project$Types$UpdateSignature(_p3));
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$WaiverScene$WaiverModel = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {methods: a, firstName: b, lastName: c, email: d, isAdult: e, userName: f, password: g, isSigning: h, signature: i, badNews: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};

var _user$project$HowDidYouHearScene$howDidYouHearStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'width', '350px'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-left', 'auto'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-right', 'auto'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'padding-left', '125px'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'text-align', 'left'),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _user$project$HowDidYouHearScene$howDidYouHearChoices = function (kioskModel) {
	var idBase = _user$project$Types$mdlIdBase(_user$project$Types$HowDidYouHear);
	var sceneModel = kioskModel.howDidYouHearModel;
	var visibleMethods = A2(
		_elm_lang$core$List$filter,
		function (_p0) {
			return function (_) {
				return _.visible;
			}(
				function (_) {
					return _.data;
				}(_p0));
		},
		sceneModel.discoveryMethods);
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _user$project$HowDidYouHearScene$howDidYouHearStyle,
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$vspace(30),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				function (dm) {
					return A2(
						_elm_lang$html$Html$span,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A5(
								_debois$elm_mdl$Material_Toggles$checkbox,
								_user$project$Types$MdlVector,
								{
									ctor: '::',
									_0: idBase + dm.id,
									_1: {ctor: '[]'}
								},
								kioskModel.mdl,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Toggles$value(
										A2(_elm_lang$core$List$member, dm.id, sceneModel.selectedMethodPks)),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$onToggle(
											_user$project$Types$HowDidYouHearVector(
												_user$project$Types$ToggleDiscoveryMethod(dm))),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(dm.data.name),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _user$project$Wizard_SceneUtils$vspace(30),
								_1: {ctor: '[]'}
							}
						});
				},
				visibleMethods)));
};
var _user$project$HowDidYouHearScene$view = function (kioskModel) {
	var sceneModel = kioskModel.howDidYouHearModel;
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		'Just Wondering',
		'How did you hear about us?',
		_user$project$HowDidYouHearScene$howDidYouHearChoices(kioskModel),
		{
			ctor: '::',
			_0: A3(
				_user$project$Wizard_SceneUtils$ButtonSpec,
				'OK',
				_user$project$Types$HowDidYouHearVector(_user$project$Types$OkClicked),
				true),
			_1: {ctor: '[]'}
		},
		sceneModel.badNews);
};
var _user$project$HowDidYouHearScene$update = F2(
	function (msg, kioskModel) {
		var sceneModel = kioskModel.howDidYouHearModel;
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'ShuffledDiscoveryMethods':
				var _p5 = _p1._0;
				var isOther = function (dm) {
					return _elm_lang$core$Native_Utils.eq(dm.data.name, 'Other');
				};
				var other = A2(_elm_community$list_extra$List_Extra$find, isOther, _p5);
				var otherAtEnd = function () {
					var _p3 = other;
					if (_p3.ctor === 'Nothing') {
						return A2(_elm_lang$core$Debug$log, 'Couldn\'t find \'Other\' in:', _p5);
					} else {
						var _p4 = _p3._0;
						return A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_elm_community$list_extra$List_Extra$remove, _p4, _p5),
							{
								ctor: '::',
								_0: _p4,
								_1: {ctor: '[]'}
							});
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{discoveryMethods: otherAtEnd}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'AccDiscoveryMethods':
				if (_p1._0.ctor === 'Ok') {
					var accumulatedMethods = A2(_elm_lang$core$Basics_ops['++'], sceneModel.discoveryMethods, _p1._0._0.results);
					var shuffleGen = _elm_community$random_extra$Random_List$shuffle(accumulatedMethods);
					var cmd = A2(
						_elm_lang$core$Random$generate,
						function (_p2) {
							return _user$project$Types$HowDidYouHearVector(
								_user$project$Types$ShuffledDiscoveryMethods(_p2));
						},
						shuffleGen);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{discoveryMethods: accumulatedMethods}),
						_1: cmd
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(_p1._0._0),
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'ToggleDiscoveryMethod':
				var _p6 = _p1._0;
				var newSelectedMethodPks = A2(_elm_lang$core$List$member, _p6.id, sceneModel.selectedMethodPks) ? A2(_elm_community$list_extra$List_Extra$remove, _p6.id, sceneModel.selectedMethodPks) : {ctor: '::', _0: _p6.id, _1: sceneModel.selectedMethodPks};
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{selectedMethodPks: newSelectedMethodPks}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: sceneModel,
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$NewMemberVector(
							_user$project$Types$NM_Segue(sceneModel.selectedMethodPks)))
				};
		}
	});
var _user$project$HowDidYouHearScene$sceneWillAppear = F2(
	function (kioskModel, appearingScene) {
		var _p7 = appearingScene;
		if (_p7.ctor === 'Welcome') {
			var sceneModel = kioskModel.howDidYouHearModel;
			var xis = kioskModel.xisSession;
			var getDMs = xis.listDiscoveryMethods;
			var request = getDMs(
				function (_p8) {
					return _user$project$Types$HowDidYouHearVector(
						_user$project$Types$AccDiscoveryMethods(_p8));
				});
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					sceneModel,
					{
						discoveryMethods: {ctor: '[]'}
					}),
				_1: request
			};
		} else {
			return {ctor: '_Tuple2', _0: kioskModel.howDidYouHearModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$HowDidYouHearScene$init = function (flags) {
	var sceneModel = {
		discoveryMethods: {ctor: '[]'},
		selectedMethodPks: {ctor: '[]'},
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$HowDidYouHearScene$HowDidYouHearModel = F3(
	function (a, b, c) {
		return {discoveryMethods: a, selectedMethodPks: b, badNews: c};
	});

var _user$project$CreatingAcctScene$tick = F2(
	function (time, kioskModel) {
		var sceneModel = kioskModel.creatingAcctModel;
		var visible = A2(_user$project$Wizard_SceneUtils$sceneIsVisible, kioskModel, _user$project$Types$CreatingAcct);
		var inc = (visible && _elm_lang$core$List$isEmpty(sceneModel.badNews)) ? 1 : 0;
		var newWaitCount = sceneModel.waitCount + inc;
		return visible ? {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				sceneModel,
				{waitCount: newWaitCount}),
			_1: _elm_lang$core$Platform_Cmd$none
		} : {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$CreatingAcctScene$view = function (kioskModel) {
	var sceneModel = kioskModel.creatingAcctModel;
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		'Creating Your Account!',
		'One moment please',
		A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			_elm_lang$core$List$isEmpty(sceneModel.badNews) ? {
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$vspace(40),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text('Working'),
					_1: {
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$vspace(20),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(_elm_lang$core$String$repeat, sceneModel.waitCount, '●')),
							_1: {ctor: '[]'}
						}
					}
				}
			} : {
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$vspace(40),
				_1: {ctor: '[]'}
			}),
		{ctor: '[]'},
		sceneModel.badNews);
};
var _user$project$CreatingAcctScene$args = function (m) {
	return {ctor: '_Tuple8', _0: m.methods, _1: m.firstName, _2: m.lastName, _3: m.email, _4: m.isAdult, _5: m.userName, _6: m.password, _7: m.signature};
};
var _user$project$CreatingAcctScene$sceneWillAppear = F2(
	function (kioskModel, appearingScene) {
		var sceneModel = kioskModel.creatingAcctModel;
		if (_elm_lang$core$Native_Utils.eq(appearingScene, _user$project$Types$CreatingAcct)) {
			var _p0 = _user$project$CreatingAcctScene$args(sceneModel);
			if ((((((((_p0._0.ctor === 'Just') && (_p0._1.ctor === 'Just')) && (_p0._2.ctor === 'Just')) && (_p0._3.ctor === 'Just')) && (_p0._4.ctor === 'Just')) && (_p0._5.ctor === 'Just')) && (_p0._6.ctor === 'Just')) && (_p0._7.ctor === 'Just')) {
				var fullName = A2(
					_elm_lang$core$String$join,
					' ',
					{
						ctor: '::',
						_0: _p0._1._0,
						_1: {
							ctor: '::',
							_0: _p0._2._0,
							_1: {ctor: '[]'}
						}
					});
				var cmd = A7(
					kioskModel.membersApi.createNewAcct,
					fullName,
					_p0._5._0,
					_p0._3._0,
					_p0._6._0,
					_p0._7._0,
					_p0._4._0,
					function (_p1) {
						return _user$project$Types$CreatingAcctVector(
							_user$project$Types$XcAcctCreationAttempted(_p1));
					});
				return {ctor: '_Tuple2', _0: sceneModel, _1: cmd};
			} else {
				return {
					ctor: '_Tuple2',
					_0: sceneModel,
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$ErrorVector(
							_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
				};
			}
		} else {
			return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$CreatingAcctScene$infoToXisAcct = function (kioskModel) {
	var _p2 = _user$project$CreatingAcctScene$args(kioskModel.creatingAcctModel);
	if (((((((((_p2.ctor === '_Tuple8') && (_p2._0.ctor === 'Just')) && (_p2._1.ctor === 'Just')) && (_p2._2.ctor === 'Just')) && (_p2._3.ctor === 'Just')) && (_p2._4.ctor === 'Just')) && (_p2._5.ctor === 'Just')) && (_p2._6.ctor === 'Just')) && (_p2._7.ctor === 'Just')) {
		var _p6 = _p2._5._0;
		var _p5 = _p2._6._0;
		var segueCmd = _user$project$Wizard_SceneUtils$send(
			_user$project$Types$SignUpDoneVector(
				_user$project$Types$SUD_Segue(_p6)));
		var membersApi = kioskModel.membersApi;
		var setIsAdultCmd = A4(
			membersApi.setIsAdult,
			_p6,
			_p5,
			_p2._4._0,
			function (_p3) {
				return _user$project$Types$CreatingAcctVector(
					_user$project$Types$IsAdultWasSet(_p3));
			});
		var addMethodsCmd = A4(
			membersApi.addDiscoveryMethods,
			_p6,
			_p5,
			_p2._0._0,
			function (_p4) {
				return _user$project$Types$CreatingAcctVector(
					_user$project$Types$DiscoveryMethodAdded(_p4));
			});
		var sceneModel = kioskModel.creatingAcctModel;
		return _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: segueCmd,
				_1: {
					ctor: '::',
					_0: setIsAdultCmd,
					_1: {
						ctor: '::',
						_0: addMethodsCmd,
						_1: {ctor: '[]'}
					}
				}
			});
	} else {
		return _user$project$Wizard_SceneUtils$send(
			_user$project$Types$ErrorVector(
				_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)));
	}
};
var _user$project$CreatingAcctScene$update = F2(
	function (msg, kioskModel) {
		var sceneModel = kioskModel.creatingAcctModel;
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'CA_Segue':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							methods: _elm_lang$core$Maybe$Just(_p7._0._0),
							firstName: _elm_lang$core$Maybe$Just(_p7._0._1),
							lastName: _elm_lang$core$Maybe$Just(_p7._0._2),
							email: _elm_lang$core$Maybe$Just(_p7._0._3),
							isAdult: _elm_lang$core$Maybe$Just(_p7._0._4),
							userName: _elm_lang$core$Maybe$Just(_p7._0._5),
							password: _elm_lang$core$Maybe$Just(_p7._0._6),
							signature: _elm_lang$core$Maybe$Just(_p7._0._7)
						}),
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$WizardVector(
							_user$project$Types$Push(_user$project$Types$CreatingAcct)))
				};
			case 'XcAcctCreationAttempted':
				if (_p7._0.ctor === 'Ok') {
					var _p12 = _p7._0._0;
					var tagRegex = _elm_lang$core$Regex$regex('<[^>]*>');
					var msgRegex = _elm_lang$core$Regex$regex('<div id=\\\"Message\\\">.*</div>');
					var msgsFound = A3(
						_elm_lang$core$Regex$find,
						_elm_lang$core$Regex$AtMost(1),
						msgRegex,
						_p12);
					var msg = function () {
						var _p8 = _elm_lang$core$List$head(msgsFound);
						if (_p8.ctor === 'Nothing') {
							return '';
						} else {
							return _elm_community$string_extra$String_Extra$stripTags(_p8._0.match);
						}
					}();
					var userNameInUseIndicator = '<h2></h2>';
					var successIndicator = '<h1>You have successfully registered your check in! Welcome to Xerocraft!</h1>';
					var _p9 = msg;
					switch (_p9) {
						case 'You have successfully registered your check in! Welcome to Xerocraft!':
							var resultToMsg = function (_p10) {
								return _user$project$Types$CreatingAcctVector(
									_user$project$Types$CloneAttempted(_p10));
							};
							var flags = kioskModel.flags;
							var cloneFn = A2(_user$project$XerocraftApi$cloneAcctToXis, flags.cloneAcctUrl, flags.csrfToken);
							var _p11 = _user$project$CreatingAcctScene$args(sceneModel);
							if (((((((((_p11.ctor === '_Tuple8') && (_p11._0.ctor === 'Just')) && (_p11._1.ctor === 'Just')) && (_p11._2.ctor === 'Just')) && (_p11._3.ctor === 'Just')) && (_p11._4.ctor === 'Just')) && (_p11._5.ctor === 'Just')) && (_p11._6.ctor === 'Just')) && (_p11._7.ctor === 'Just')) {
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										sceneModel,
										{
											badNews: {ctor: '[]'}
										}),
									_1: A3(cloneFn, _p11._5._0, _p11._6._0, resultToMsg)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: sceneModel,
									_1: _user$project$Wizard_SceneUtils$send(
										_user$project$Types$ErrorVector(
											_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
								};
							}
						case '':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									sceneModel,
									{
										badNews: {
											ctor: '::',
											_0: _elm_community$string_extra$String_Extra$stripTags(_p12),
											_1: {ctor: '[]'}
										}
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						default:
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									sceneModel,
									{
										badNews: {
											ctor: '::',
											_0: msg,
											_1: {ctor: '[]'}
										}
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
					}
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: 'Could not create acct on xerocraft.org',
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Basics$toString(_p7._0._0),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'CloneAttempted':
				if (_p7._0.ctor === 'Err') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {ctor: '[]'}
							}),
						_1: _user$project$CreatingAcctScene$infoToXisAcct(kioskModel)
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {ctor: '[]'}
							}),
						_1: _user$project$CreatingAcctScene$infoToXisAcct(kioskModel)
					};
				}
			case 'IsAdultWasSet':
				if (_p7._0.ctor === 'Ok') {
					return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				if (_p7._0.ctor === 'Ok') {
					return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _user$project$CreatingAcctScene$init = function (flags) {
	var sceneModel = {
		methods: _elm_lang$core$Maybe$Nothing,
		firstName: _elm_lang$core$Maybe$Nothing,
		lastName: _elm_lang$core$Maybe$Nothing,
		email: _elm_lang$core$Maybe$Nothing,
		isAdult: _elm_lang$core$Maybe$Nothing,
		userName: _elm_lang$core$Maybe$Nothing,
		password: _elm_lang$core$Maybe$Nothing,
		signature: _elm_lang$core$Maybe$Nothing,
		waitCount: 0,
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$CreatingAcctScene$CreatingAcctModel = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {methods: a, firstName: b, lastName: c, email: d, isAdult: e, userName: f, password: g, signature: h, waitCount: i, badNews: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};

var _user$project$EmailInUseScene$view = function (kioskModel) {
	var _p0 = kioskModel.emailInUseModel.membersUsingAddr;
	if (_p0.ctor === 'Nothing') {
		return A2(_user$project$Wizard_SceneUtils$errorView, kioskModel, _user$project$Types$missingArguments);
	} else {
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Already Registered!',
			'',
			A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$vspace(30),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('The following accounts are using your email address:'),
							_1: {
								ctor: '::',
								_0: _user$project$Wizard_SceneUtils$vspace(30),
								_1: {ctor: '[]'}
							}
						}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$List$map,
							function (m) {
								return A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _user$project$Wizard_SceneUtils$userIdStyle,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(m.data.userName),
										_1: {ctor: '[]'}
									});
							},
							_p0._0),
						{
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(50),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('If you recognize one of them as yours,'),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text('please remember it and use it to:'),
										_1: {
											ctor: '::',
											_0: _user$project$Wizard_SceneUtils$vspace(20),
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$Wizard_SceneUtils$sceneButton,
													kioskModel,
													A3(
														_user$project$Wizard_SceneUtils$ButtonSpec,
														'Check In',
														_user$project$Types$WizardVector(
															_user$project$Types$Push(_user$project$Types$CheckIn)),
														true)),
												_1: {
													ctor: '::',
													_0: _user$project$Wizard_SceneUtils$vspace(50),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html$text('If you don\'t recognize any of them'),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$br,
																{ctor: '[]'},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text('please speak to a staff member.'),
																_1: {
																	ctor: '::',
																	_0: _user$project$Wizard_SceneUtils$vspace(20),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_user$project$Wizard_SceneUtils$sceneButton,
																			kioskModel,
																			A3(
																				_user$project$Wizard_SceneUtils$ButtonSpec,
																				'OK',
																				_user$project$Types$WizardVector(_user$project$Types$Reset),
																				true)),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}))),
			{ctor: '[]'},
			{ctor: '[]'});
	}
};
var _user$project$EmailInUseScene$update = F2(
	function (msg, kioskModel) {
		var sceneModel = kioskModel.emailInUseModel;
		var _p1 = msg;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				sceneModel,
				{
					membersUsingAddr: _elm_lang$core$Maybe$Just(_p1._0)
				}),
			_1: _user$project$Wizard_SceneUtils$send(
				_user$project$Types$WizardVector(
					_user$project$Types$Push(_user$project$Types$EmailInUse)))
		};
	});
var _user$project$EmailInUseScene$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: {membersUsingAddr: _elm_lang$core$Maybe$Nothing},
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$EmailInUseScene$EmailInUseModel = function (a) {
	return {membersUsingAddr: a};
};

var _user$project$ErrorScene$view = function (kioskModel) {
	var sceneModel = kioskModel.errorModel;
	return A2(
		_user$project$Wizard_SceneUtils$errorView,
		kioskModel,
		A2(_elm_lang$core$Maybe$withDefault, 'Unspecified Error', sceneModel.errorMessage));
};
var _user$project$ErrorScene$update = F2(
	function (msg, kioskModel) {
		var sceneModel = kioskModel.errorModel;
		var _p0 = msg;
		if (_p0.ctor === 'ERR_Segue') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					sceneModel,
					{
						errorMessage: _elm_lang$core$Maybe$Just(_p0._0)
					}),
				_1: _user$project$Wizard_SceneUtils$send(
					_user$project$Types$WizardVector(
						_user$project$Types$Push(_user$project$Types$Error)))
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: sceneModel,
				_1: _user$project$Wizard_SceneUtils$send(
					_user$project$Types$WizardVector(_user$project$Types$Reset))
			};
		}
	});
var _user$project$ErrorScene$sceneWillAppear = F3(
	function (kioskModel, appearing, vanishing) {
		var sceneModel = kioskModel.errorModel;
		return _elm_lang$core$Native_Utils.eq(appearing, _user$project$Types$Error) ? {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none} : {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$ErrorScene$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: {errorMessage: _elm_lang$core$Maybe$Nothing},
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$ErrorScene$ErrorModel = function (a) {
	return {errorMessage: a};
};

var _user$project$OldBusinessScene$businessDivStyle = function (color) {
	return _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'background-color', color),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'padding', '10px'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin', '15px'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'border-radius', '20px'),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$OldBusinessScene$businessListStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'width', '500px'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-left', 'auto'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-right', 'auto'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'text-align', 'left'),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$OldBusinessScene$msgForSegueToDone = F2(
	function (sessionType, member) {
		var _p0 = sessionType;
		if (_p0.ctor === 'CheckInSession') {
			return _user$project$Types$CheckInDoneVector(
				_user$project$Types$CID_Segue(member));
		} else {
			return _user$project$Types$CheckOutDoneVector(
				_user$project$Types$COD_Segue(member));
		}
	});
var _user$project$OldBusinessScene$segueToDone = function (sceneModel) {
	var _p1 = {ctor: '_Tuple2', _0: sceneModel.sessionType, _1: sceneModel.member};
	if (((_p1.ctor === '_Tuple2') && (_p1._0.ctor === 'Just')) && (_p1._1.ctor === 'Just')) {
		return _user$project$Wizard_SceneUtils$send(
			A2(_user$project$OldBusinessScene$msgForSegueToDone, _p1._0._0, _p1._1._0));
	} else {
		return _user$project$Wizard_SceneUtils$send(
			_user$project$Types$ErrorVector(
				_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)));
	}
};
var _user$project$OldBusinessScene$taskPhrase = function (l) {
	var n = _elm_lang$core$List$length(l);
	var nStr = _elm_lang$core$Basics$toString(n);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		nStr,
		(_elm_lang$core$Native_Utils.cmp(n, 1) > 0) ? ' Tasks' : ' Task');
};
var _user$project$OldBusinessScene$viewTaskClaimWork = function (_p2) {
	var _p3 = _p2;
	var _p4 = _p3.task;
	var tDate = A2(_user$project$CalendarDate$format, '%a %b %ddd', _p4.data.scheduledDate);
	var tDesc = _p4.data.shortDesc;
	return _elm_lang$html$Html$text(
		A2(
			_elm_lang$core$Basics_ops['++'],
			tDesc,
			A2(_elm_lang$core$Basics_ops['++'], ', ', tDate)));
};
var _user$project$OldBusinessScene$considerSkip = function (sceneModel) {
	var _p5 = sceneModel.workResponsesExpected;
	if (_p5.ctor === 'Nothing') {
		return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
	} else {
		return _elm_lang$core$Native_Utils.eq(sceneModel.workResponsesReceived, _p5._0) ? ((_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(sceneModel.allOldBusiness),
			0) > 0) ? {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none} : {
			ctor: '_Tuple2',
			_0: sceneModel,
			_1: _user$project$OldBusinessScene$segueToDone(sceneModel)
		}) : {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
	}
};
var _user$project$OldBusinessScene$memberId = function (kioskModel) {
	var sceneModel = kioskModel.oldBusinessModel;
	var _p6 = sceneModel.member;
	if (_p6.ctor === 'Just') {
		return _p6._0.id;
	} else {
		var _p7 = A2(_elm_lang$core$Debug$log, 'checkInMember', _elm_lang$core$Maybe$Nothing);
		return -99;
	}
};
var _user$project$OldBusinessScene$checkForOldBusiness = function (kioskModel) {
	var tagging = function (_p8) {
		return _user$project$Types$OldBusinessVector(
			_user$project$Types$OB_WorkingClaimsResult(_p8));
	};
	var cmd = A2(
		kioskModel.xisSession.listClaims,
		{
			ctor: '::',
			_0: _user$project$XisRestApi$ClaimingMemberEquals(
				_user$project$OldBusinessScene$memberId(kioskModel)),
			_1: {
				ctor: '::',
				_0: _user$project$XisRestApi$ClaimStatusEquals(_user$project$XisRestApi$WorkingClaimStatus),
				_1: {ctor: '[]'}
			}
		},
		tagging);
	var sceneModel = kioskModel.oldBusinessModel;
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			sceneModel,
			{
				allOldBusiness: {ctor: '[]'},
				selectedItem: _elm_lang$core$Maybe$Nothing,
				workResponsesExpected: _elm_lang$core$Maybe$Nothing,
				workResponsesReceived: 0
			}),
		_1: cmd
	};
};
var _user$project$OldBusinessScene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.oldBusinessModel;
		var _p9 = msg;
		switch (_p9.ctor) {
			case 'OB_SegueA':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							sessionType: _elm_lang$core$Maybe$Just(_p9._0),
							member: _elm_lang$core$Maybe$Just(_p9._1)
						}),
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$WizardVector(
							_user$project$Types$Push(_user$project$Types$OldBusiness)))
				};
			case 'OB_SegueB':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							sessionType: _elm_lang$core$Maybe$Just(_p9._0),
							member: _elm_lang$core$Maybe$Just(_p9._1),
							thisSessionsClaim: _elm_lang$core$Maybe$Just(_p9._2)
						}),
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$WizardVector(
							_user$project$Types$Push(_user$project$Types$OldBusiness)))
				};
			case 'OB_DeleteSelection':
				var _p18 = sceneModel.selectedItem;
				if (_p18.ctor === 'Just') {
					var _p21 = _p18._0.claim;
					var newModel = _elm_lang$core$Native_Utils.update(
						sceneModel,
						{selectedItem: _elm_lang$core$Maybe$Nothing});
					var cmd2 = _elm_lang$core$Native_Utils.eq(
						_elm_lang$core$List$length(_p21.data.workSet),
						1) ? A2(
						xis.replaceClaim,
						A2(_user$project$XisRestApi$setClaimsStatus, _user$project$XisRestApi$AbandonedClaimStatus, _p21),
						function (_p19) {
							return _user$project$Types$OldBusinessVector(
								_user$project$Types$OB_NoteClaimUpdated(_p19));
						}) : _elm_lang$core$Platform_Cmd$none;
					var cmd1 = A2(
						xis.deleteWorkById,
						_p18._0.work.id,
						function (_p20) {
							return _user$project$Types$OldBusinessVector(
								_user$project$Types$OB_NoteWorkDeleted(_p20));
						});
					return {
						ctor: '_Tuple2',
						_0: newModel,
						_1: _elm_lang$core$Platform_Cmd$batch(
							{
								ctor: '::',
								_0: cmd1,
								_1: {
									ctor: '::',
									_0: cmd2,
									_1: {ctor: '[]'}
								}
							})
					};
				} else {
					return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OB_NoteWorkDeleted':
				return _user$project$OldBusinessScene$checkForOldBusiness(kioskModel);
			case 'OB_ToggleItem':
				var finder = function (item) {
					return _elm_lang$core$Native_Utils.eq(item.claim.id, _p9._0);
				};
				var item = A2(_elm_community$list_extra$List_Extra$find, finder, sceneModel.allOldBusiness);
				var _p22 = item;
				if (_p22.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								selectedItem: _elm_lang$core$Maybe$Just(_p22._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'OB_WorkingClaimsResult':
				if (_p9._0.ctor === 'Ok') {
					var _p13 = _p9._0._0.results;
					var tagger = function (c) {
						return function (_p10) {
							return _user$project$Types$OldBusinessVector(
								A2(_user$project$Types$OB_NoteRelatedTask, c, _p10));
						};
					};
					var getTaskCmd = function (c) {
						return A2(
							xis.getTaskFromUrl,
							c.data.claimedTask,
							tagger(c));
					};
					var claims = function () {
						var _p11 = sceneModel.thisSessionsClaim;
						if (_p11.ctor === 'Just') {
							return A2(
								_elm_lang$core$List$filter,
								function (x) {
									return !_elm_lang$core$Native_Utils.eq(x.id, _p11._0.id);
								},
								_p13);
						} else {
							return _p13;
						}
					}();
					var getTaskCmds = A2(_elm_lang$core$List$map, getTaskCmd, claims);
					var expected = _elm_lang$core$List$sum(
						A2(
							_elm_lang$core$List$map,
							function (_p12) {
								return _elm_lang$core$List$length(
									function (_) {
										return _.workSet;
									}(
										function (_) {
											return _.data;
										}(_p12)));
							},
							claims));
					return _elm_lang$core$Native_Utils.eq(expected, 0) ? {
						ctor: '_Tuple2',
						_0: sceneModel,
						_1: _user$project$OldBusinessScene$segueToDone(sceneModel)
					} : {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								workResponsesExpected: _elm_lang$core$Maybe$Just(expected)
							}),
						_1: _elm_lang$core$Platform_Cmd$batch(getTaskCmds)
					};
				} else {
					var _p23 = A2(
						_elm_lang$core$Debug$log,
						'WARNING',
						_elm_lang$core$Basics$toString(_p9._0._0));
					return {
						ctor: '_Tuple2',
						_0: sceneModel,
						_1: _user$project$OldBusinessScene$segueToDone(sceneModel)
					};
				}
			case 'OB_NoteRelatedTask':
				if (_p9._1.ctor === 'Ok') {
					var _p15 = _p9._0;
					var tagger = function (_p14) {
						return _user$project$Types$OldBusinessVector(
							A3(_user$project$Types$OB_NoteRelatedWork, _p9._1._0, _p15, _p14));
					};
					var getWorkCmd = function (resUrl) {
						return A2(xis.getWorkFromUrl, resUrl, tagger);
					};
					var getWorkCmds = A2(_elm_lang$core$List$map, getWorkCmd, _p15.data.workSet);
					return {
						ctor: '_Tuple2',
						_0: sceneModel,
						_1: _elm_lang$core$Platform_Cmd$batch(getWorkCmds)
					};
				} else {
					var count = _elm_lang$core$List$length(_p9._0.data.workSet);
					var newReceived = sceneModel.workResponsesReceived + count;
					var newSceneModel = _elm_lang$core$Native_Utils.update(
						sceneModel,
						{workResponsesReceived: newReceived});
					return _user$project$OldBusinessScene$considerSkip(newSceneModel);
				}
			case 'OB_NoteRelatedWork':
				if (_p9._2.ctor === 'Ok') {
					var _p17 = _p9._2._0;
					var newCount = sceneModel.workResponsesReceived + 1;
					var allOldBusinessPlus = {
						ctor: '::',
						_0: A3(_user$project$Types$TaskClaimWork, _p9._0, _p9._1, _p17),
						_1: sceneModel.allOldBusiness
					};
					var newSceneModel = function () {
						var _p16 = _p17.data.workDuration;
						if (_p16.ctor === 'Nothing') {
							return _elm_lang$core$Native_Utils.update(
								sceneModel,
								{allOldBusiness: allOldBusinessPlus, workResponsesReceived: newCount});
						} else {
							return _elm_lang$core$Native_Utils.update(
								sceneModel,
								{workResponsesReceived: newCount});
						}
					}();
					return _user$project$OldBusinessScene$considerSkip(newSceneModel);
				} else {
					var newReceived = sceneModel.workResponsesReceived + 1;
					var newSceneModel = _elm_lang$core$Native_Utils.update(
						sceneModel,
						{workResponsesReceived: newReceived});
					return _user$project$OldBusinessScene$considerSkip(newSceneModel);
				}
			default:
				if (_p9._0.ctor === 'Ok') {
					return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var _p24 = A2(
						_elm_lang$core$Debug$log,
						'WARNING',
						_elm_lang$core$Basics$toString(_p9._0._0));
					return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _user$project$OldBusinessScene$sceneWillAppear = F3(
	function (kioskModel, appearing, vanishing) {
		var sceneModel = kioskModel.oldBusinessModel;
		var _p25 = {ctor: '_Tuple2', _0: appearing, _1: vanishing};
		if (_p25._0.ctor === 'OldBusiness') {
			if (_p25._1.ctor === 'TimeSheetPt3') {
				var popCmd = _user$project$Wizard_SceneUtils$rebaseTo(_user$project$Types$OldBusiness);
				var onStack = function (x) {
					return A2(_mgold$elm_nonempty_list$List_Nonempty$member, x, kioskModel.sceneStack);
				};
				return A2(
					_ccapndave$elm_update_extra$Update_Extra$addCmd,
					popCmd,
					_user$project$OldBusinessScene$checkForOldBusiness(kioskModel));
			} else {
				return _user$project$OldBusinessScene$checkForOldBusiness(kioskModel);
			}
		} else {
			return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$OldBusinessScene$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: {
			sessionType: _elm_lang$core$Maybe$Nothing,
			member: _elm_lang$core$Maybe$Nothing,
			thisSessionsClaim: _elm_lang$core$Maybe$Nothing,
			allOldBusiness: {ctor: '[]'},
			selectedItem: _elm_lang$core$Maybe$Nothing,
			workResponsesExpected: _elm_lang$core$Maybe$Nothing,
			workResponsesReceived: 0
		},
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$OldBusinessScene$requiredArgs = function (x) {
	return {ctor: '_Tuple2', _0: x.sessionType, _1: x.member};
};
var _user$project$OldBusinessScene$idxOldBusinessScene = _user$project$Types$mdlIdBase(_user$project$Types$OldBusiness);
var _user$project$OldBusinessScene$viewOldBusinessChoices = F2(
	function (kioskModel, business) {
		var sceneModel = kioskModel.oldBusinessModel;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$OldBusinessScene$businessListStyle,
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$indexedMap,
				F2(
					function (index, item) {
						return A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _user$project$OldBusinessScene$businessDivStyle('#dddddd'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Toggles$radio,
									_user$project$Types$MdlVector,
									{
										ctor: '::',
										_0: _user$project$OldBusinessScene$idxOldBusinessScene,
										_1: {
											ctor: '::',
											_0: index,
											_1: {ctor: '[]'}
										}
									},
									kioskModel.mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Toggles$value(
											function () {
												var _p26 = sceneModel.selectedItem;
												if (_p26.ctor === 'Nothing') {
													return false;
												} else {
													return _elm_lang$core$Native_Utils.eq(_p26._0, item);
												}
											}()),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Options$onToggle(
												_user$project$Types$OldBusinessVector(
													_user$project$Types$OB_ToggleItem(item.claim.id))),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _user$project$OldBusinessScene$viewTaskClaimWork(item),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							});
					}),
				business));
	});
var _user$project$OldBusinessScene$view = function (kioskModel) {
	var sceneModel = kioskModel.oldBusinessModel;
	var _p27 = _user$project$OldBusinessScene$requiredArgs(sceneModel);
	if ((_p27._0.ctor === 'Just') && (_p27._1.ctor === 'Just')) {
		var _p30 = _p27._0._0;
		var _p29 = _p27._1._0;
		if (_elm_lang$core$List$isEmpty(sceneModel.allOldBusiness)) {
			return _user$project$Wizard_SceneUtils$blankGenericScene(kioskModel);
		} else {
			var skipSpec = A3(
				_user$project$Wizard_SceneUtils$ButtonSpec,
				'Skip',
				A2(_user$project$OldBusinessScene$msgForSegueToDone, _p30, _p29),
				true);
			var $delete = 'Delete';
			var finish = 'Finish';
			var tPhrase = _user$project$OldBusinessScene$taskPhrase(sceneModel.allOldBusiness);
			return A6(
				_user$project$Wizard_SceneUtils$genericScene,
				kioskModel,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'You Have ',
					A2(_elm_lang$core$Basics_ops['++'], tPhrase, ' In Progress!')),
				'Let\'s Review Them',
				A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$vspace(25),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Select any that is already completed'),
							_1: {
								ctor: '::',
								_0: _user$project$Wizard_SceneUtils$vspace(0),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text('and then click \'FINISH\' to fill in a timesheet'),
									_1: {
										ctor: '::',
										_0: _user$project$Wizard_SceneUtils$vspace(0),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text('or \'DELETE\' if it was not actually worked.'),
											_1: {
												ctor: '::',
												_0: _user$project$Wizard_SceneUtils$vspace(20),
												_1: {
													ctor: '::',
													_0: A2(_user$project$OldBusinessScene$viewOldBusinessChoices, kioskModel, sceneModel.allOldBusiness),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}),
				function () {
					var _p28 = sceneModel.selectedItem;
					if (_p28.ctor === 'Just') {
						return {
							ctor: '::',
							_0: A3(
								_user$project$Wizard_SceneUtils$ButtonSpec,
								finish,
								_user$project$Types$TimeSheetPt1Vector(
									A3(_user$project$Types$TS1_Segue, _p30, _p29, _p28._0)),
								true),
							_1: {
								ctor: '::',
								_0: A3(
									_user$project$Wizard_SceneUtils$ButtonSpec,
									$delete,
									_user$project$Types$OldBusinessVector(_user$project$Types$OB_DeleteSelection),
									true),
								_1: {
									ctor: '::',
									_0: skipSpec,
									_1: {ctor: '[]'}
								}
							}
						};
					} else {
						return {
							ctor: '::',
							_0: A3(_user$project$Wizard_SceneUtils$ButtonSpec, finish, _user$project$Types$NoOp, false),
							_1: {
								ctor: '::',
								_0: A3(_user$project$Wizard_SceneUtils$ButtonSpec, $delete, _user$project$Types$NoOp, false),
								_1: {
									ctor: '::',
									_0: skipSpec,
									_1: {ctor: '[]'}
								}
							}
						};
					}
				}(),
				{ctor: '[]'});
		}
	} else {
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Sorry!',
			'We\'ve encountered an error',
			_elm_lang$html$Html$text(_user$project$Types$missingArguments),
			{ctor: '[]'},
			{ctor: '[]'});
	}
};
var _user$project$OldBusinessScene$OldBusinessModel = F7(
	function (a, b, c, d, e, f, g) {
		return {sessionType: a, member: b, thisSessionsClaim: c, allOldBusiness: d, selectedItem: e, workResponsesExpected: f, workResponsesReceived: g};
	});

var _user$project$PublicHoursScene$circleStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'background', '#5EA226'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'border-radius', '0.8em'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], '-moz-border-radius', '0.8em'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], '-webkit-border-radius', '0.8em'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'color', '#ffffff'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'display', 'inline-block'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-weight', 'bold'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'line-height', '1.6em'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-right', '15px'),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'text-align', 'center'),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'width', '1.6em'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$PublicHoursScene$view = function (kioskModel) {
	var xis = kioskModel.xisSession;
	var sceneModel = kioskModel.publicHoursModel;
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		'Our Public Access Hours',
		'There\'s No Cost to Attend!',
		A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
				_1: {
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$sceneTextBlockStyle,
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$vspace(40),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _user$project$PublicHoursScene$circleStyle,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('1'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$vspace(0),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Thursdays from 7pm to 10pm'),
							_1: {
								ctor: '::',
								_0: _user$project$Wizard_SceneUtils$vspace(0),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text('Everybody is Welcome'),
									_1: {
										ctor: '::',
										_0: _user$project$Wizard_SceneUtils$vspace(40),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _user$project$PublicHoursScene$circleStyle,
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('2'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: _user$project$Wizard_SceneUtils$vspace(0),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html$text('Saturdays from noon to 4pm'),
													_1: {
														ctor: '::',
														_0: _user$project$Wizard_SceneUtils$vspace(0),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html$text('Everybody is Welcome'),
															_1: {
																ctor: '::',
																_0: _user$project$Wizard_SceneUtils$vspace(40),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$span,
																		{
																			ctor: '::',
																			_0: _user$project$PublicHoursScene$circleStyle,
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('3'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _user$project$Wizard_SceneUtils$vspace(0),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Tuesdays from 6pm to 10pm'),
																			_1: {
																				ctor: '::',
																				_0: _user$project$Wizard_SceneUtils$vspace(0),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Women/Trans/Femme Only'),
																					_1: {
																						ctor: '::',
																						_0: _user$project$Wizard_SceneUtils$vspace(20),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}),
		{
			ctor: '::',
			_0: A3(
				_user$project$Wizard_SceneUtils$ButtonSpec,
				'OK',
				_user$project$Types$WizardVector(_user$project$Types$Reset),
				true),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'});
};
var _user$project$PublicHoursScene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.publicHoursModel;
		var _p0 = msg;
		var newSceneModel = _elm_lang$core$Native_Utils.update(
			sceneModel,
			{
				member: _elm_lang$core$Maybe$Just(_p0._0)
			});
		return {
			ctor: '_Tuple2',
			_0: newSceneModel,
			_1: _user$project$Wizard_SceneUtils$send(
				_user$project$Types$WizardVector(
					_user$project$Types$Push(_user$project$Types$PublicHours)))
		};
	});
var _user$project$PublicHoursScene$init = function (flags) {
	var sceneModel = {
		member: _elm_lang$core$Maybe$Nothing,
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$PublicHoursScene$PublicHoursModel = F2(
	function (a, b) {
		return {member: a, badNews: b};
	});

var _user$project$StartScene$h2Style = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'line-height', '1'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin', '0'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '24pt'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'color', 'black'),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$StartScene$h1Style = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-family', 'roboto condensed'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '54pt'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'word-spacing', '-5px'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'line-height', '0.9'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin', '0'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'color', 'black'),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$StartScene$logoImgStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(
			_user$project$Wizard_SceneUtils_ops['=>'],
			'width',
			_user$project$Wizard_SceneUtils$px(600)),
		_1: {
			ctor: '::',
			_0: A2(
				_user$project$Wizard_SceneUtils_ops['=>'],
				'height',
				_user$project$Wizard_SceneUtils$px(579)),
			_1: {ctor: '[]'}
		}
	});
var _user$project$StartScene$bgDivStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'background-color', 'black'),
		_1: {
			ctor: '::',
			_0: A2(
				_user$project$Wizard_SceneUtils_ops['=>'],
				'height',
				_user$project$Wizard_SceneUtils$px(_user$project$Wizard_SceneUtils$sceneHeight)),
			_1: {
				ctor: '::',
				_0: A2(
					_user$project$Wizard_SceneUtils_ops['=>'],
					'width',
					_user$project$Wizard_SceneUtils$px(_user$project$Wizard_SceneUtils$sceneWidth)),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-left', 'auto'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-right', 'auto'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'text-align', 'center'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '36pt'),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _user$project$StartScene$rfidWasSwiped = F2(
	function (kioskModel, result) {
		var _p0 = result;
		if (_p0.ctor === 'Ok') {
			return {
				ctor: '_Tuple2',
				_0: kioskModel.startModel,
				_1: _user$project$Wizard_SceneUtils$send(
					_user$project$Types$WelcomeForRfidVector(
						_user$project$Types$W4R_Segue(_p0._0)))
			};
		} else {
			return {ctor: '_Tuple2', _0: kioskModel.startModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$StartScene$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$mouse$Mouse$clicks(
				function (_p1) {
					return _user$project$Types$StartVector(
						_user$project$Types$SS_MouseClick(_p1));
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$keyboard$Keyboard$downs(
					function (_p2) {
						return _user$project$Types$StartVector(
							_user$project$Types$SS_KeyDown(_p2));
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$StartScene$view = function (kioskModel) {
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		'',
		'',
		A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$vspace(20),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src(kioskModel.flags.wavingHandUrl),
							_1: {
								ctor: '::',
								_0: _user$project$StartScene$logoImgStyle,
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$vspace(20),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h1,
								{
									ctor: '::',
									_0: _user$project$StartScene$h1Style,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Welcome!'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _user$project$Wizard_SceneUtils$vspace(0),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h1,
										{
											ctor: '::',
											_0: _user$project$StartScene$h1Style,
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('All Visitors Must Sign In'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _user$project$Wizard_SceneUtils$vspace(30),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$h2,
												{
													ctor: '::',
													_0: _user$project$StartScene$h2Style,
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Tap Spacebar or Screen to Start'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}),
		{ctor: '[]'},
		{ctor: '[]'});
};
var _user$project$StartScene$timeoutFor = function (scene) {
	var _p3 = scene;
	switch (_p3.ctor) {
		case 'AuthorizeEntry':
			return 300;
		case 'BuyMembership':
			return 300;
		case 'CheckIn':
			return 60;
		case 'CheckInDone':
			return 5;
		case 'CheckOut':
			return 60;
		case 'CheckOutDone':
			return 5;
		case 'CreatingAcct':
			return 300;
		case 'EmailInUse':
			return 300;
		case 'Error':
			return 600;
		case 'HowDidYouHear':
			return 300;
		case 'NewMember':
			return 600;
		case 'NewUser':
			return 600;
		case 'OldBusiness':
			return 300;
		case 'PublicHours':
			return 300;
		case 'ReasonForVisit':
			return 300;
		case 'RfidHelper':
			return 600;
		case 'SignUpDone':
			return 300;
		case 'Start':
			return 86400;
		case 'TaskList':
			return 300;
		case 'TimeSheetPt1':
			return 300;
		case 'TimeSheetPt2':
			return 600;
		case 'TimeSheetPt3':
			return 600;
		case 'TaskInfo':
			return 600;
		case 'UseBankedHours':
			return 300;
		case 'Waiver':
			return 600;
		case 'Welcome':
			return 60;
		case 'WelcomeForRfid':
			return 30;
		default:
			return 300;
	}
};
var _user$project$StartScene$tick = F2(
	function (time, kioskModel) {
		var tooLong = _user$project$StartScene$timeoutFor(
			_user$project$Wizard_SceneUtils$currentScene(kioskModel));
		var sceneModel = kioskModel.startModel;
		var newSeconds = sceneModel.idleSeconds + 1;
		var cmd = (_elm_lang$core$Native_Utils.cmp(newSeconds, tooLong) > 0) ? _user$project$Wizard_SceneUtils$send(
			_user$project$Types$WizardVector(_user$project$Types$Reset)) : _elm_lang$core$Platform_Cmd$none;
		var newSceneModel = _elm_lang$core$Native_Utils.update(
			sceneModel,
			{idleSeconds: newSeconds});
		return {ctor: '_Tuple2', _0: newSceneModel, _1: cmd};
	});
var _user$project$StartScene$update = F2(
	function (msg, kioskModel) {
		var amVisible = _elm_lang$core$Native_Utils.eq(
			_user$project$Wizard_SceneUtils$currentScene(kioskModel),
			_user$project$Types$Start);
		var sceneModel = kioskModel.startModel;
		var _p4 = msg;
		if (_p4.ctor === 'SS_MouseClick') {
			if (amVisible && (_elm_lang$core$Native_Utils.cmp(sceneModel.idleSeconds, 0) > 0)) {
				var msgToLog = A2(
					_elm_lang$core$Basics_ops['++'],
					'Start Scene clicked at: ',
					_elm_lang$core$Basics$toString(_p4._0));
				var logCmd = A4(kioskModel.xisSession.logMessage, 'kiosk', _user$project$XisRestApi$LL_Info, msgToLog, _user$project$Types$IgnoreResultHttpErrorString);
				var segueCmd = _user$project$Wizard_SceneUtils$segueTo(_user$project$Types$Welcome);
				return {
					ctor: '_Tuple2',
					_0: sceneModel,
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: segueCmd,
							_1: {
								ctor: '::',
								_0: logCmd,
								_1: {ctor: '[]'}
							}
						})
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{idleSeconds: 0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			}
		} else {
			if (amVisible) {
				var _p5 = _p4._0;
				if (_p5 === 32) {
					return {
						ctor: '_Tuple2',
						_0: sceneModel,
						_1: _user$project$Wizard_SceneUtils$segueTo(_user$project$Types$Welcome)
					};
				} else {
					return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
				}
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{idleSeconds: 0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			}
		}
	});
var _user$project$StartScene$sceneWillAppear = F2(
	function (kioskModel, appearingScene) {
		var sceneModel = kioskModel.startModel;
		return _elm_lang$core$Native_Utils.eq(appearingScene, _user$project$Types$Start) ? {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				sceneModel,
				{idleSeconds: 0}),
			_1: _user$project$Wizard_SceneUtils$hideKeyboard(
				{ctor: '_Tuple0'})
		} : {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				sceneModel,
				{idleSeconds: 0}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$StartScene$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: {idleSeconds: 0},
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$StartScene$StartModel = function (a) {
	return {idleSeconds: a};
};

var _user$project$SignUpDoneScene$view = function (kioskModel) {
	var sceneModel = kioskModel.signUpDoneModel;
	var _p0 = sceneModel.userName;
	if (_p0.ctor === 'Just') {
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Xerocraft Account Created!',
			'Just one more thing...',
			A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(30),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text('You must check in each time you visit'),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('so please remember that your userid is:'),
								_1: {
									ctor: '::',
									_0: _user$project$Wizard_SceneUtils$vspace(40),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _user$project$Wizard_SceneUtils$userIdStyle,
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(_p0._0),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _user$project$Wizard_SceneUtils$vspace(40),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html$text('Click the button below to check in now!'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}),
			{
				ctor: '::',
				_0: A3(
					_user$project$Wizard_SceneUtils$ButtonSpec,
					'Check In',
					_user$project$Types$WizardVector(
						_user$project$Types$Push(_user$project$Types$CheckIn)),
					true),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'});
	} else {
		return A2(_user$project$Wizard_SceneUtils$errorView, kioskModel, _user$project$Types$missingArguments);
	}
};
var _user$project$SignUpDoneScene$update = F2(
	function (msg, kioskModel) {
		var sceneModel = kioskModel.signUpDoneModel;
		var _p1 = msg;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				sceneModel,
				{
					userName: _elm_lang$core$Maybe$Just(_p1._0)
				}),
			_1: _user$project$Wizard_SceneUtils$send(
				_user$project$Types$WizardVector(
					_user$project$Types$Push(_user$project$Types$SignUpDone)))
		};
	});
var _user$project$SignUpDoneScene$sceneWillAppear = F3(
	function (kioskModel, appearing, vanishing) {
		var sceneModel = kioskModel.signUpDoneModel;
		var _p2 = {ctor: '_Tuple2', _0: appearing, _1: vanishing};
		if ((_p2.ctor === '_Tuple2') && (_p2._0.ctor === 'SignUpDone')) {
			return {
				ctor: '_Tuple2',
				_0: sceneModel,
				_1: _user$project$Wizard_SceneUtils$send(
					_user$project$Types$WizardVector(_user$project$Types$Rebase))
			};
		} else {
			return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$SignUpDoneScene$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: {userName: _elm_lang$core$Maybe$Nothing},
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$SignUpDoneScene$SignUpDoneModel = function (a) {
	return {userName: a};
};

var _user$project$TaskListScene$taskDivStyle = function (color) {
	return _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'background-color', color),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'padding', '10px'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin', '15px'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'border-radius', '20px'),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$TaskListScene$taskListStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'width', '500px'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-left', 'auto'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-right', 'auto'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'text-align', 'left'),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$TaskListScene$waitingView = function (kioskModel) {
	var sceneModel = kioskModel.taskListModel;
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		'One Moment Please!',
		'I\'m fetching a list of tasks for you',
		_elm_lang$html$Html$text(''),
		{ctor: '[]'},
		{ctor: '[]'});
};
var _user$project$TaskListScene$determineWorkableTasks = F2(
	function (sceneModel, xis) {
		var _p0 = {ctor: '_Tuple2', _0: sceneModel.todaysTasks, _1: sceneModel.member};
		if (((_p0.ctor === '_Tuple2') && (_p0._0.ctor === 'Received')) && (_p0._1.ctor === 'Just')) {
			var _p1 = _p0._1._0;
			var isCurrentClaimant = A2(xis.memberHasStatusOnTask, _p1.id, _user$project$XisRestApi$CurrentClaimStatus);
			var memberCanClaimTest = xis.memberCanClaimTask(_p1.id);
			var claimableTasks = A2(_elm_lang$core$List$filter, memberCanClaimTest, _p0._0._0);
			var claimedTask = A2(_elm_community$list_extra$List_Extra$find, isCurrentClaimant, claimableTasks);
			return _elm_lang$core$Native_Utils.update(
				sceneModel,
				{workableTasks: claimableTasks, selectedTask: claimedTask});
		} else {
			return sceneModel;
		}
	});
var _user$project$TaskListScene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var flags = kioskModel.flags;
		var sceneModel = kioskModel.taskListModel;
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'TL_Segue':
				var newSceneModel = A2(
					_user$project$TaskListScene$determineWorkableTasks,
					_elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							member: _elm_lang$core$Maybe$Just(_p2._0)
						}),
					xis);
				return {
					ctor: '_Tuple2',
					_0: newSceneModel,
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$WizardVector(
							_user$project$Types$Push(_user$project$Types$TaskList)))
				};
			case 'TL_ToggleTask':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							selectedTask: _elm_lang$core$Maybe$Just(_p2._0),
							badNews: {ctor: '[]'}
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'TL_ValidateTaskChoice':
				var _p3 = sceneModel.member;
				if (_p3.ctor === 'Nothing') {
					return {
						ctor: '_Tuple2',
						_0: sceneModel,
						_1: _user$project$Wizard_SceneUtils$send(
							_user$project$Types$ErrorVector(
								_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
					};
				} else {
					var _p8 = _p3._0;
					var _p4 = sceneModel.selectedTask;
					if (_p4.ctor === 'Just') {
						var _p7 = _p4._0;
						var existingClaim = A2(xis.membersClaimOnTask, _p8.id, _p7);
						var result2Msg = function (_p5) {
							return _user$project$Types$TaskListVector(
								_user$project$Types$TL_ClaimUpsertResult(_p5));
						};
						var upsertCmd = function () {
							var _p6 = existingClaim;
							if (_p6.ctor === 'Just') {
								var claimMod = A2(_user$project$XisRestApi$setClaimsStatus, _user$project$XisRestApi$WorkingClaimStatus, _p6._0);
								return A2(xis.replaceClaim, claimMod, result2Msg);
							} else {
								return A2(
									xis.createClaim,
									{
										claimedDuration: A2(_elm_lang$core$Maybe$withDefault, 0.0, _p7.data.workDuration),
										claimedStartTime: _elm_lang$core$Maybe$Just(
											_user$project$PointInTime$toClockTime(kioskModel.currTime)),
										dateVerified: _elm_lang$core$Maybe$Just(
											_user$project$PointInTime$toCalendarDate(kioskModel.currTime)),
										claimedTask: xis.taskUrl(_p7.id),
										claimingMember: xis.memberUrl(_p8.id),
										status: _user$project$XisRestApi$WorkingClaimStatus,
										workSet: {ctor: '[]'}
									},
									result2Msg);
							}
						}();
						return {ctor: '_Tuple2', _0: sceneModel, _1: upsertCmd};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								sceneModel,
								{
									badNews: {
										ctor: '::',
										_0: 'You must choose a task to work!',
										_1: {ctor: '[]'}
									}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
			case 'TL_TaskListResult':
				if (_p2._0.ctor === 'Ok') {
					var newSceneModel = A2(
						_user$project$TaskListScene$determineWorkableTasks,
						_elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								todaysTasks: _user$project$Fetchable$Received(_p2._0._0.results)
							}),
						xis);
					return {ctor: '_Tuple2', _0: newSceneModel, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								todaysTasks: _user$project$Fetchable$Failed(
									_elm_lang$core$Basics$toString(_p2._0._0))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'TL_ClaimUpsertResult':
				if (_p2._0.ctor === 'Ok') {
					var _p10 = _p2._0._0;
					var currClockTime = _user$project$PointInTime$toClockTime(kioskModel.currTime);
					var createWorkCmd = A2(
						xis.createWork,
						{
							claim: xis.claimUrl(_p10.id),
							witness: _elm_lang$core$Maybe$Nothing,
							workDate: _user$project$PointInTime$toCalendarDate(kioskModel.currTime),
							workDuration: _elm_lang$core$Maybe$Nothing,
							workStartTime: _elm_lang$core$Maybe$Just(currClockTime)
						},
						function (_p9) {
							return _user$project$Types$TaskListVector(
								_user$project$Types$TL_WorkInsertResult(_p9));
						});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								claimOnSelectedTask: _elm_lang$core$Maybe$Just(_p10)
							}),
						_1: createWorkCmd
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(_p2._0._0),
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			default:
				if (_p2._0.ctor === 'Ok') {
					var _p11 = {ctor: '_Tuple3', _0: sceneModel.member, _1: sceneModel.selectedTask, _2: sceneModel.claimOnSelectedTask};
					if (((_p11._0.ctor === 'Just') && (_p11._1.ctor === 'Just')) && (_p11._2.ctor === 'Just')) {
						return {
							ctor: '_Tuple2',
							_0: sceneModel,
							_1: _user$project$Wizard_SceneUtils$send(
								_user$project$Types$TaskInfoVector(
									_user$project$Types$TI_Segue(
										{ctor: '_Tuple3', _0: _p11._0._0, _1: _p11._1._0, _2: _p11._2._0})))
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: sceneModel,
							_1: _user$project$Wizard_SceneUtils$send(
								_user$project$Types$ErrorVector(
									_user$project$Types$ERR_Segue('Missing member or selected task.')))
						};
					}
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(_p2._0._0),
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _user$project$TaskListScene$getTodaysTasks = function (kioskModel) {
	var currDate = _user$project$PointInTime$toCalendarDate(kioskModel.currTime);
	var cmd = A2(
		kioskModel.xisSession.listTasks,
		{
			ctor: '::',
			_0: _user$project$XisRestApi$ScheduledDateEquals(currDate),
			_1: {ctor: '[]'}
		},
		function (_p12) {
			return _user$project$Types$TaskListVector(
				_user$project$Types$TL_TaskListResult(_p12));
		});
	var sceneModel = kioskModel.taskListModel;
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			sceneModel,
			{todaysTasks: _user$project$Fetchable$Pending}),
		_1: cmd
	};
};
var _user$project$TaskListScene$init = function (flags) {
	var sceneModel = {
		member: _elm_lang$core$Maybe$Nothing,
		todaysTasks: _user$project$Fetchable$Pending,
		workableTasks: {ctor: '[]'},
		selectedTask: _elm_lang$core$Maybe$Nothing,
		claimOnSelectedTask: _elm_lang$core$Maybe$Nothing,
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$TaskListScene$args = function (x) {
	return x.member;
};
var _user$project$TaskListScene$sceneWillAppear = F3(
	function (kioskModel, appearingScene, vanishingScene) {
		var sceneModel = kioskModel.taskListModel;
		var _p13 = {ctor: '_Tuple2', _0: appearingScene, _1: vanishingScene};
		_v6_3:
		do {
			if (_p13.ctor === '_Tuple2') {
				switch (_p13._0.ctor) {
					case 'ReasonForVisit':
						return _user$project$TaskListScene$getTodaysTasks(kioskModel);
					case 'TaskList':
						if (_p13._1.ctor === 'TaskInfo') {
							return _user$project$TaskListScene$getTodaysTasks(kioskModel);
						} else {
							var _p14 = _user$project$TaskListScene$args(sceneModel);
							if (_p14.ctor === 'Just') {
								return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
							} else {
								return {
									ctor: '_Tuple2',
									_0: sceneModel,
									_1: _user$project$Wizard_SceneUtils$send(
										_user$project$Types$ErrorVector(
											_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
								};
							}
						}
					default:
						break _v6_3;
				}
			} else {
				break _v6_3;
			}
		} while(false);
		return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$TaskListScene$idxTaskListScene = _user$project$Types$mdlIdBase(_user$project$Types$TaskList);
var _user$project$TaskListScene$taskChoices = F2(
	function (kioskModel, tasks) {
		var sceneModel = kioskModel.taskListModel;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$TaskListScene$taskListStyle,
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(30),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$List$indexedMap,
					F2(
						function (index, wt) {
							return A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _user$project$TaskListScene$taskDivStyle(
										_elm_lang$core$Native_Utils.eq(wt.data.priority, _user$project$XisRestApi$HighPriority) ? '#ccffcc' : '#dddddd'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A5(
										_debois$elm_mdl$Material_Toggles$radio,
										_user$project$Types$MdlVector,
										{
											ctor: '::',
											_0: _user$project$TaskListScene$idxTaskListScene,
											_1: {
												ctor: '::',
												_0: index,
												_1: {ctor: '[]'}
											}
										},
										kioskModel.mdl,
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Toggles$value(
												function () {
													var _p15 = sceneModel.selectedTask;
													if (_p15.ctor === 'Nothing') {
														return false;
													} else {
														return _elm_lang$core$Native_Utils.eq(_p15._0, wt);
													}
												}()),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Options$onToggle(
													_user$project$Types$TaskListVector(
														_user$project$Types$TL_ToggleTask(wt))),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(wt.data.shortDesc),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								});
						}),
					tasks)));
	});
var _user$project$TaskListScene$chooseView = F3(
	function (kioskModel, todaysTasks, member) {
		var sceneModel = kioskModel.taskListModel;
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Choose a Task',
			'Here are some you can work',
			A2(_user$project$TaskListScene$taskChoices, kioskModel, todaysTasks),
			{
				ctor: '::',
				_0: A3(
					_user$project$Wizard_SceneUtils$ButtonSpec,
					'OK',
					_user$project$Types$TaskListVector(_user$project$Types$TL_ValidateTaskChoice),
					true),
				_1: {ctor: '[]'}
			},
			sceneModel.badNews);
	});
var _user$project$TaskListScene$view = function (kioskModel) {
	var sceneModel = kioskModel.taskListModel;
	var _p16 = sceneModel.member;
	if (_p16.ctor === 'Just') {
		var _p17 = sceneModel.todaysTasks;
		switch (_p17.ctor) {
			case 'Pending':
				return _user$project$TaskListScene$waitingView(kioskModel);
			case 'Received':
				return A3(_user$project$TaskListScene$chooseView, kioskModel, sceneModel.workableTasks, _p16._0);
			default:
				return A2(_user$project$Wizard_SceneUtils$errorView, kioskModel, _p17._0);
		}
	} else {
		return A2(_user$project$Wizard_SceneUtils$errorView, kioskModel, _user$project$Types$missingArguments);
	}
};
var _user$project$TaskListScene$taskPriority_HIGH = 'H';
var _user$project$TaskListScene$staffingStatus_STAFFED = 'S';
var _user$project$TaskListScene$TaskListModel = F6(
	function (a, b, c, d, e, f) {
		return {member: a, todaysTasks: b, workableTasks: c, selectedTask: d, claimOnSelectedTask: e, badNews: f};
	});

var _user$project$TimeSheetCommon$otherWorkDescStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'line-height', '1'),
		_1: {
			ctor: '::',
			_0: A2(
				_user$project$Wizard_SceneUtils_ops['=>'],
				'font-size',
				_user$project$Wizard_SceneUtils$pt(20)),
			_1: {ctor: '[]'}
		}
	});
var _user$project$TimeSheetCommon$infoToVerifyStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'display', 'inline-block'),
		_1: {
			ctor: '::',
			_0: A2(
				_user$project$Wizard_SceneUtils_ops['=>'],
				'padding',
				_user$project$Wizard_SceneUtils$px(20)),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'background', _user$project$Wizard_SceneUtils$textAreaColor),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$Wizard_SceneUtils_ops['=>'],
						'border-width',
						_user$project$Wizard_SceneUtils$px(1)),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'border-color', 'black'),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$Wizard_SceneUtils_ops['=>'],
								'border-radius',
								_user$project$Wizard_SceneUtils$px(10)),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$Wizard_SceneUtils_ops['=>'],
									'width',
									_user$project$Wizard_SceneUtils$px(500)),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _user$project$TimeSheetCommon$infoDiv = F5(
	function (curr, task, claim, work, otherWorkDesc) {
		var workDurStr = function () {
			var _p0 = work.data.workDuration;
			if (_p0.ctor === 'Nothing') {
				return '';
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Duration$toString(_p0._0),
					' on ');
			}
		}();
		var dateStr = A2(_user$project$CalendarDate$format, '%a, %b %ddd', work.data.workDate);
		var today = _user$project$PointInTime$toCalendarDate(curr);
		var dateColor = A2(_user$project$CalendarDate$equal, today, work.data.workDate) ? 'black' : 'red';
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$TimeSheetCommon$infoToVerifyStyle,
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'\"',
						A2(_elm_lang$core$Basics_ops['++'], task.data.shortDesc, '\"'))),
				_1: {
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(20),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(workDurStr),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'color', dateColor),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(dateStr),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: function () {
									var _p1 = otherWorkDesc;
									if (_p1.ctor === 'Just') {
										return A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _user$project$TimeSheetCommon$otherWorkDescStyle,
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _user$project$Wizard_SceneUtils$vspace(20),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html$text(_p1._0),
													_1: {ctor: '[]'}
												}
											});
									} else {
										return _elm_lang$html$Html$text('');
									}
								}(),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	});

var _user$project$TimeSheetPt1Scene$pastWorkStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'color', 'red'),
		_1: {
			ctor: '::',
			_0: A2(
				_user$project$Wizard_SceneUtils_ops['=>'],
				'font-size',
				_user$project$Wizard_SceneUtils$pt(16)),
			_1: {ctor: '[]'}
		}
	});
var _user$project$TimeSheetPt1Scene$padHeaderStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(
			_user$project$Wizard_SceneUtils_ops['=>'],
			'height',
			_user$project$Wizard_SceneUtils$px(60)),
		_1: {ctor: '[]'}
	});
var _user$project$TimeSheetPt1Scene$padStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(
			_user$project$Wizard_SceneUtils_ops['=>'],
			'border-spacing',
			_user$project$Wizard_SceneUtils$px(10)),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'display', 'inline-block'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-left', 'auto'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-right', 'auto'),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$TimeSheetPt1Scene$normalView = F4(
	function (kioskModel, task, claim, work) {
		var today = _user$project$PointInTime$toCalendarDate(kioskModel.currTime);
		var workedToday = A2(_user$project$CalendarDate$equal, today, work.data.workDate);
		var sceneModel = kioskModel.timeSheetPt1Model;
		var hrButton = function (h) {
			return A2(
				_elm_lang$html$Html$td,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_user$project$Wizard_SceneUtils$padButton,
						kioskModel,
						A3(
							_user$project$Wizard_SceneUtils$PadButtonSpec,
							_elm_lang$core$Basics$toString(h),
							_user$project$Types$TimeSheetPt1Vector(
								_user$project$Types$TS1_HrPad(h)),
							_elm_lang$core$Native_Utils.eq(h, sceneModel.hrsWorked))),
					_1: {ctor: '[]'}
				});
		};
		var minButton = function (m) {
			return A2(
				_elm_lang$html$Html$td,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_user$project$Wizard_SceneUtils$padButton,
						kioskModel,
						A3(
							_user$project$Wizard_SceneUtils$PadButtonSpec,
							A3(
								_elm_lang$core$String$padLeft,
								2,
								_elm_lang$core$Native_Utils.chr('0'),
								_elm_lang$core$Basics$toString(m)),
							_user$project$Types$TimeSheetPt1Vector(
								_user$project$Types$TS1_MinPad(m)),
							_elm_lang$core$Native_Utils.eq(m, sceneModel.minsWorked))),
					_1: {ctor: '[]'}
				});
		};
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Volunteer Timesheet',
			'Let us know how long you worked!',
			A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(50),
					_1: {
						ctor: '::',
						_0: A5(_user$project$TimeSheetCommon$infoDiv, kioskModel.currTime, task, claim, work, _elm_lang$core$Maybe$Nothing),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(60),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$table,
									{
										ctor: '::',
										_0: _user$project$TimeSheetPt1Scene$padStyle,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$tr,
											{
												ctor: '::',
												_0: _user$project$TimeSheetPt1Scene$padHeaderStyle,
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$td,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$colspan(3),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Hours'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$td,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('&'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$td,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$colspan(3),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Minutes'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$tr,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: hrButton(0),
													_1: {
														ctor: '::',
														_0: hrButton(1),
														_1: {
															ctor: '::',
															_0: hrButton(2),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$td,
																	{ctor: '[]'},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: minButton(0),
																	_1: {
																		ctor: '::',
																		_0: minButton(10),
																		_1: {
																			ctor: '::',
																			_0: minButton(20),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$tr,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: hrButton(3),
														_1: {
															ctor: '::',
															_0: hrButton(4),
															_1: {
																ctor: '::',
																_0: hrButton(5),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$td,
																		{ctor: '[]'},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: minButton(30),
																		_1: {
																			ctor: '::',
																			_0: minButton(40),
																			_1: {
																				ctor: '::',
																				_0: minButton(50),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _user$project$Wizard_SceneUtils$vspace(20),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			{
				ctor: '::',
				_0: A3(
					_user$project$Wizard_SceneUtils$ButtonSpec,
					'Submit',
					_user$project$Types$TimeSheetPt1Vector(
						A3(_user$project$Types$TS1_Submit, task, claim, work)),
					true),
				_1: {ctor: '[]'}
			},
			sceneModel.badNews);
	});
var _user$project$TimeSheetPt1Scene$view = function (kioskModel) {
	var sceneModel = kioskModel.timeSheetPt1Model;
	var _p0 = sceneModel.tcw;
	if (_p0.ctor === 'Just') {
		return A4(_user$project$TimeSheetPt1Scene$normalView, kioskModel, _p0._0.task, _p0._0.claim, _p0._0.work);
	} else {
		return A2(_user$project$Wizard_SceneUtils$errorView, kioskModel, 'Sorry, but something went wrong.');
	}
};
var _user$project$TimeSheetPt1Scene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.timeSheetPt1Model;
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'TS1_Segue':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							sessionType: _elm_lang$core$Maybe$Just(_p1._0),
							member: _elm_lang$core$Maybe$Just(_p1._1),
							tcw: _elm_lang$core$Maybe$Just(_p1._2)
						}),
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$WizardVector(
							_user$project$Types$Push(_user$project$Types$TimeSheetPt1)))
				};
			case 'TS1_Submit':
				var maybeDelete = 'If you didn\'t work, hit BACK and delete this task.';
				var needNonZeroDur = 'Specify some hours and/or minutes of work.';
				var _p2 = {ctor: '_Tuple2', _0: sceneModel.hrsWorked, _1: sceneModel.minsWorked};
				if ((_p2._0 === 0) && (_p2._1 === 0)) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: needNonZeroDur,
									_1: {
										ctor: '::',
										_0: maybeDelete,
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var dur = (_elm_lang$core$Time$hour * _elm_lang$core$Basics$toFloat(_p2._0)) + (_elm_lang$core$Time$minute * _elm_lang$core$Basics$toFloat(_p2._1));
					var revisedWork = A2(
						_user$project$XisRestApi$setWorksDuration,
						_elm_lang$core$Maybe$Just(dur),
						_p1._2);
					var tcw = A3(_user$project$Types$TaskClaimWork, _p1._0, _p1._1, revisedWork);
					var _p3 = {ctor: '_Tuple2', _0: sceneModel.sessionType, _1: sceneModel.member};
					if (((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								sceneModel,
								{
									tcw: _elm_lang$core$Maybe$Just(tcw),
									badNews: {ctor: '[]'}
								}),
							_1: _user$project$Wizard_SceneUtils$send(
								_user$project$Types$TimeSheetPt2Vector(
									A3(_user$project$Types$TS2_Segue, _p3._0._0, _p3._1._0, tcw)))
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: sceneModel,
							_1: _user$project$Wizard_SceneUtils$send(
								_user$project$Types$ErrorVector(
									_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
						};
					}
				}
			case 'TS1_HrPad':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{hrsWorked: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{minsWorked: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$TimeSheetPt1Scene$sceneWillAppear = F3(
	function (kioskModel, appearing, vanishing) {
		var sceneModel = kioskModel.timeSheetPt1Model;
		var selectedItem = sceneModel.tcw;
		var _p4 = {ctor: '_Tuple3', _0: appearing, _1: vanishing, _2: selectedItem};
		_v4_3:
		do {
			switch (_p4._0.ctor) {
				case 'OldBusiness':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{tcw: _elm_lang$core$Maybe$Nothing, hrsWorked: 0, minsWorked: 0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'TimeSheetPt1':
					if (_p4._2.ctor === 'Just') {
						if (_p4._1.ctor === 'OldBusiness') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									sceneModel,
									{tcw: selectedItem}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							break _v4_3;
						}
					} else {
						return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
					}
				default:
					break _v4_3;
			}
		} while(false);
		return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$TimeSheetPt1Scene$init = function (flags) {
	var sceneModel = {
		sessionType: _elm_lang$core$Maybe$Nothing,
		member: _elm_lang$core$Maybe$Nothing,
		tcw: _elm_lang$core$Maybe$Nothing,
		hrsWorked: 0,
		minsWorked: 0,
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$TimeSheetPt1Scene$idxTimeSheetPt1 = _user$project$Types$mdlIdBase(_user$project$Types$TimeSheetPt1);
var _user$project$TimeSheetPt1Scene$TimeSheetPt1Model = F6(
	function (a, b, c, d, e, f) {
		return {sessionType: a, member: b, tcw: c, hrsWorked: d, minsWorked: e, badNews: f};
	});

var _user$project$TimeSheetPt2Scene$textAreaContainerStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'display', 'inline-block'),
		_1: {
			ctor: '::',
			_0: A2(
				_user$project$Wizard_SceneUtils_ops['=>'],
				'padding-top',
				_user$project$Wizard_SceneUtils$px(20)),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'border-style', 'solid'),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$Wizard_SceneUtils_ops['=>'],
						'border-width',
						_user$project$Wizard_SceneUtils$px(1)),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$Wizard_SceneUtils_ops['=>'],
							'border-radius',
							_user$project$Wizard_SceneUtils$px(10)),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$Wizard_SceneUtils_ops['=>'],
								'width',
								_user$project$Wizard_SceneUtils$px(550)),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'background-color', 'white'),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _user$project$TimeSheetPt2Scene$sceneWillAppear = F3(
	function (kioskModel, appearingScene, vanishingScene) {
		var sceneModel = kioskModel.timeSheetPt2Model;
		var _p0 = {ctor: '_Tuple2', _0: appearingScene, _1: vanishingScene};
		if (_p0._0.ctor === 'TimeSheetPt2') {
			var _p1 = {ctor: '_Tuple3', _0: sceneModel.tcw, _1: sceneModel.sessionType, _2: sceneModel.member};
			if ((((_p1.ctor === '_Tuple3') && (_p1._0.ctor === 'Just')) && (_p1._1.ctor === 'Just')) && (_p1._2.ctor === 'Just')) {
				var _p2 = _p1._0._0;
				return _elm_lang$core$Native_Utils.eq(_p2.task.data.shortDesc, 'Other Work') ? {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none} : (_elm_lang$core$Native_Utils.eq(vanishingScene, _user$project$Types$TimeSheetPt1) ? {
					ctor: '_Tuple2',
					_0: sceneModel,
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$TimeSheetPt3Vector(
							A4(_user$project$Types$TS3_Segue, _p1._1._0, _p1._2._0, _p2, _elm_lang$core$Maybe$Nothing)))
				} : {ctor: '_Tuple2', _0: sceneModel, _1: _user$project$Wizard_SceneUtils$pop});
			} else {
				return {
					ctor: '_Tuple2',
					_0: sceneModel,
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$ErrorVector(
							_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
				};
			}
		} else {
			return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$TimeSheetPt2Scene$init = function (flags) {
	var sceneModel = {
		sessionType: _elm_lang$core$Maybe$Nothing,
		member: _elm_lang$core$Maybe$Nothing,
		tcw: _elm_lang$core$Maybe$Nothing,
		otherWorkDesc: '',
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$TimeSheetPt2Scene$moreInfoReqd = 'Please provide more information about the work you did.';
var _user$project$TimeSheetPt2Scene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.timeSheetPt2Model;
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'TS2_Segue':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							member: _elm_lang$core$Maybe$Just(_p3._1),
							sessionType: _elm_lang$core$Maybe$Just(_p3._0),
							tcw: _elm_lang$core$Maybe$Just(_p3._2)
						}),
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$WizardVector(
							_user$project$Types$Push(_user$project$Types$TimeSheetPt2)))
				};
			case 'TS2_UpdateDescription':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{otherWorkDesc: _p3._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				if (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$String$length(
						_elm_lang$core$String$trim(sceneModel.otherWorkDesc)),
					10) < 0) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _user$project$TimeSheetPt2Scene$moreInfoReqd,
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p4 = {ctor: '_Tuple3', _0: sceneModel.tcw, _1: sceneModel.sessionType, _2: sceneModel.member};
					if ((((_p4.ctor === '_Tuple3') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) {
						return {
							ctor: '_Tuple2',
							_0: sceneModel,
							_1: _user$project$Wizard_SceneUtils$send(
								_user$project$Types$TimeSheetPt3Vector(
									A4(
										_user$project$Types$TS3_Segue,
										_p4._1._0,
										_p4._2._0,
										_p4._0._0,
										_elm_lang$core$Maybe$Just(sceneModel.otherWorkDesc))))
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: sceneModel,
							_1: _user$project$Wizard_SceneUtils$send(
								_user$project$Types$ErrorVector(
									_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
						};
					}
				}
		}
	});
var _user$project$TimeSheetPt2Scene$idxTimeSheetPt2 = _user$project$Types$mdlIdBase(_user$project$Types$TimeSheetPt2);
var _user$project$TimeSheetPt2Scene$idxOtherWorkDesc = {
	ctor: '::',
	_0: _user$project$TimeSheetPt2Scene$idxTimeSheetPt2,
	_1: {
		ctor: '::',
		_0: 1,
		_1: {ctor: '[]'}
	}
};
var _user$project$TimeSheetPt2Scene$viewNormal = F4(
	function (kioskModel, task, claim, work) {
		var sceneModel = kioskModel.timeSheetPt2Model;
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Volunteer Timesheet',
			'Please describe the work you did',
			A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(50),
					_1: {
						ctor: '::',
						_0: A5(_user$project$TimeSheetCommon$infoDiv, kioskModel.currTime, task, claim, work, _elm_lang$core$Maybe$Nothing),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(70),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _user$project$TimeSheetPt2Scene$textAreaContainerStyle,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A6(
											_user$project$Wizard_SceneUtils$sceneTextArea,
											kioskModel,
											_user$project$TimeSheetPt2Scene$idxOtherWorkDesc,
											'Description of work done',
											sceneModel.otherWorkDesc,
											6,
											function (_p5) {
												return _user$project$Types$TimeSheetPt2Vector(
													_user$project$Types$TS2_UpdateDescription(_p5));
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _user$project$Wizard_SceneUtils$vspace(20),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			{
				ctor: '::',
				_0: A3(
					_user$project$Wizard_SceneUtils$ButtonSpec,
					'Continue',
					_user$project$Types$TimeSheetPt2Vector(_user$project$Types$TS2_Continue),
					true),
				_1: {ctor: '[]'}
			},
			sceneModel.badNews);
	});
var _user$project$TimeSheetPt2Scene$view = function (kioskModel) {
	var _p6 = kioskModel.timeSheetPt2Model.tcw;
	if (_p6.ctor === 'Just') {
		return A4(_user$project$TimeSheetPt2Scene$viewNormal, kioskModel, _p6._0.task, _p6._0.claim, _p6._0.work);
	} else {
		return A2(_user$project$Wizard_SceneUtils$errorView, kioskModel, _user$project$Types$missingArguments);
	}
};
var _user$project$TimeSheetPt2Scene$TimeSheetPt2Model = F5(
	function (a, b, c, d, e) {
		return {sessionType: a, member: b, tcw: c, otherWorkDesc: d, badNews: e};
	});

var _user$project$TimeSheetPt3Scene$view_ThankWitness = F2(
	function (kioskModel, witness) {
		var sceneModel = kioskModel.timeSheetPt3Model;
		var _p0 = {ctor: '_Tuple2', _0: sceneModel.sessionType, _1: sceneModel.member};
		if (((_p0.ctor === '_Tuple2') && (_p0._0.ctor === 'Just')) && (_p0._1.ctor === 'Just')) {
			return A6(
				_user$project$Wizard_SceneUtils$genericScene,
				kioskModel,
				'Volunteer Timesheet',
				'Thanks for Witnessing!',
				A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$vspace(40),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'\'',
									A2(_elm_lang$core$Basics_ops['++'], witness.data.userName, '\' has witnessed the work!'))),
							_1: {
								ctor: '::',
								_0: _user$project$Wizard_SceneUtils$vspace(20),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'\'',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p0._1._0.data.userName,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'\' should now continue their ',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_user$project$Types$sessionTypeStr(_p0._0._0),
														'.'))))),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				{
					ctor: '::',
					_0: A3(
						_user$project$Wizard_SceneUtils$ButtonSpec,
						'Ok',
						_user$project$Wizard_SceneUtils$popToMsg(_user$project$Types$OldBusiness),
						true),
					_1: {ctor: '[]'}
				},
				sceneModel.badNews);
		} else {
			return A2(_user$project$Wizard_SceneUtils$errorView, kioskModel, _user$project$Types$missingArguments);
		}
	});
var _user$project$TimeSheetPt3Scene$view_IsWitnessNeeded = F4(
	function (kioskModel, task, claim, work) {
		var sceneModel = kioskModel.timeSheetPt3Model;
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Volunteer Timesheet',
			'Do you need this work to be witnessed?',
			A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(50),
					_1: {
						ctor: '::',
						_0: A5(_user$project$TimeSheetCommon$infoDiv, kioskModel.currTime, task, claim, work, sceneModel.otherWorkDesc),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(70),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('If you want this work to apply to Work-Trade, you need to have it witnessed by a Staffer. If not, you can skip this step.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			{
				ctor: '::',
				_0: A3(
					_user$project$Wizard_SceneUtils$ButtonSpec,
					'Witness',
					_user$project$Types$TimeSheetPt3Vector(_user$project$Types$TS3_NeedWitness),
					true),
				_1: {
					ctor: '::',
					_0: A3(
						_user$project$Wizard_SceneUtils$ButtonSpec,
						'Skip',
						_user$project$Types$TimeSheetPt3Vector(_user$project$Types$TS3_Skipped),
						true),
					_1: {ctor: '[]'}
				}
			},
			sceneModel.badNews);
	});
var _user$project$TimeSheetPt3Scene$args = function (x) {
	return {ctor: '_Tuple4', _0: x.sessionType, _1: x.member, _2: x.tcw, _3: x.otherWorkDesc};
};
var _user$project$TimeSheetPt3Scene$idxTimeSheetPt3 = _user$project$Types$mdlIdBase(_user$project$Types$TimeSheetPt3);
var _user$project$TimeSheetPt3Scene$idxWitnessUsername = {
	ctor: '::',
	_0: _user$project$TimeSheetPt3Scene$idxTimeSheetPt3,
	_1: {
		ctor: '::',
		_0: 1,
		_1: {ctor: '[]'}
	}
};
var _user$project$TimeSheetPt3Scene$idxWitnessPassword = {
	ctor: '::',
	_0: _user$project$TimeSheetPt3Scene$idxTimeSheetPt3,
	_1: {
		ctor: '::',
		_0: 2,
		_1: {ctor: '[]'}
	}
};
var _user$project$TimeSheetPt3Scene$view_IdentifyWitness = F6(
	function (kioskModel, task, claim, work, witnessUname, witnessPword) {
		var sceneModel = kioskModel.timeSheetPt3Model;
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Volunteer Timesheet',
			'Do you need this work to be witnessed?',
			A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(50),
					_1: {
						ctor: '::',
						_0: A5(_user$project$TimeSheetCommon$infoDiv, kioskModel.currTime, task, claim, work, sceneModel.otherWorkDesc),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(70),
							_1: {
								ctor: '::',
								_0: A5(
									_user$project$Wizard_SceneUtils$sceneTextField,
									kioskModel,
									_user$project$TimeSheetPt3Scene$idxWitnessUsername,
									'Witness Username',
									witnessUname,
									function (_p1) {
										return _user$project$Types$TimeSheetPt3Vector(
											_user$project$Types$TS3_UpdateWitnessUsername(_p1));
									}),
								_1: {
									ctor: '::',
									_0: _user$project$Wizard_SceneUtils$vspace(40),
									_1: {
										ctor: '::',
										_0: A5(
											_user$project$Wizard_SceneUtils$scenePasswordField,
											kioskModel,
											_user$project$TimeSheetPt3Scene$idxWitnessPassword,
											'Witness Password',
											witnessPword,
											function (_p2) {
												return _user$project$Types$TimeSheetPt3Vector(
													_user$project$Types$TS3_UpdateWitnessPassword(_p2));
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}),
			{
				ctor: '::',
				_0: A3(
					_user$project$Wizard_SceneUtils$ButtonSpec,
					'Witness',
					_user$project$Types$TimeSheetPt3Vector(_user$project$Types$TS3_WitnessCredsReady),
					true),
				_1: {ctor: '[]'}
			},
			sceneModel.badNews);
	});
var _user$project$TimeSheetPt3Scene$view = function (kioskModel) {
	var sceneModel = kioskModel.timeSheetPt3Model;
	var _p3 = {ctor: '_Tuple3', _0: sceneModel.sessionType, _1: sceneModel.member, _2: sceneModel.tcw};
	if ((((_p3.ctor === '_Tuple3') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) && (_p3._2.ctor === 'Just')) {
		var _p7 = _p3._2._0.work;
		var _p6 = _p3._2._0.task;
		var _p5 = _p3._2._0.claim;
		var _p4 = sceneModel.state;
		switch (_p4.ctor) {
			case 'AskingAboutWitness':
				return A4(_user$project$TimeSheetPt3Scene$view_IsWitnessNeeded, kioskModel, _p6, _p5, _p7);
			case 'AskingWitnessForId':
				return A6(_user$project$TimeSheetPt3Scene$view_IdentifyWitness, kioskModel, _p6, _p5, _p7, _p4._0, _p4._1);
			case 'UpdatingTimeSheet':
				return _user$project$Wizard_SceneUtils$blankGenericScene(kioskModel);
			default:
				return A2(_user$project$TimeSheetPt3Scene$view_ThankWitness, kioskModel, _p4._0);
		}
	} else {
		return A2(_user$project$Wizard_SceneUtils$errorView, kioskModel, _user$project$Types$missingArguments);
	}
};
var _user$project$TimeSheetPt3Scene$TimeSheetPt3Model = F6(
	function (a, b, c, d, e, f) {
		return {sessionType: a, member: b, tcw: c, otherWorkDesc: d, state: e, badNews: f};
	});
var _user$project$TimeSheetPt3Scene$ThankingWitness = function (a) {
	return {ctor: 'ThankingWitness', _0: a};
};
var _user$project$TimeSheetPt3Scene$UpdatingTimeSheet = function (a) {
	return {ctor: 'UpdatingTimeSheet', _0: a};
};
var _user$project$TimeSheetPt3Scene$AskingWitnessForId = F2(
	function (a, b) {
		return {ctor: 'AskingWitnessForId', _0: a, _1: b};
	});
var _user$project$TimeSheetPt3Scene$AskingAboutWitness = {ctor: 'AskingAboutWitness'};
var _user$project$TimeSheetPt3Scene$init = function (flags) {
	var sceneModel = {
		sessionType: _elm_lang$core$Maybe$Nothing,
		member: _elm_lang$core$Maybe$Nothing,
		tcw: _elm_lang$core$Maybe$Nothing,
		otherWorkDesc: _elm_lang$core$Maybe$Nothing,
		state: _user$project$TimeSheetPt3Scene$AskingAboutWitness,
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$TimeSheetPt3Scene$sceneWillAppear = F3(
	function (kioskModel, appearing, vanishing) {
		var sceneModel = kioskModel.timeSheetPt3Model;
		var _p8 = {ctor: '_Tuple2', _0: appearing, _1: vanishing};
		if (_p8._0.ctor === 'TimeSheetPt3') {
			var _p9 = _user$project$TimeSheetPt3Scene$args(sceneModel);
			if ((((_p9.ctor === '_Tuple4') && (_p9._0.ctor === 'Just')) && (_p9._1.ctor === 'Just')) && (_p9._2.ctor === 'Just')) {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{state: _user$project$TimeSheetPt3Scene$AskingAboutWitness}),
					_1: _user$project$Wizard_SceneUtils$focusOnIndex(_user$project$TimeSheetPt3Scene$idxWitnessUsername)
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: sceneModel,
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$ErrorVector(
							_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
				};
			}
		} else {
			return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$TimeSheetPt3Scene$thankTheWitness = function (kioskModel) {
	var sceneModel = kioskModel.timeSheetPt3Model;
	var _p10 = sceneModel.state;
	if (_p10.ctor === 'UpdatingTimeSheet') {
		if (_p10._0.ctor === 'Just') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					sceneModel,
					{
						badNews: {ctor: '[]'},
						state: _user$project$TimeSheetPt3Scene$ThankingWitness(_p10._0._0)
					}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					sceneModel,
					{
						badNews: {ctor: '[]'},
						state: _user$project$TimeSheetPt3Scene$AskingAboutWitness
					}),
				_1: _user$project$Wizard_SceneUtils$popTo(_user$project$Types$OldBusiness)
			};
		}
	} else {
		return {
			ctor: '_Tuple2',
			_0: sceneModel,
			_1: _user$project$Wizard_SceneUtils$send(
				_user$project$Types$ErrorVector(
					_user$project$Types$ERR_Segue(_user$project$Wizard_SceneUtils$programmingError)))
		};
	}
};
var _user$project$TimeSheetPt3Scene$update = F2(
	function (msg, kioskModel) {
		var amVisible = _elm_lang$core$Native_Utils.eq(
			_user$project$Wizard_SceneUtils$currentScene(kioskModel),
			_user$project$Types$TimeSheetPt3);
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.timeSheetPt3Model;
		var _p11 = msg;
		switch (_p11.ctor) {
			case 'TS3_Segue':
				var _p12 = _p11._3;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							sessionType: _elm_lang$core$Maybe$Just(_p11._0),
							member: _elm_lang$core$Maybe$Just(_p11._1),
							tcw: _elm_lang$core$Maybe$Just(_p11._2),
							otherWorkDesc: _p12
						}),
					_1: function () {
						var transition = _elm_lang$core$Native_Utils.eq(_p12, _elm_lang$core$Maybe$Nothing) ? _user$project$Types$ReplaceWith : _user$project$Types$Push;
						return _user$project$Wizard_SceneUtils$send(
							_user$project$Types$WizardVector(
								transition(_user$project$Types$TimeSheetPt3)));
					}()
				};
			case 'TS3_UpdateWitnessUsername':
				var _p13 = sceneModel.state;
				if (_p13.ctor === 'AskingWitnessForId') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								state: A2(_user$project$TimeSheetPt3Scene$AskingWitnessForId, _p11._0, _p13._1)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: sceneModel,
						_1: _user$project$Wizard_SceneUtils$send(
							_user$project$Types$ErrorVector(
								_user$project$Types$ERR_Segue(_user$project$Wizard_SceneUtils$programmingError)))
					};
				}
			case 'TS3_UpdateWitnessPassword':
				var _p14 = sceneModel.state;
				if (_p14.ctor === 'AskingWitnessForId') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								state: A2(_user$project$TimeSheetPt3Scene$AskingWitnessForId, _p14._0, _p11._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: sceneModel,
						_1: _user$project$Wizard_SceneUtils$send(
							_user$project$Types$ErrorVector(
								_user$project$Types$ERR_Segue(_user$project$Wizard_SceneUtils$programmingError)))
					};
				}
			case 'TS3_NeedWitness':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							state: A2(_user$project$TimeSheetPt3Scene$AskingWitnessForId, '', '')
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'TS3_WitnessCredsReady':
				var _p15 = sceneModel.state;
				if (_p15.ctor === 'AskingWitnessForId') {
					var _p18 = _p15._0;
					var _p17 = _p15._1;
					if (_elm_lang$core$String$isEmpty(_p18) || _elm_lang$core$String$isEmpty(_p17)) {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								sceneModel,
								{
									badNews: {
										ctor: '::',
										_0: 'Witness name and password must be provided.',
										_1: {ctor: '[]'}
									}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						var cmd = A3(
							xis.authenticate,
							_user$project$XisRestApi$djangoizeId(_p18),
							_p17,
							function (_p16) {
								return _user$project$Types$TimeSheetPt3Vector(
									_user$project$Types$TS3_WitnessAuthResult(_p16));
							});
						return {ctor: '_Tuple2', _0: sceneModel, _1: cmd};
					}
				} else {
					return {
						ctor: '_Tuple2',
						_0: sceneModel,
						_1: _user$project$Wizard_SceneUtils$send(
							_user$project$Types$ErrorVector(
								_user$project$Types$ERR_Segue(_user$project$Wizard_SceneUtils$programmingError)))
					};
				}
			case 'TS3_Skipped':
				var _p19 = sceneModel.tcw;
				if (_p19.ctor === 'Nothing') {
					return {
						ctor: '_Tuple2',
						_0: sceneModel,
						_1: _user$project$Wizard_SceneUtils$send(
							_user$project$Types$ErrorVector(
								_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
					};
				} else {
					var workMod = A2(_user$project$XisRestApi$setWorksWitness, _elm_lang$core$Maybe$Nothing, _p19._0.work);
					var cmd = A2(
						xis.replaceWork,
						workMod,
						function (_p20) {
							return _user$project$Types$TimeSheetPt3Vector(
								_user$project$Types$TS3_WorkUpdated(_p20));
						});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {ctor: '[]'},
								state: _user$project$TimeSheetPt3Scene$UpdatingTimeSheet(_elm_lang$core$Maybe$Nothing)
							}),
						_1: cmd
					};
				}
			case 'TS3_WitnessAuthResult':
				if (_p11._0.ctor === 'Ok') {
					var _p21 = sceneModel.tcw;
					if (_p21.ctor === 'Nothing') {
						return {
							ctor: '_Tuple2',
							_0: sceneModel,
							_1: _user$project$Wizard_SceneUtils$send(
								_user$project$Types$ErrorVector(
									_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
						};
					} else {
						var _p22 = {ctor: '_Tuple2', _0: _p11._0._0.isAuthentic, _1: _p11._0._0.authenticatedMember};
						if (_p22._0 === true) {
							if (_p22._1.ctor === 'Just') {
								var _p24 = _p22._1._0;
								var witnessUrl = xis.memberUrl(_p24.id);
								var workMod = A2(
									_user$project$XisRestApi$setWorksWitness,
									_elm_lang$core$Maybe$Just(witnessUrl),
									_p21._0.work);
								var cmd1 = A2(
									xis.replaceWork,
									workMod,
									function (_p23) {
										return _user$project$Types$TimeSheetPt3Vector(
											_user$project$Types$TS3_WorkUpdated(_p23));
									});
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										sceneModel,
										{
											badNews: {ctor: '[]'},
											state: _user$project$TimeSheetPt3Scene$UpdatingTimeSheet(
												_elm_lang$core$Maybe$Just(_p24))
										}),
									_1: cmd1
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: sceneModel,
									_1: _user$project$Wizard_SceneUtils$send(
										_user$project$Types$ErrorVector(
											_user$project$Types$ERR_Segue(_user$project$Wizard_SceneUtils$programmingError)))
								};
							}
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									sceneModel,
									{
										badNews: {
											ctor: '::',
											_0: 'Could not authenticate',
											_1: {ctor: '[]'}
										}
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						}
					}
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(_p11._0._0),
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'TS3_ClaimUpdated':
				if (_p11._0.ctor === 'Ok') {
					var _p27 = sceneModel.tcw;
					if (_p27.ctor === 'Just') {
						var _p28 = sceneModel.otherWorkDesc;
						if (_p28.ctor === 'Just') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									sceneModel,
									{
										badNews: {ctor: '[]'}
									}),
								_1: A2(
									xis.createWorkNote,
									{
										author: _elm_lang$core$Maybe$Just(_p27._0.claim.data.claimingMember),
										content: _p28._0,
										work: xis.workUrl(_p27._0.work.id),
										whenWritten: kioskModel.currTime
									},
									function (_p29) {
										return _user$project$Types$TimeSheetPt3Vector(
											_user$project$Types$TS3_WorkNoteCreated(_p29));
									})
							};
						} else {
							return _user$project$TimeSheetPt3Scene$thankTheWitness(kioskModel);
						}
					} else {
						return {
							ctor: '_Tuple2',
							_0: sceneModel,
							_1: _user$project$Wizard_SceneUtils$send(
								_user$project$Types$ErrorVector(
									_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
						};
					}
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							sceneModel,
							{
								badNews: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(_p11._0._0),
									_1: {ctor: '[]'}
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'TS3_WorkUpdated':
				if (_p11._0.ctor === 'Ok') {
					var _p25 = sceneModel.tcw;
					if (_p25.ctor === 'Nothing') {
						return {
							ctor: '_Tuple2',
							_0: sceneModel,
							_1: _user$project$Wizard_SceneUtils$send(
								_user$project$Types$ErrorVector(
									_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)))
						};
					} else {
						var claimMod = A2(_user$project$XisRestApi$setClaimsStatus, _user$project$XisRestApi$DoneClaimStatus, _p25._0.claim);
						var cmd = A2(
							xis.replaceClaim,
							claimMod,
							function (_p26) {
								return _user$project$Types$TimeSheetPt3Vector(
									_user$project$Types$TS3_ClaimUpdated(_p26));
							});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								sceneModel,
								{
									badNews: {ctor: '[]'}
								}),
							_1: cmd
						};
					}
				} else {
					var _p31 = _p11._0._0;
					var _p30 = _p31;
					if (_p30.ctor === 'BadStatus') {
						return _elm_lang$core$Native_Utils.eq(_p30._0.status.code, 403) ? {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								sceneModel,
								{
									badNews: {
										ctor: '::',
										_0: 'Bad username/password?',
										_1: {ctor: '[]'}
									}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						} : {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								sceneModel,
								{
									badNews: {
										ctor: '::',
										_0: _elm_lang$core$Basics$toString(_p31),
										_1: {ctor: '[]'}
									}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								sceneModel,
								{
									badNews: {
										ctor: '::',
										_0: _elm_lang$core$Basics$toString(_p31),
										_1: {ctor: '[]'}
									}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
			default:
				if (_p11._0.ctor === 'Ok') {
					return _user$project$TimeSheetPt3Scene$thankTheWitness(kioskModel);
				} else {
					return {
						ctor: '_Tuple2',
						_0: sceneModel,
						_1: _user$project$Wizard_SceneUtils$popTo(_user$project$Types$OldBusiness)
					};
				}
		}
	});
var _user$project$TimeSheetPt3Scene$rfidWasSwiped = F2(
	function (kioskModel, result) {
		var sceneModel = kioskModel.timeSheetPt3Model;
		var _p32 = result;
		if (_p32.ctor === 'Ok') {
			return A2(
				_user$project$TimeSheetPt3Scene$update,
				_user$project$Types$TS3_WitnessAuthResult(
					_elm_lang$core$Result$Ok(
						A2(
							_user$project$XisRestApi$AuthenticationResult,
							true,
							_elm_lang$core$Maybe$Just(_p32._0)))),
				kioskModel);
		} else {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					sceneModel,
					{
						badNews: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(_p32._0),
							_1: {ctor: '[]'}
						}
					}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});

var _user$project$TaskInfoScene$instructionPara = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'font-size', '16pt'),
		_1: {ctor: '[]'}
	});
var _user$project$TaskInfoScene$instructionDiv = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'width', '650px'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-left', 'auto'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'margin-right', 'auto'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'line-height', '1'),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$TaskInfoScene$update = F2(
	function (msg, kioskModel) {
		var sceneModel = kioskModel.taskInfoModel;
		var _p0 = msg;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				sceneModel,
				{
					member: _elm_lang$core$Maybe$Just(_p0._0._0),
					task: _elm_lang$core$Maybe$Just(_p0._0._1),
					claim: _elm_lang$core$Maybe$Just(_p0._0._2)
				}),
			_1: _user$project$Wizard_SceneUtils$send(
				_user$project$Types$WizardVector(
					_user$project$Types$Push(_user$project$Types$TaskInfo)))
		};
	});
var _user$project$TaskInfoScene$sceneWillAppear = F3(
	function (kioskModel, appearing, vanishing) {
		var sceneModel = kioskModel.taskInfoModel;
		var _p1 = {ctor: '_Tuple2', _0: appearing, _1: vanishing};
		if ((_p1.ctor === '_Tuple2') && (_p1._0.ctor === 'TaskInfo')) {
			return {ctor: '_Tuple2', _0: sceneModel, _1: _user$project$Wizard_SceneUtils$rebase};
		} else {
			return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$TaskInfoScene$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: {member: _elm_lang$core$Maybe$Nothing, task: _elm_lang$core$Maybe$Nothing, claim: _elm_lang$core$Maybe$Nothing},
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$TaskInfoScene$args = function (x) {
	return {ctor: '_Tuple3', _0: x.member, _1: x.task, _2: x.claim};
};
var _user$project$TaskInfoScene$view = function (kioskModel) {
	var _p2 = _user$project$TaskInfoScene$args(kioskModel.taskInfoModel);
	if ((((_p2.ctor === '_Tuple3') && (_p2._0.ctor === 'Just')) && (_p2._1.ctor === 'Just')) && (_p2._2.ctor === 'Just')) {
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Thanks for Helping!',
			'Instructions Follow:',
			A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _user$project$TaskInfoScene$instructionDiv,
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$vspace(20),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _user$project$TaskInfoScene$instructionPara,
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(_p2._1._0.data.instructions),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(30),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('When the task is completed, return to this kiosk and use Check Out to close it.'),
								_1: {
									ctor: '::',
									_0: _user$project$Wizard_SceneUtils$vspace(20),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			{
				ctor: '::',
				_0: A3(
					_user$project$Wizard_SceneUtils$ButtonSpec,
					'Got It!',
					_user$project$Types$OldBusinessVector(
						A3(_user$project$Types$OB_SegueB, _user$project$Types$CheckInSession, _p2._0._0, _p2._2._0)),
					true),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'});
	} else {
		return A2(_user$project$Wizard_SceneUtils$errorView, kioskModel, _user$project$Types$missingArguments);
	}
};
var _user$project$TaskInfoScene$TaskInfoModel = F3(
	function (a, b, c) {
		return {member: a, task: b, claim: c};
	});

var _user$project$UseBankedHoursScene$view = function (kioskModel) {
	var xis = kioskModel.xisSession;
	var sceneModel = kioskModel.useBankedHoursModel;
	var _p0 = sceneModel.member;
	if (_p0.ctor === 'Nothing') {
		return A2(_user$project$Wizard_SceneUtils$errorView, kioskModel, _user$project$Types$missingArguments);
	} else {
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Supporting Members Only',
			'We are not currently open to the public',
			_elm_lang$html$Html$text('Hello!'),
			{ctor: '[]'},
			{ctor: '[]'});
	}
};
var _user$project$UseBankedHoursScene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.useBankedHoursModel;
		var _p1 = msg;
		var newSceneModel = _elm_lang$core$Native_Utils.update(
			sceneModel,
			{
				member: _elm_lang$core$Maybe$Just(_p1._0)
			});
		return {ctor: '_Tuple2', _0: newSceneModel, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$UseBankedHoursScene$useBankedHoursButNotMember = F5(
	function (xis, member, now, nowBlock, allTypes) {
		var isCurrent = function () {
			var _p2 = member.data.latestNonfutureMembership;
			if (_p2.ctor === 'Just') {
				return A2(
					xis.coverTime,
					{
						ctor: '::',
						_0: _p2._0,
						_1: {ctor: '[]'}
					},
					now);
			} else {
				return false;
			}
		}();
		var defaultBlockTypeName = function () {
			var _p3 = xis.defaultBlockType(allTypes);
			if (_p3.ctor === 'Just') {
				return _p3._0.data.name;
			} else {
				return '';
			}
		}();
		var useBankedHoursStr = 'Members Only';
		var isUseBankedHours = function () {
			var _p4 = nowBlock;
			if (_p4.ctor === 'Just') {
				return A3(xis.blockHasType, useBankedHoursStr, allTypes, _p4._0);
			} else {
				return _elm_lang$core$Native_Utils.eq(defaultBlockTypeName, useBankedHoursStr);
			}
		}();
		return isUseBankedHours && (!isCurrent);
	});
var _user$project$UseBankedHoursScene$UseBankedHoursModel = F3(
	function (a, b, c) {
		return {member: a, paymentInfoState: b, badNews: c};
	});
var _user$project$UseBankedHoursScene$SendingPaymentInfo = {ctor: 'SendingPaymentInfo'};
var _user$project$UseBankedHoursScene$PaymentInfoSent = {ctor: 'PaymentInfoSent'};
var _user$project$UseBankedHoursScene$ExplainingHowToPayNow = {ctor: 'ExplainingHowToPayNow'};
var _user$project$UseBankedHoursScene$PresentingOptions = {ctor: 'PresentingOptions'};
var _user$project$UseBankedHoursScene$init = function (flags) {
	var sceneModel = {
		member: _elm_lang$core$Maybe$Nothing,
		paymentInfoState: _user$project$UseBankedHoursScene$PresentingOptions,
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
};

var _user$project$WelcomeForRfidScene$bottomImgStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'text-align', 'center'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'padding-left', '30px'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'padding-right', '0'),
				_1: {ctor: '[]'}
			}
		}
	});
var _user$project$WelcomeForRfidScene$view = function (kioskModel) {
	var sceneModel = kioskModel.welcomeForRfidModel;
	var friendlyName = A2(
		_elm_lang$core$Maybe$withDefault,
		'ERR',
		A2(
			_elm_lang$core$Maybe$map,
			function (_p0) {
				return function (_) {
					return _.friendlyName;
				}(
					function (_) {
						return _.data;
					}(_p0));
			},
			sceneModel.member));
	var button = _user$project$Wizard_SceneUtils$sceneButton(kioskModel);
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Welcome ',
			A2(_elm_lang$core$Basics_ops['++'], friendlyName, '!')),
		'Choose one of the following:',
		A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$vspace(225),
				_1: {
					ctor: '::',
					_0: button(
						A3(
							_user$project$Wizard_SceneUtils$ButtonSpec,
							'Check In',
							_user$project$Types$WelcomeForRfidVector(_user$project$Types$W4R_CheckInClicked),
							true)),
					_1: {
						ctor: '::',
						_0: button(
							A3(
								_user$project$Wizard_SceneUtils$ButtonSpec,
								'Check Out',
								_user$project$Types$WelcomeForRfidVector(_user$project$Types$W4R_CheckOutClicked),
								true)),
						_1: {
							ctor: '::',
							_0: _user$project$Wizard_SceneUtils$vspace(225),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$src('/static/members/cactuses.png'),
										_1: {
											ctor: '::',
											_0: _user$project$WelcomeForRfidScene$bottomImgStyle,
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}),
		{ctor: '[]'},
		{ctor: '[]'});
};
var _user$project$WelcomeForRfidScene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.welcomeForRfidModel;
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'W4R_Segue':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						sceneModel,
						{
							member: _elm_lang$core$Maybe$Just(_p1._0)
						}),
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$WizardVector(
							_user$project$Types$Push(_user$project$Types$WelcomeForRfid)))
				};
			case 'W4R_CheckInClicked':
				return {
					ctor: '_Tuple2',
					_0: sceneModel,
					_1: function () {
						var _p2 = sceneModel.member;
						if (_p2.ctor === 'Just') {
							return _user$project$Wizard_SceneUtils$send(
								_user$project$Types$ReasonForVisitVector(
									_user$project$Types$R4V_Segue(_p2._0)));
						} else {
							return _user$project$Wizard_SceneUtils$send(
								_user$project$Types$ErrorVector(
									_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)));
						}
					}()
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: sceneModel,
					_1: function () {
						var _p3 = sceneModel.member;
						if (_p3.ctor === 'Just') {
							return _user$project$Wizard_SceneUtils$send(
								_user$project$Types$OldBusinessVector(
									A2(_user$project$Types$OB_SegueA, _user$project$Types$CheckOutSession, _p3._0)));
						} else {
							return _user$project$Wizard_SceneUtils$send(
								_user$project$Types$ErrorVector(
									_user$project$Types$ERR_Segue(_user$project$Types$missingArguments)));
						}
					}()
				};
		}
	});
var _user$project$WelcomeForRfidScene$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: {member: _elm_lang$core$Maybe$Nothing},
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$WelcomeForRfidScene$WelcomeForRfidModel = function (a) {
	return {member: a};
};

var _user$project$WelcomeScene$bottomImgStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'text-align', 'center'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'padding-left', '30px'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Wizard_SceneUtils_ops['=>'], 'padding-right', '0'),
				_1: {ctor: '[]'}
			}
		}
	});
var _user$project$WelcomeScene$view = function (kioskModel) {
	return A6(
		_user$project$Wizard_SceneUtils$genericScene,
		kioskModel,
		'Welcome!',
		'Choose one of the following:',
		A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$vspace(50),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text('If you\'ve never signed up here or on our website:'),
					_1: {
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$vspace(20),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$Wizard_SceneUtils$sceneButton,
								kioskModel,
								A3(
									_user$project$Wizard_SceneUtils$ButtonSpec,
									'I\'m new!',
									_user$project$Types$WizardVector(
										_user$project$Types$Push(_user$project$Types$HowDidYouHear)),
									true)),
							_1: {
								ctor: '::',
								_0: _user$project$Wizard_SceneUtils$vspace(70),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text('If you\'ve already signed up here or on our website:'),
									_1: {
										ctor: '::',
										_0: _user$project$Wizard_SceneUtils$vspace(20),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$Wizard_SceneUtils$sceneButton,
												kioskModel,
												A3(
													_user$project$Wizard_SceneUtils$ButtonSpec,
													'Check In',
													_user$project$Types$WizardVector(
														_user$project$Types$Push(_user$project$Types$CheckIn)),
													true)),
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$Wizard_SceneUtils$sceneButton,
													kioskModel,
													A3(
														_user$project$Wizard_SceneUtils$ButtonSpec,
														'Check Out',
														_user$project$Types$WizardVector(
															_user$project$Types$Push(_user$project$Types$CheckOut)),
														true)),
												_1: {
													ctor: '::',
													_0: _user$project$Wizard_SceneUtils$vspace(150),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$img,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$src('/static/members/cactuses.png'),
																_1: {
																	ctor: '::',
																	_0: _user$project$WelcomeScene$bottomImgStyle,
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}),
		{ctor: '[]'},
		{ctor: '[]'});
};
var _user$project$WelcomeScene$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: {},
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$WelcomeScene$WelcomeModel = {};

var _user$project$YouCantEnterScene$optionsContent = F4(
	function (kioskModel, sceneModel, xis, member) {
		var paymentMsg = function () {
			var _p0 = member.data.latestNonfutureMembership;
			if (_p0.ctor === 'Just') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'Our records show that your most recent membership expired on ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_user$project$CalendarDate$format, '%d-%b-%Y', _p0._0.data.endDate),
						'.'));
			} else {
				return '';
			}
		}();
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$sceneTextStyle,
				_1: {
					ctor: '::',
					_0: _user$project$Wizard_SceneUtils$sceneTextBlockStyle,
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _user$project$Wizard_SceneUtils$vspace(30),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text('If you wish to use Xerocraft at this time, you need to have a paid membership. So, what would you like to do? Choose below:'),
					_1: {
						ctor: '::',
						_0: _user$project$Wizard_SceneUtils$vspace(60),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$Wizard_SceneUtils$sceneButton,
								kioskModel,
								A3(
									_user$project$Wizard_SceneUtils$ButtonSpec,
									'Come back during public hours',
									_user$project$Types$PublicHoursVector(
										_user$project$Types$PH_Segue(member)),
									true)),
							_1: {
								ctor: '::',
								_0: _user$project$Wizard_SceneUtils$vspace(30),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$Wizard_SceneUtils$sceneButton,
										kioskModel,
										A3(
											_user$project$Wizard_SceneUtils$ButtonSpec,
											'Pay now at front desk',
											_user$project$Types$YouCantEnterVector(
												_user$project$Types$PayNowAtFrontDesk(member)),
											true)),
									_1: {
										ctor: '::',
										_0: _user$project$Wizard_SceneUtils$vspace(30),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$Wizard_SceneUtils$sceneButton,
												kioskModel,
												A3(
													_user$project$Wizard_SceneUtils$ButtonSpec,
													'Hold on, I already paid!',
													_user$project$Types$YouCantEnterVector(
														_user$project$Types$AlreadyPaid(member)),
													true)),
											_1: {
												ctor: '::',
												_0: _user$project$Wizard_SceneUtils$vspace(60),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html$text(paymentMsg),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _user$project$YouCantEnterScene$view = function (kioskModel) {
	var xis = kioskModel.xisSession;
	var sceneModel = kioskModel.youCantEnterModel;
	var _p1 = sceneModel.member;
	if (_p1.ctor === 'Nothing') {
		return A2(_user$project$Wizard_SceneUtils$errorView, kioskModel, _user$project$Types$missingArguments);
	} else {
		return A6(
			_user$project$Wizard_SceneUtils$genericScene,
			kioskModel,
			'Supporting Members Only',
			'We are not currently open to the public',
			A4(_user$project$YouCantEnterScene$optionsContent, kioskModel, sceneModel, xis, _p1._0),
			{ctor: '[]'},
			{ctor: '[]'});
	}
};
var _user$project$YouCantEnterScene$update = F2(
	function (msg, kioskModel) {
		var xis = kioskModel.xisSession;
		var sceneModel = kioskModel.youCantEnterModel;
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'YCE_Segue':
				var newSceneModel = _elm_lang$core$Native_Utils.update(
					sceneModel,
					{
						member: _elm_lang$core$Maybe$Just(_p2._0)
					});
				return {
					ctor: '_Tuple2',
					_0: newSceneModel,
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$WizardVector(
							_user$project$Types$Push(_user$project$Types$YouCantEnter)))
				};
			case 'PayNowAtFrontDesk':
				return {
					ctor: '_Tuple2',
					_0: sceneModel,
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$BuyMembershipVector(
							_user$project$Types$BM_Segue(_p2._0)))
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: sceneModel,
					_1: _user$project$Wizard_SceneUtils$send(
						_user$project$Types$OldBusinessVector(
							A2(_user$project$Types$OB_SegueA, _user$project$Types$CheckInSession, _p2._0)))
				};
		}
	});
var _user$project$YouCantEnterScene$init = function (flags) {
	var sceneModel = {
		member: _elm_lang$core$Maybe$Nothing,
		badNews: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: sceneModel, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$YouCantEnterScene$YouCantEnterModel = F2(
	function (a, b) {
		return {member: a, badNews: b};
	});

var _user$project$ReceptionKiosk$send = function (msg) {
	return A2(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Task$succeed(msg));
};
var _user$project$ReceptionKiosk$view = function (model) {
	var currScene = _mgold$elm_nonempty_list$List_Nonempty$head(model.sceneStack);
	var _p0 = currScene;
	switch (_p0.ctor) {
		case 'AuthorizeEntry':
			return _user$project$AuthorizeEntryScene$view(model);
		case 'BuyMembership':
			return _user$project$BuyMembershipScene$view(model);
		case 'CheckIn':
			return _user$project$CheckInScene$view(model);
		case 'CheckInDone':
			return _user$project$CheckInDoneScene$view(model);
		case 'CheckOut':
			return _user$project$CheckOutScene$view(model);
		case 'CheckOutDone':
			return _user$project$CheckOutDoneScene$view(model);
		case 'CreatingAcct':
			return _user$project$CreatingAcctScene$view(model);
		case 'EmailInUse':
			return _user$project$EmailInUseScene$view(model);
		case 'Error':
			return _user$project$ErrorScene$view(model);
		case 'HowDidYouHear':
			return _user$project$HowDidYouHearScene$view(model);
		case 'NewMember':
			return _user$project$NewMemberScene$view(model);
		case 'NewUser':
			return _user$project$NewUserScene$view(model);
		case 'OldBusiness':
			return _user$project$OldBusinessScene$view(model);
		case 'PublicHours':
			return _user$project$PublicHoursScene$view(model);
		case 'ReasonForVisit':
			return _user$project$ReasonForVisitScene$view(model);
		case 'RfidHelper':
			return _user$project$RfidHelper$view(model);
		case 'SignUpDone':
			return _user$project$SignUpDoneScene$view(model);
		case 'Start':
			return _user$project$StartScene$view(model);
		case 'TaskInfo':
			return _user$project$TaskInfoScene$view(model);
		case 'TaskList':
			return _user$project$TaskListScene$view(model);
		case 'TimeSheetPt1':
			return _user$project$TimeSheetPt1Scene$view(model);
		case 'TimeSheetPt2':
			return _user$project$TimeSheetPt2Scene$view(model);
		case 'TimeSheetPt3':
			return _user$project$TimeSheetPt3Scene$view(model);
		case 'UseBankedHours':
			return _user$project$UseBankedHoursScene$view(model);
		case 'Waiver':
			return _user$project$WaiverScene$view(model);
		case 'WelcomeForRfid':
			return _user$project$WelcomeForRfidScene$view(model);
		case 'Welcome':
			return _user$project$WelcomeScene$view(model);
		default:
			return _user$project$YouCantEnterScene$view(model);
	}
};
var _user$project$ReceptionKiosk$init = function (f) {
	var _p1 = _user$project$YouCantEnterScene$init(f);
	var youCantEnterModel = _p1._0;
	var youCantEnterCmd = _p1._1;
	var _p2 = _user$project$WelcomeScene$init(f);
	var welcomeModel = _p2._0;
	var welcomeCmd = _p2._1;
	var _p3 = _user$project$WelcomeForRfidScene$init(f);
	var welcomeForRfidModel = _p3._0;
	var welcomeForRfidCmd = _p3._1;
	var _p4 = _user$project$WaiverScene$init(f);
	var waiverModel = _p4._0;
	var waiverCmd = _p4._1;
	var _p5 = _user$project$UseBankedHoursScene$init(f);
	var useBankedHoursModel = _p5._0;
	var useBankedHoursmd = _p5._1;
	var _p6 = _user$project$TimeSheetPt3Scene$init(f);
	var timeSheetPt3Model = _p6._0;
	var timeSheetPt3Cmd = _p6._1;
	var _p7 = _user$project$TimeSheetPt2Scene$init(f);
	var timeSheetPt2Model = _p7._0;
	var timeSheetPt2Cmd = _p7._1;
	var _p8 = _user$project$TimeSheetPt1Scene$init(f);
	var timeSheetPt1Model = _p8._0;
	var timeSheetPt1Cmd = _p8._1;
	var _p9 = _user$project$TaskListScene$init(f);
	var taskListModel = _p9._0;
	var taskListCmd = _p9._1;
	var _p10 = _user$project$TaskInfoScene$init(f);
	var taskInfoModel = _p10._0;
	var taskInfoCmd = _p10._1;
	var _p11 = _user$project$StartScene$init(f);
	var startModel = _p11._0;
	var startCmd = _p11._1;
	var _p12 = _user$project$SignUpDoneScene$init(f);
	var signUpDoneModel = _p12._0;
	var signUpDoneCmd = _p12._1;
	var _p13 = _user$project$ReasonForVisitScene$init(f);
	var reasonForVisitModel = _p13._0;
	var reasonForVisitCmd = _p13._1;
	var _p14 = _user$project$PublicHoursScene$init(f);
	var publicHoursModel = _p14._0;
	var publicHoursCmd = _p14._1;
	var _p15 = _user$project$OldBusinessScene$init(f);
	var oldBusinessModel = _p15._0;
	var oldBusinessCmd = _p15._1;
	var _p16 = _user$project$NewUserScene$init(f);
	var newUserModel = _p16._0;
	var newUserCmd = _p16._1;
	var _p17 = _user$project$NewMemberScene$init(f);
	var newMemberModel = _p17._0;
	var newMemberCmd = _p17._1;
	var _p18 = _user$project$HowDidYouHearScene$init(f);
	var howDidYouHearModel = _p18._0;
	var howDidYouHearCmd = _p18._1;
	var _p19 = _user$project$ErrorScene$init(f);
	var errorModel = _p19._0;
	var errorCmd = _p19._1;
	var _p20 = _user$project$EmailInUseScene$init(f);
	var emailInUseModel = _p20._0;
	var emailInUseCmd = _p20._1;
	var _p21 = _user$project$CreatingAcctScene$init(f);
	var creatingAcctModel = _p21._0;
	var creatingAcctCmd = _p21._1;
	var _p22 = _user$project$CheckOutDoneScene$init(f);
	var checkOutDoneModel = _p22._0;
	var checkOutDoneCmd = _p22._1;
	var _p23 = _user$project$CheckOutScene$init(f);
	var checkOutModel = _p23._0;
	var checkOutCmd = _p23._1;
	var _p24 = _user$project$CheckInDoneScene$init(f);
	var checkInDoneModel = _p24._0;
	var checkInDoneCmd = _p24._1;
	var _p25 = _user$project$CheckInScene$init(f);
	var checkInModel = _p25._0;
	var checkInCmd = _p25._1;
	var _p26 = _user$project$BuyMembershipScene$init(f);
	var buyMembershipModel = _p26._0;
	var buyMembershipCmd = _p26._1;
	var _p27 = _user$project$AuthorizeEntryScene$init(f);
	var authorizeEntryModel = _p27._0;
	var authorizeEntryCmd = _p27._1;
	var model = {
		flags: f,
		currTime: 0,
		timeShift: f.timeShift,
		sceneStack: _mgold$elm_nonempty_list$List_Nonempty$fromElement(_user$project$Types$Start),
		idxToFocus: _elm_lang$core$Maybe$Nothing,
		mdl: _debois$elm_mdl$Material$model,
		xisSession: A2(
			_user$project$XisRestApi$createSession,
			f.xisApiFlags,
			_user$project$DjangoRestFramework$Token(f.uniqueKioskId)),
		membersApi: _user$project$MembersApi$createSession(f.membersApiFlags),
		rfidHelperModel: _user$project$RfidHelper$create(_user$project$Types$RfidWasSwiped),
		authorizeEntryModel: authorizeEntryModel,
		buyMembershipModel: buyMembershipModel,
		checkInModel: checkInModel,
		checkInDoneModel: checkInDoneModel,
		checkOutModel: checkOutModel,
		checkOutDoneModel: checkOutDoneModel,
		creatingAcctModel: creatingAcctModel,
		emailInUseModel: emailInUseModel,
		errorModel: errorModel,
		howDidYouHearModel: howDidYouHearModel,
		newMemberModel: newMemberModel,
		newUserModel: newUserModel,
		oldBusinessModel: oldBusinessModel,
		publicHoursModel: publicHoursModel,
		reasonForVisitModel: reasonForVisitModel,
		signUpDoneModel: signUpDoneModel,
		startModel: startModel,
		taskInfoModel: taskInfoModel,
		taskListModel: taskListModel,
		timeSheetPt1Model: timeSheetPt1Model,
		timeSheetPt2Model: timeSheetPt2Model,
		timeSheetPt3Model: timeSheetPt3Model,
		useBankedHoursModel: useBankedHoursModel,
		waiverModel: waiverModel,
		welcomeForRfidModel: welcomeForRfidModel,
		welcomeModel: welcomeModel,
		youCantEnterModel: youCantEnterModel
	};
	var cmds = {
		ctor: '::',
		_0: authorizeEntryCmd,
		_1: {
			ctor: '::',
			_0: buyMembershipCmd,
			_1: {
				ctor: '::',
				_0: checkInCmd,
				_1: {
					ctor: '::',
					_0: checkInDoneCmd,
					_1: {
						ctor: '::',
						_0: checkOutCmd,
						_1: {
							ctor: '::',
							_0: checkOutDoneCmd,
							_1: {
								ctor: '::',
								_0: creatingAcctCmd,
								_1: {
									ctor: '::',
									_0: emailInUseCmd,
									_1: {
										ctor: '::',
										_0: errorCmd,
										_1: {
											ctor: '::',
											_0: howDidYouHearCmd,
											_1: {
												ctor: '::',
												_0: newMemberCmd,
												_1: {
													ctor: '::',
													_0: newUserCmd,
													_1: {
														ctor: '::',
														_0: publicHoursCmd,
														_1: {
															ctor: '::',
															_0: reasonForVisitCmd,
															_1: {
																ctor: '::',
																_0: startCmd,
																_1: {
																	ctor: '::',
																	_0: taskInfoCmd,
																	_1: {
																		ctor: '::',
																		_0: taskListCmd,
																		_1: {
																			ctor: '::',
																			_0: timeSheetPt1Cmd,
																			_1: {
																				ctor: '::',
																				_0: timeSheetPt2Cmd,
																				_1: {
																					ctor: '::',
																					_0: timeSheetPt3Cmd,
																					_1: {
																						ctor: '::',
																						_0: waiverCmd,
																						_1: {
																							ctor: '::',
																							_0: welcomeForRfidCmd,
																							_1: {
																								ctor: '::',
																								_0: welcomeCmd,
																								_1: {
																									ctor: '::',
																									_0: youCantEnterCmd,
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	};
	return {
		ctor: '_Tuple2',
		_0: model,
		_1: _elm_lang$core$Platform_Cmd$batch(cmds)
	};
};
var _user$project$ReceptionKiosk$reset = function (m) {
	return _user$project$ReceptionKiosk$init(m.flags);
};
var _user$project$ReceptionKiosk$setFocusIfNoFocus = _elm_lang$core$Native_Platform.outgoingPort(
	'setFocusIfNoFocus',
	function (v) {
		return v;
	});
var _user$project$ReceptionKiosk$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var _p28 = msg;
			switch (_p28.ctor) {
				case 'NoOp':
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				case 'IgnoreResultHttpErrorString':
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				case 'RfidWasSwiped':
					var _p34 = _p28._0;
					var _p29 = _mgold$elm_nonempty_list$List_Nonempty$head(model.sceneStack);
					switch (_p29.ctor) {
						case 'Start':
							var _p30 = A2(_user$project$StartScene$rfidWasSwiped, model, _p34);
							var newMod = _p30._0;
							var cmd = _p30._1;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{startModel: newMod}),
								_1: cmd
							};
						case 'CheckIn':
							var _p31 = A2(_user$project$CheckInScene$rfidWasSwiped, model, _p34);
							var newMod = _p31._0;
							var cmd = _p31._1;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{checkInModel: newMod}),
								_1: cmd
							};
						case 'CheckOut':
							var _p32 = A2(_user$project$CheckOutScene$rfidWasSwiped, model, _p34);
							var newMod = _p32._0;
							var cmd = _p32._1;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{checkOutModel: newMod}),
								_1: cmd
							};
						case 'TimeSheetPt3':
							var _p33 = A2(_user$project$TimeSheetPt3Scene$rfidWasSwiped, model, _p34);
							var newMod = _p33._0;
							var cmd = _p33._1;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{timeSheetPt3Model: newMod}),
								_1: cmd
							};
						default:
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'RfidHelperVector':
					var _p35 = A2(_user$project$RfidHelper$update, _p28._0, model);
					var rhMod = _p35._0;
					var rhCmd = _p35._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{rfidHelperModel: rhMod}),
						_1: rhCmd
					};
				case 'WizardVector':
					var currScene = _mgold$elm_nonempty_list$List_Nonempty$head(model.sceneStack);
					var _p36 = _p28._0;
					switch (_p36.ctor) {
						case 'Push':
							var _p37 = _p36._0;
							var newModel = _elm_lang$core$Native_Utils.update(
								model,
								{
									sceneStack: A2(_mgold$elm_nonempty_list$List_Nonempty$cons, _p37, model.sceneStack)
								});
							var _v4 = _user$project$Types$WizardVector(
								A2(_user$project$Types$SceneWillAppear, _p37, currScene)),
								_v5 = newModel;
							msg = _v4;
							model = _v5;
							continue update;
						case 'Pop':
							var newModel = _elm_lang$core$Native_Utils.update(
								model,
								{
									sceneStack: _mgold$elm_nonempty_list$List_Nonempty$pop(model.sceneStack)
								});
							var newScene = _mgold$elm_nonempty_list$List_Nonempty$head(newModel.sceneStack);
							var _v6 = _user$project$Types$WizardVector(
								A2(_user$project$Types$SceneWillAppear, newScene, currScene)),
								_v7 = newModel;
							msg = _v6;
							model = _v7;
							continue update;
						case 'PopTo':
							var toBePopped = A2(
								_elm_community$list_extra$List_Extra$takeWhile,
								F2(
									function (x, y) {
										return !_elm_lang$core$Native_Utils.eq(x, y);
									})(_p36._0),
								_mgold$elm_nonempty_list$List_Nonempty$toList(model.sceneStack));
							var popCmds = A2(
								_elm_lang$core$List$repeat,
								_elm_lang$core$List$length(toBePopped),
								_user$project$ReceptionKiosk$send(
									_user$project$Types$WizardVector(_user$project$Types$Pop)));
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: _elm_lang$core$Platform_Cmd$batch(popCmds)
							};
						case 'Rebase':
							var newStack = _mgold$elm_nonempty_list$List_Nonempty$dropTail(model.sceneStack);
							var newModel = _elm_lang$core$Native_Utils.update(
								model,
								{sceneStack: newStack});
							return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
						case 'RebaseTo':
							var _p39 = _p36._0;
							if (_elm_lang$core$Native_Utils.eq(
								A2(_mgold$elm_nonempty_list$List_Nonempty$get, 1, model.sceneStack),
								_p39)) {
								return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
							} else {
								if (_elm_lang$core$Native_Utils.eq(
									_mgold$elm_nonempty_list$List_Nonempty$length(model.sceneStack),
									2)) {
									var _p38 = A2(_elm_lang$core$Debug$log, 'RebaseTo couldn\'t find: ', _p39);
									return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
								} else {
									var newTail = _mgold$elm_nonempty_list$List_Nonempty$pop(
										_mgold$elm_nonempty_list$List_Nonempty$pop(model.sceneStack));
									var head = _mgold$elm_nonempty_list$List_Nonempty$head(model.sceneStack);
									var newSceneStack = A2(_mgold$elm_nonempty_list$List_Nonempty$cons, head, newTail);
									var _v8 = _user$project$Types$WizardVector(
										_user$project$Types$RebaseTo(_p39)),
										_v9 = _elm_lang$core$Native_Utils.update(
										model,
										{sceneStack: newSceneStack});
									msg = _v8;
									model = _v9;
									continue update;
								}
							}
						case 'ReplaceWith':
							var newSceneStack = _mgold$elm_nonempty_list$List_Nonempty$pop(model.sceneStack);
							var _v10 = _user$project$Types$WizardVector(
								_user$project$Types$Push(_p36._0)),
								_v11 = _elm_lang$core$Native_Utils.update(
								model,
								{sceneStack: newSceneStack});
							msg = _v10;
							model = _v11;
							continue update;
						case 'Reset':
							return _user$project$ReceptionKiosk$reset(model);
						case 'SceneWillAppear':
							var _p60 = _p36._1;
							var _p59 = _p36._0;
							var _p40 = A2(_user$project$WaiverScene$sceneWillAppear, model, _p59);
							var mW = _p40._0;
							var cW = _p40._1;
							var _p41 = A3(_user$project$TimeSheetPt3Scene$sceneWillAppear, model, _p59, _p60);
							var mTS3 = _p41._0;
							var cTS3 = _p41._1;
							var _p42 = A3(_user$project$TimeSheetPt2Scene$sceneWillAppear, model, _p59, _p60);
							var mTS2 = _p42._0;
							var cTS2 = _p42._1;
							var _p43 = A3(_user$project$TimeSheetPt1Scene$sceneWillAppear, model, _p59, _p60);
							var mTS1 = _p43._0;
							var cTS1 = _p43._1;
							var _p44 = A3(_user$project$TaskListScene$sceneWillAppear, model, _p59, _p60);
							var mTL = _p44._0;
							var cTL = _p44._1;
							var _p45 = A3(_user$project$TaskInfoScene$sceneWillAppear, model, _p59, _p60);
							var mTI = _p45._0;
							var cTI = _p45._1;
							var _p46 = A2(_user$project$StartScene$sceneWillAppear, model, _p59);
							var mSS = _p46._0;
							var cSS = _p46._1;
							var _p47 = A3(_user$project$SignUpDoneScene$sceneWillAppear, model, _p59, _p60);
							var mSUD = _p47._0;
							var cSUD = _p47._1;
							var _p48 = A3(_user$project$RfidHelper$sceneWillAppear, model, _p59, _p60);
							var mRH = _p48._0;
							var cRH = _p48._1;
							var _p49 = A3(_user$project$ReasonForVisitScene$sceneWillAppear, model, _p59, _p60);
							var mR4V = _p49._0;
							var cR4V = _p49._1;
							var _p50 = A3(_user$project$OldBusinessScene$sceneWillAppear, model, _p59, _p60);
							var mOB = _p50._0;
							var cOB = _p50._1;
							var _p51 = A2(_user$project$NewUserScene$sceneWillAppear, model, _p59);
							var mNU = _p51._0;
							var cNU = _p51._1;
							var _p52 = A2(_user$project$NewMemberScene$sceneWillAppear, model, _p59);
							var mNM = _p52._0;
							var cNM = _p52._1;
							var _p53 = A2(_user$project$HowDidYouHearScene$sceneWillAppear, model, _p59);
							var mHD = _p53._0;
							var cHD = _p53._1;
							var _p54 = A3(_user$project$ErrorScene$sceneWillAppear, model, _p59, _p60);
							var mERR = _p54._0;
							var cERR = _p54._1;
							var _p55 = A2(_user$project$CreatingAcctScene$sceneWillAppear, model, _p59);
							var mCA = _p55._0;
							var cCA = _p55._1;
							var _p56 = A3(_user$project$CheckOutDoneScene$sceneWillAppear, model, _p59, _p60);
							var mCOD = _p56._0;
							var cCOD = _p56._1;
							var _p57 = A2(_user$project$CheckOutScene$sceneWillAppear, model, _p59);
							var mCO = _p57._0;
							var cCO = _p57._1;
							var _p58 = A2(_user$project$CheckInScene$sceneWillAppear, model, _p59);
							var mCI = _p58._0;
							var cCI = _p58._1;
							var newModel = _elm_lang$core$Native_Utils.update(
								model,
								{idxToFocus: _elm_lang$core$Maybe$Nothing, checkInModel: mCI, checkOutModel: mCO, checkOutDoneModel: mCOD, creatingAcctModel: mCA, errorModel: mERR, howDidYouHearModel: mHD, newMemberModel: mNM, newUserModel: mNU, oldBusinessModel: mOB, reasonForVisitModel: mR4V, rfidHelperModel: mRH, signUpDoneModel: mSUD, startModel: mSS, taskInfoModel: mTI, taskListModel: mTL, timeSheetPt1Model: mTS1, timeSheetPt2Model: mTS2, timeSheetPt3Model: mTS3, waiverModel: mW});
							return {
								ctor: '_Tuple2',
								_0: newModel,
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: cCI,
										_1: {
											ctor: '::',
											_0: cCO,
											_1: {
												ctor: '::',
												_0: cCOD,
												_1: {
													ctor: '::',
													_0: cCA,
													_1: {
														ctor: '::',
														_0: cERR,
														_1: {
															ctor: '::',
															_0: cHD,
															_1: {
																ctor: '::',
																_0: cNM,
																_1: {
																	ctor: '::',
																	_0: cNU,
																	_1: {
																		ctor: '::',
																		_0: cOB,
																		_1: {
																			ctor: '::',
																			_0: cRH,
																			_1: {
																				ctor: '::',
																				_0: cR4V,
																				_1: {
																					ctor: '::',
																					_0: cSS,
																					_1: {
																						ctor: '::',
																						_0: cSUD,
																						_1: {
																							ctor: '::',
																							_0: cTI,
																							_1: {
																								ctor: '::',
																								_0: cTL,
																								_1: {
																									ctor: '::',
																									_0: cTS1,
																									_1: {
																										ctor: '::',
																										_0: cTS2,
																										_1: {
																											ctor: '::',
																											_0: cTS3,
																											_1: {
																												ctor: '::',
																												_0: cW,
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									})
							};
						case 'Tick':
							var _p66 = _p36._0;
							var focusCmd = function () {
								var _p61 = model.idxToFocus;
								if (_p61.ctor === 'Just') {
									return _user$project$ReceptionKiosk$setFocusIfNoFocus(
										_elm_lang$core$Basics$toString(_p61._0));
								} else {
									return _elm_lang$core$Platform_Cmd$none;
								}
							}();
							var _p62 = A2(_user$project$StartScene$tick, _p66, model);
							var mSS = _p62._0;
							var cSS = _p62._1;
							var _p63 = A2(_user$project$RfidHelper$tick, _p66, model);
							var mRH = _p63._0;
							var cRH = _p63._1;
							var _p64 = A2(_user$project$CheckInScene$tick, _p66, model);
							var mCI = _p64._0;
							var cCI = _p64._1;
							var _p65 = A2(_user$project$CreatingAcctScene$tick, _p66, model);
							var mCA = _p65._0;
							var cCA = _p65._1;
							var newModel = _elm_lang$core$Native_Utils.update(
								model,
								{currTime: _p66 + (model.timeShift * _user$project$Duration$ticksPerSecond), creatingAcctModel: mCA, checkInModel: mCI, rfidHelperModel: mRH, startModel: mSS});
							return {
								ctor: '_Tuple2',
								_0: newModel,
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: focusCmd,
										_1: {
											ctor: '::',
											_0: cCA,
											_1: {
												ctor: '::',
												_0: cCI,
												_1: {
													ctor: '::',
													_0: cRH,
													_1: {
														ctor: '::',
														_0: cSS,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									})
							};
						case 'FocusOnIndex':
							var _p67 = _p36._0;
							var newModel = _elm_lang$core$Native_Utils.update(
								model,
								{
									idxToFocus: _elm_lang$core$Maybe$Just(_p67)
								});
							var focusCmd = _user$project$ReceptionKiosk$setFocusIfNoFocus(
								_elm_lang$core$Basics$toString(_p67));
							return {ctor: '_Tuple2', _0: newModel, _1: focusCmd};
						default:
							return _p36._0 ? {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{idxToFocus: _elm_lang$core$Maybe$Nothing}),
								_1: _elm_lang$core$Platform_Cmd$none
							} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'AuthorizeEntryVector':
					var _p68 = A2(_user$project$AuthorizeEntryScene$update, _p28._0, model);
					var sm = _p68._0;
					var cmd = _p68._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{authorizeEntryModel: sm}),
						_1: cmd
					};
				case 'BuyMembershipVector':
					var _p69 = A2(_user$project$BuyMembershipScene$update, _p28._0, model);
					var sm = _p69._0;
					var cmd = _p69._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{buyMembershipModel: sm}),
						_1: cmd
					};
				case 'CheckInDoneVector':
					var _p70 = A2(_user$project$CheckInDoneScene$update, _p28._0, model);
					var sm = _p70._0;
					var cmd = _p70._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{checkInDoneModel: sm}),
						_1: cmd
					};
				case 'CheckInVector':
					var _p71 = A2(_user$project$CheckInScene$update, _p28._0, model);
					var sm = _p71._0;
					var cmd = _p71._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{checkInModel: sm}),
						_1: cmd
					};
				case 'CheckOutDoneVector':
					var _p72 = A2(_user$project$CheckOutDoneScene$update, _p28._0, model);
					var sm = _p72._0;
					var cmd = _p72._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{checkOutDoneModel: sm}),
						_1: cmd
					};
				case 'CheckOutVector':
					var _p73 = A2(_user$project$CheckOutScene$update, _p28._0, model);
					var sm = _p73._0;
					var cmd = _p73._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{checkOutModel: sm}),
						_1: cmd
					};
				case 'CreatingAcctVector':
					var _p74 = A2(_user$project$CreatingAcctScene$update, _p28._0, model);
					var sm = _p74._0;
					var cmd = _p74._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{creatingAcctModel: sm}),
						_1: cmd
					};
				case 'EmailInUseVector':
					var _p75 = A2(_user$project$EmailInUseScene$update, _p28._0, model);
					var sm = _p75._0;
					var cmd = _p75._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{emailInUseModel: sm}),
						_1: cmd
					};
				case 'ErrorVector':
					var _p76 = A2(_user$project$ErrorScene$update, _p28._0, model);
					var sm = _p76._0;
					var cmd = _p76._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{errorModel: sm}),
						_1: cmd
					};
				case 'HowDidYouHearVector':
					var _p77 = A2(_user$project$HowDidYouHearScene$update, _p28._0, model);
					var sm = _p77._0;
					var cmd = _p77._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{howDidYouHearModel: sm}),
						_1: cmd
					};
				case 'NewMemberVector':
					var _p78 = A2(_user$project$NewMemberScene$update, _p28._0, model);
					var sm = _p78._0;
					var cmd = _p78._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{newMemberModel: sm}),
						_1: cmd
					};
				case 'NewUserVector':
					var _p79 = A2(_user$project$NewUserScene$update, _p28._0, model);
					var sm = _p79._0;
					var cmd = _p79._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{newUserModel: sm}),
						_1: cmd
					};
				case 'OldBusinessVector':
					var _p80 = A2(_user$project$OldBusinessScene$update, _p28._0, model);
					var sm = _p80._0;
					var cmd = _p80._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{oldBusinessModel: sm}),
						_1: cmd
					};
				case 'PublicHoursVector':
					var _p81 = A2(_user$project$PublicHoursScene$update, _p28._0, model);
					var sm = _p81._0;
					var cmd = _p81._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{publicHoursModel: sm}),
						_1: cmd
					};
				case 'ReasonForVisitVector':
					var _p82 = A2(_user$project$ReasonForVisitScene$update, _p28._0, model);
					var sm = _p82._0;
					var cmd = _p82._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{reasonForVisitModel: sm}),
						_1: cmd
					};
				case 'SignUpDoneVector':
					var _p83 = A2(_user$project$SignUpDoneScene$update, _p28._0, model);
					var sm = _p83._0;
					var cmd = _p83._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{signUpDoneModel: sm}),
						_1: cmd
					};
				case 'StartVector':
					var _p84 = A2(_user$project$StartScene$update, _p28._0, model);
					var sm = _p84._0;
					var cmd = _p84._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{startModel: sm}),
						_1: cmd
					};
				case 'TaskInfoVector':
					var _p85 = A2(_user$project$TaskInfoScene$update, _p28._0, model);
					var sm = _p85._0;
					var cmd = _p85._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{taskInfoModel: sm}),
						_1: cmd
					};
				case 'TaskListVector':
					var _p86 = A2(_user$project$TaskListScene$update, _p28._0, model);
					var sm = _p86._0;
					var cmd = _p86._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{taskListModel: sm}),
						_1: cmd
					};
				case 'TimeSheetPt1Vector':
					var _p87 = A2(_user$project$TimeSheetPt1Scene$update, _p28._0, model);
					var sm = _p87._0;
					var cmd = _p87._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{timeSheetPt1Model: sm}),
						_1: cmd
					};
				case 'TimeSheetPt2Vector':
					var _p88 = A2(_user$project$TimeSheetPt2Scene$update, _p28._0, model);
					var sm = _p88._0;
					var cmd = _p88._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{timeSheetPt2Model: sm}),
						_1: cmd
					};
				case 'TimeSheetPt3Vector':
					var _p89 = A2(_user$project$TimeSheetPt3Scene$update, _p28._0, model);
					var sm = _p89._0;
					var cmd = _p89._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{timeSheetPt3Model: sm}),
						_1: cmd
					};
				case 'UseBankedHoursVector':
					var _p90 = A2(_user$project$UseBankedHoursScene$update, _p28._0, model);
					var sm = _p90._0;
					var cmd = _p90._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{useBankedHoursModel: sm}),
						_1: cmd
					};
				case 'WaiverVector':
					var _p91 = A2(_user$project$WaiverScene$update, _p28._0, model);
					var sm = _p91._0;
					var cmd = _p91._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{waiverModel: sm}),
						_1: cmd
					};
				case 'WelcomeForRfidVector':
					var _p92 = A2(_user$project$WelcomeForRfidScene$update, _p28._0, model);
					var sm = _p92._0;
					var cmd = _p92._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{welcomeForRfidModel: sm}),
						_1: cmd
					};
				case 'YouCantEnterVector':
					var _p93 = A2(_user$project$YouCantEnterScene$update, _p28._0, model);
					var sm = _p93._0;
					var cmd = _p93._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{youCantEnterModel: sm}),
						_1: cmd
					};
				default:
					return A3(_debois$elm_mdl$Material$update, _user$project$Types$MdlVector, _p28._0, model);
			}
		}
	});
var _user$project$ReceptionKiosk$focusWasSet = _elm_lang$core$Native_Platform.incomingPort('focusWasSet', _elm_lang$core$Json_Decode$bool);
var _user$project$ReceptionKiosk$subscriptions = function (model) {
	var waiverSubs = _user$project$WaiverScene$subscriptions(model);
	var timeTickSubs = A2(
		_elm_lang$core$Time$every,
		_elm_lang$core$Time$second,
		function (_p94) {
			return _user$project$Types$WizardVector(
				_user$project$Types$Tick(_p94));
		});
	var startSubs = _user$project$StartScene$subscriptions(model);
	var rfidHelperSubs = _user$project$RfidHelper$subscriptions;
	var focusSetSubs = _user$project$ReceptionKiosk$focusWasSet(
		function (_p95) {
			return _user$project$Types$WizardVector(
				_user$project$Types$FocusWasSet(_p95));
		});
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: focusSetSubs,
			_1: {
				ctor: '::',
				_0: rfidHelperSubs,
				_1: {
					ctor: '::',
					_0: startSubs,
					_1: {
						ctor: '::',
						_0: timeTickSubs,
						_1: {
							ctor: '::',
							_0: waiverSubs,
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$ReceptionKiosk$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$ReceptionKiosk$init, view: _user$project$ReceptionKiosk$view, update: _user$project$ReceptionKiosk$update, subscriptions: _user$project$ReceptionKiosk$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (bannerBottomUrl) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (bannerTopUrl) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (cloneAcctUrl) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (csrfToken) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (membersApiFlags) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (orgName) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														function (scrapeLoginsUrl) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																function (timeShift) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		function (uniqueKioskId) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				function (wavingHandUrl) {
																					return A2(
																						_elm_lang$core$Json_Decode$andThen,
																						function (xcOrgActionUrl) {
																							return A2(
																								_elm_lang$core$Json_Decode$andThen,
																								function (xisApiFlags) {
																									return _elm_lang$core$Json_Decode$succeed(
																										{bannerBottomUrl: bannerBottomUrl, bannerTopUrl: bannerTopUrl, cloneAcctUrl: cloneAcctUrl, csrfToken: csrfToken, membersApiFlags: membersApiFlags, orgName: orgName, scrapeLoginsUrl: scrapeLoginsUrl, timeShift: timeShift, uniqueKioskId: uniqueKioskId, wavingHandUrl: wavingHandUrl, xcOrgActionUrl: xcOrgActionUrl, xisApiFlags: xisApiFlags});
																								},
																								A2(
																									_elm_lang$core$Json_Decode$field,
																									'xisApiFlags',
																									A2(
																										_elm_lang$core$Json_Decode$andThen,
																										function (authenticateUrl) {
																											return A2(
																												_elm_lang$core$Json_Decode$andThen,
																												function (claimListUrl) {
																													return A2(
																														_elm_lang$core$Json_Decode$andThen,
																														function (discoveryMethodListUrl) {
																															return A2(
																																_elm_lang$core$Json_Decode$andThen,
																																function (emailMembershipInfoUrl) {
																																	return A2(
																																		_elm_lang$core$Json_Decode$andThen,
																																		function (logMessageUrl) {
																																			return A2(
																																				_elm_lang$core$Json_Decode$andThen,
																																				function (memberListUrl) {
																																					return A2(
																																						_elm_lang$core$Json_Decode$andThen,
																																						function (membershipListUrl) {
																																							return A2(
																																								_elm_lang$core$Json_Decode$andThen,
																																								function (taskListUrl) {
																																									return A2(
																																										_elm_lang$core$Json_Decode$andThen,
																																										function (timeBlockTypesUrl) {
																																											return A2(
																																												_elm_lang$core$Json_Decode$andThen,
																																												function (timeBlocksUrl) {
																																													return A2(
																																														_elm_lang$core$Json_Decode$andThen,
																																														function (visitEventListUrl) {
																																															return A2(
																																																_elm_lang$core$Json_Decode$andThen,
																																																function (workListUrl) {
																																																	return A2(
																																																		_elm_lang$core$Json_Decode$andThen,
																																																		function (workNoteListUrl) {
																																																			return _elm_lang$core$Json_Decode$succeed(
																																																				{authenticateUrl: authenticateUrl, claimListUrl: claimListUrl, discoveryMethodListUrl: discoveryMethodListUrl, emailMembershipInfoUrl: emailMembershipInfoUrl, logMessageUrl: logMessageUrl, memberListUrl: memberListUrl, membershipListUrl: membershipListUrl, taskListUrl: taskListUrl, timeBlockTypesUrl: timeBlockTypesUrl, timeBlocksUrl: timeBlocksUrl, visitEventListUrl: visitEventListUrl, workListUrl: workListUrl, workNoteListUrl: workNoteListUrl});
																																																		},
																																																		A2(_elm_lang$core$Json_Decode$field, 'workNoteListUrl', _elm_lang$core$Json_Decode$string));
																																																},
																																																A2(_elm_lang$core$Json_Decode$field, 'workListUrl', _elm_lang$core$Json_Decode$string));
																																														},
																																														A2(_elm_lang$core$Json_Decode$field, 'visitEventListUrl', _elm_lang$core$Json_Decode$string));
																																												},
																																												A2(_elm_lang$core$Json_Decode$field, 'timeBlocksUrl', _elm_lang$core$Json_Decode$string));
																																										},
																																										A2(_elm_lang$core$Json_Decode$field, 'timeBlockTypesUrl', _elm_lang$core$Json_Decode$string));
																																								},
																																								A2(_elm_lang$core$Json_Decode$field, 'taskListUrl', _elm_lang$core$Json_Decode$string));
																																						},
																																						A2(_elm_lang$core$Json_Decode$field, 'membershipListUrl', _elm_lang$core$Json_Decode$string));
																																				},
																																				A2(_elm_lang$core$Json_Decode$field, 'memberListUrl', _elm_lang$core$Json_Decode$string));
																																		},
																																		A2(_elm_lang$core$Json_Decode$field, 'logMessageUrl', _elm_lang$core$Json_Decode$string));
																																},
																																A2(_elm_lang$core$Json_Decode$field, 'emailMembershipInfoUrl', _elm_lang$core$Json_Decode$string));
																														},
																														A2(_elm_lang$core$Json_Decode$field, 'discoveryMethodListUrl', _elm_lang$core$Json_Decode$string));
																												},
																												A2(_elm_lang$core$Json_Decode$field, 'claimListUrl', _elm_lang$core$Json_Decode$string));
																										},
																										A2(_elm_lang$core$Json_Decode$field, 'authenticateUrl', _elm_lang$core$Json_Decode$string))));
																						},
																						A2(_elm_lang$core$Json_Decode$field, 'xcOrgActionUrl', _elm_lang$core$Json_Decode$string));
																				},
																				A2(_elm_lang$core$Json_Decode$field, 'wavingHandUrl', _elm_lang$core$Json_Decode$string));
																		},
																		A2(_elm_lang$core$Json_Decode$field, 'uniqueKioskId', _elm_lang$core$Json_Decode$string));
																},
																A2(_elm_lang$core$Json_Decode$field, 'timeShift', _elm_lang$core$Json_Decode$float));
														},
														A2(_elm_lang$core$Json_Decode$field, 'scrapeLoginsUrl', _elm_lang$core$Json_Decode$string));
												},
												A2(_elm_lang$core$Json_Decode$field, 'orgName', _elm_lang$core$Json_Decode$string));
										},
										A2(
											_elm_lang$core$Json_Decode$field,
											'membersApiFlags',
											A2(
												_elm_lang$core$Json_Decode$andThen,
												function (addDiscoveryMethodUrl) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														function (csrfToken) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																function (discoveryMethodsUrl) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		function (setIsAdultUrl) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				function (uniqueKioskId) {
																					return A2(
																						_elm_lang$core$Json_Decode$andThen,
																						function (xcOrgActionUrl) {
																							return _elm_lang$core$Json_Decode$succeed(
																								{addDiscoveryMethodUrl: addDiscoveryMethodUrl, csrfToken: csrfToken, discoveryMethodsUrl: discoveryMethodsUrl, setIsAdultUrl: setIsAdultUrl, uniqueKioskId: uniqueKioskId, xcOrgActionUrl: xcOrgActionUrl});
																						},
																						A2(_elm_lang$core$Json_Decode$field, 'xcOrgActionUrl', _elm_lang$core$Json_Decode$string));
																				},
																				A2(_elm_lang$core$Json_Decode$field, 'uniqueKioskId', _elm_lang$core$Json_Decode$string));
																		},
																		A2(_elm_lang$core$Json_Decode$field, 'setIsAdultUrl', _elm_lang$core$Json_Decode$string));
																},
																A2(_elm_lang$core$Json_Decode$field, 'discoveryMethodsUrl', _elm_lang$core$Json_Decode$string));
														},
														A2(_elm_lang$core$Json_Decode$field, 'csrfToken', _elm_lang$core$Json_Decode$string));
												},
												A2(_elm_lang$core$Json_Decode$field, 'addDiscoveryMethodUrl', _elm_lang$core$Json_Decode$string))));
								},
								A2(_elm_lang$core$Json_Decode$field, 'csrfToken', _elm_lang$core$Json_Decode$string));
						},
						A2(_elm_lang$core$Json_Decode$field, 'cloneAcctUrl', _elm_lang$core$Json_Decode$string));
				},
				A2(_elm_lang$core$Json_Decode$field, 'bannerTopUrl', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'bannerBottomUrl', _elm_lang$core$Json_Decode$string)));
var _user$project$ReceptionKiosk$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return function (v) {
																						return function (w) {
																							return function (x) {
																								return function (y) {
																									return function (z) {
																										return function (_1) {
																											return function (_2) {
																												return function (_3) {
																													return function (_4) {
																														return function (_5) {
																															return function (_6) {
																																return function (_7) {
																																	return function (_8) {
																																		return function (_9) {
																																			return function (_10) {
																																				return {flags: a, currTime: b, timeShift: c, sceneStack: d, idxToFocus: e, mdl: f, xisSession: g, membersApi: h, rfidHelperModel: i, authorizeEntryModel: j, buyMembershipModel: k, checkInModel: l, checkInDoneModel: m, checkOutModel: n, checkOutDoneModel: o, creatingAcctModel: p, emailInUseModel: q, errorModel: r, howDidYouHearModel: s, signUpDoneModel: t, startModel: u, newMemberModel: v, newUserModel: w, oldBusinessModel: x, publicHoursModel: y, reasonForVisitModel: z, taskInfoModel: _1, taskListModel: _2, timeSheetPt1Model: _3, timeSheetPt2Model: _4, timeSheetPt3Model: _5, useBankedHoursModel: _6, waiverModel: _7, welcomeForRfidModel: _8, welcomeModel: _9, youCantEnterModel: _10};
																																			};
																																		};
																																	};
																																};
																															};
																														};
																													};
																												};
																											};
																										};
																									};
																								};
																							};
																						};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};

var Elm = {};
Elm['ReceptionKiosk'] = Elm['ReceptionKiosk'] || {};
if (typeof _user$project$ReceptionKiosk$main !== 'undefined') {
    _user$project$ReceptionKiosk$main(Elm['ReceptionKiosk'], 'ReceptionKiosk', {"types":{"unions":{"Types.ErrorMsg":{"args":[],"tags":{"ERR_ResetClicked":[],"ERR_Segue":["String"]}},"Types.StartMsg":{"args":[],"tags":{"SS_KeyDown":["Keyboard.KeyCode"],"SS_MouseClick":["Mouse.Position"]}},"Types.CheckOutDoneMsg":{"args":[],"tags":{"COD_LogCheckOutResult":["Result.Result Http.Error XisRestApi.VisitEvent"],"COD_Segue":["XisRestApi.Member"]}},"Types.CheckOutMsg":{"args":[],"tags":{"CO_MemberChosen":["XisRestApi.Member"],"CO_AccVisitEvents":["Result.Result Http.Error (DjangoRestFramework.PageOf XisRestApi.VisitEvent)"]}},"Dict.LeafColor":{"args":[],"tags":{"LBBlack":[],"LBlack":[]}},"Types.WizardMsg":{"args":[],"tags":{"PopTo":["Types.Scene"],"SceneWillAppear":["Types.Scene","Types.Scene"],"Pop":[],"Rebase":[],"Tick":["Time.Time"],"FocusOnIndex":["List Int"],"RebaseTo":["Types.Scene"],"Reset":[],"FocusWasSet":["Bool"],"Push":["Types.Scene"],"ReplaceWith":["Types.Scene"]}},"XisRestApi.ClaimStatus":{"args":[],"tags":{"WorkingClaimStatus":[],"CurrentClaimStatus":[],"QueuedClaimStatus":[],"DoneClaimStatus":[],"ExpiredClaimStatus":[],"UninterestedClaimStatus":[],"AbandonedClaimStatus":[]}},"Types.SignUpDoneMsg":{"args":[],"tags":{"SUD_Segue":["String"]}},"Types.ReasonForVisitMsg":{"args":[],"tags":{"LogCheckInResult":["Result.Result Http.Error XisRestApi.VisitEvent"],"UpdateReasonForVisit":["XisRestApi.VisitEventReason"],"UpdateTimeBlocks":["Result.Result Http.Error (DjangoRestFramework.PageOf XisRestApi.TimeBlock)"],"ValidateReason":[],"R4V_Segue":["XisRestApi.Member"],"UpdateTimeBlockTypes":["Result.Result Http.Error (DjangoRestFramework.PageOf XisRestApi.TimeBlockType)"]}},"Material.Component.Msg":{"args":["button","textfield","menu","layout","toggles","tooltip","tabs","dispatch"],"tags":{"TooltipMsg":["Material.Component.Index","tooltip"],"TogglesMsg":["Material.Component.Index","toggles"],"LayoutMsg":["layout"],"ButtonMsg":["Material.Component.Index","button"],"MenuMsg":["Material.Component.Index","menu"],"TabsMsg":["Material.Component.Index","tabs"],"Dispatch":["dispatch"],"TextfieldMsg":["Material.Component.Index","textfield"]}},"Types.HowDidYouHearMsg":{"args":[],"tags":{"AccDiscoveryMethods":["Result.Result Http.Error (DjangoRestFramework.PageOf XisRestApi.DiscoveryMethod)"],"ToggleDiscoveryMethod":["XisRestApi.DiscoveryMethod"],"ShuffledDiscoveryMethods":["List XisRestApi.DiscoveryMethod"],"OkClicked":[]}},"Material.Ripple.Msg":{"args":[],"tags":{"Down":["Material.Ripple.DOMState"],"Up":[],"Tick":[]}},"Types.BuyMembershipMsg":{"args":[],"tags":{"BM_Segue":["XisRestApi.Member"]}},"Types.TimeSheetPt2Msg":{"args":[],"tags":{"TS2_UpdateDescription":["String"],"TS2_Segue":["Types.SessionType","XisRestApi.Member","Types.TaskClaimWork"],"TS2_Continue":[]}},"Types.NewMemberMsg":{"args":[],"tags":{"UpdateEmail":["String"],"ToggleIsAdult":["Bool"],"ValidateEmailUnique":["Result.Result Http.Error (DjangoRestFramework.PageOf XisRestApi.Member)"],"UpdateFirstName":["String"],"UpdateLastName":["String"],"NM_Segue":["List Int"],"Validate":[]}},"Types.CreatingAcctMsg":{"args":[],"tags":{"CA_Segue":["( List Int, String, String, String, Bool, String, String, String )"],"XcAcctCreationAttempted":["Result.Result Http.Error String"],"CloneAttempted":["Result.Result Http.Error String"],"IsAdultWasSet":["Result.Result Http.Error String"],"DiscoveryMethodAdded":["Result.Result Http.Error String"]}},"Types.TimeSheetPt1Msg":{"args":[],"tags":{"TS1_MinPad":["Int"],"TS1_HrPad":["Int"],"TS1_Submit":["XisRestApi.Task","XisRestApi.Claim","XisRestApi.Work"],"TS1_Segue":["Types.SessionType","XisRestApi.Member","Types.TaskClaimWork"]}},"Types.SessionType":{"args":[],"tags":{"CheckOutSession":[],"CheckInSession":[]}},"Types.AuthorizeEntryMsg":{"args":[],"tags":{"AE_Segue":["XisRestApi.Member","Maybe.Maybe XisRestApi.TimeBlock","List XisRestApi.TimeBlockType"]}},"XisRestApi.TaskPriority":{"args":[],"tags":{"HighPriority":[],"MediumPriority":[],"LowPriority":[]}},"Dict.Dict":{"args":["k","v"],"tags":{"RBNode_elm_builtin":["Dict.NColor","k","v","Dict.Dict k v","Dict.Dict k v"],"RBEmpty_elm_builtin":["Dict.LeafColor"]}},"XisRestApi.VisitEventMethod":{"args":[],"tags":{"VEM_FrontDesk":[],"VEM_Unknown":[],"VEM_Rfid":[],"VEM_MobileApp":[]}},"Maybe.Maybe":{"args":["a"],"tags":{"Just":["a"],"Nothing":[]}},"XisRestApi.StaffingStatus":{"args":[],"tags":{"SS_Done":[],"SS_Staffed":[],"SS_Unstaffed":[],"SS_Provisional":[]}},"Types.NewUserMsg":{"args":[],"tags":{"UpdatePassword1":["String"],"UpdateUserName":["String"],"NU_Segue":["( List Int, String, String, String, Bool )"],"UpdatePassword2":["String"],"ValidateUserNameAndPw":[],"ValidateUserNameUnique":["Result.Result Http.Error (DjangoRestFramework.PageOf XisRestApi.Member)"]}},"Types.WelcomeForRfidMsg":{"args":[],"tags":{"W4R_Segue":["XisRestApi.Member"],"W4R_CheckInClicked":[],"W4R_CheckOutClicked":[]}},"Types.Msg":{"args":[],"tags":{"TimeSheetPt3Vector":["Types.TimeSheetPt3Msg"],"MdlVector":["Material.Msg Types.Msg"],"NewUserVector":["Types.NewUserMsg"],"IgnoreResultHttpErrorString":["Result.Result Http.Error String"],"ReasonForVisitVector":["Types.ReasonForVisitMsg"],"SignUpDoneVector":["Types.SignUpDoneMsg"],"TaskInfoVector":["Types.TaskInfoMsg"],"YouCantEnterVector":["Types.YouCantEnterMsg"],"TimeSheetPt2Vector":["Types.TimeSheetPt2Msg"],"CreatingAcctVector":["Types.CreatingAcctMsg"],"RfidWasSwiped":["Result.Result String XisRestApi.Member"],"AuthorizeEntryVector":["Types.AuthorizeEntryMsg"],"TimeSheetPt1Vector":["Types.TimeSheetPt1Msg"],"CheckOutVector":["Types.CheckOutMsg"],"CheckOutDoneVector":["Types.CheckOutDoneMsg"],"WaiverVector":["Types.WaiverMsg"],"WizardVector":["Types.WizardMsg"],"NewMemberVector":["Types.NewMemberMsg"],"HowDidYouHearVector":["Types.HowDidYouHearMsg"],"BuyMembershipVector":["Types.BuyMembershipMsg"],"CheckInVector":["Types.CheckInMsg"],"OldBusinessVector":["Types.OldBusinessMsg"],"CheckInDoneVector":["Types.CheckInDoneMsg"],"PublicHoursVector":["Types.PublicHoursMsg"],"UseBankedHoursVector":["Types.UseBankedHoursMsg"],"TaskListVector":["Types.TaskListMsg"],"NoOp":[],"RfidHelperVector":["Types.RfidHelperMsg"],"WelcomeForRfidVector":["Types.WelcomeForRfidMsg"],"EmailInUseVector":["Types.EmailInUseMsg"],"StartVector":["Types.StartMsg"],"ErrorVector":["Types.ErrorMsg"]}},"Types.EmailInUseMsg":{"args":[],"tags":{"EIU_Segue":["List XisRestApi.Member"]}},"Material.Tooltip.Msg":{"args":[],"tags":{"Enter":["Material.Tooltip.DOMState"],"Leave":[]}},"Dict.NColor":{"args":[],"tags":{"BBlack":[],"Red":[],"NBlack":[],"Black":[]}},"Types.YouCantEnterMsg":{"args":[],"tags":{"AlreadyPaid":["XisRestApi.Member"],"PayNowAtFrontDesk":["XisRestApi.Member"],"YCE_Segue":["XisRestApi.Member"]}},"Types.TaskInfoMsg":{"args":[],"tags":{"TI_Segue":["( XisRestApi.Member, XisRestApi.Task, XisRestApi.Claim )"]}},"Types.WaiverMsg":{"args":[],"tags":{"UpdateSignature":["String"],"ClearSignaturePad":["String"],"ShowSignaturePad":["String"],"GetSignature":[],"WVR_Segue":["( List Int, String, String, String, Bool, String, String )"]}},"Json.Decode.Decoder":{"args":["a"],"tags":{"Decoder":[]}},"Date.Month":{"args":[],"tags":{"Dec":[],"May":[],"Jan":[],"Oct":[],"Jul":[],"Aug":[],"Sep":[],"Nov":[],"Apr":[],"Mar":[],"Feb":[],"Jun":[]}},"Material.Textfield.Msg":{"args":[],"tags":{"Focus":[],"Input":["String"],"Blur":[]}},"Types.CheckInDoneMsg":{"args":[],"tags":{"CID_Segue":["XisRestApi.Member"]}},"Types.CheckInMsg":{"args":[],"tags":{"CI_UpdateMember":["Result.Result String XisRestApi.Member"],"LastNamesStartingWith":["String","Result.Result Http.Error (DjangoRestFramework.PageOf XisRestApi.Member)"],"UsernamesStartingWith":["String","Result.Result Http.Error (DjangoRestFramework.PageOf XisRestApi.Member)"],"UpdateRecentRfidsRead":["Result.Result Http.Error (DjangoRestFramework.PageOf XisRestApi.VisitEvent)"],"CI_UpdateFlexId":["String"],"LastNamesEqualTo":["String","Result.Result Http.Error (DjangoRestFramework.PageOf XisRestApi.Member)"],"UsernamesEqualTo":["String","Result.Result Http.Error (DjangoRestFramework.PageOf XisRestApi.Member)"]}},"XisRestApi.VisitEventReason":{"args":[],"tags":{"VER_PublicAccess":[],"VER_Guest":[],"VER_Volunteer":[],"VER_Other":[],"VER_Curious":[],"VER_Class":[],"VER_Club":[],"VER_Member":[]}},"Types.OldBusinessMsg":{"args":[],"tags":{"OB_NoteRelatedWork":["XisRestApi.Task","XisRestApi.Claim","Result.Result Http.Error XisRestApi.Work"],"OB_SegueA":["Types.SessionType","XisRestApi.Member"],"OB_ToggleItem":["Int"],"OB_NoteRelatedTask":["XisRestApi.Claim","Result.Result Http.Error XisRestApi.Task"],"OB_DeleteSelection":[],"OB_NoteClaimUpdated":["Result.Result Http.Error XisRestApi.Claim"],"OB_WorkingClaimsResult":["Result.Result Http.Error (DjangoRestFramework.PageOf XisRestApi.Claim)"],"OB_NoteWorkDeleted":["Result.Result Http.Error String"],"OB_SegueB":["Types.SessionType","XisRestApi.Member","XisRestApi.Claim"]}},"Material.Layout.Msg":{"args":[],"tags":{"Resize":["Int"],"ToggleDrawer":[],"TransitionEnd":[],"ScrollPane":["Bool","Float"],"Ripple":["Int","Material.Ripple.Msg"],"ScrollTab":["Material.Layout.TabScrollState"],"TransitionHeader":["{ toCompact : Bool, fixedHeader : Bool }"],"NOP":[]}},"Types.Scene":{"args":[],"tags":{"NewMember":[],"BuyMembership":[],"HowDidYouHear":[],"TimeSheetPt1":[],"AuthorizeEntry":[],"PublicHours":[],"Start":[],"EmailInUse":[],"WelcomeForRfid":[],"Error":[],"ReasonForVisit":[],"SignUpDone":[],"CheckInDone":[],"CheckIn":[],"OldBusiness":[],"TimeSheetPt2":[],"CreatingAcct":[],"RfidHelper":[],"TaskList":[],"UseBankedHours":[],"Welcome":[],"NewUser":[],"TimeSheetPt3":[],"CheckOutDone":[],"CheckOut":[],"YouCantEnter":[],"TaskInfo":[],"Waiver":[]}},"Types.UseBankedHoursMsg":{"args":[],"tags":{"UBH_Segue":["XisRestApi.Member"]}},"Types.RfidHelperMsg":{"args":[],"tags":{"RH_MemberPresentResult":["Result.Result Http.Error XisRestApi.VisitEvent"],"RH_KeyDown":["Keyboard.KeyCode"],"RH_MemberListResult":["Result.Result Http.Error (DjangoRestFramework.PageOf XisRestApi.Member)"]}},"Material.Toggles.Msg":{"args":[],"tags":{"Ripple":["Material.Ripple.Msg"],"SetFocus":["Bool"]}},"Types.TaskListMsg":{"args":[],"tags":{"TL_ValidateTaskChoice":[],"TL_Segue":["XisRestApi.Member"],"TL_ToggleTask":["XisRestApi.Task"],"TL_WorkInsertResult":["Result.Result Http.Error XisRestApi.Work"],"TL_TaskListResult":["Result.Result Http.Error (DjangoRestFramework.PageOf XisRestApi.Task)"],"TL_ClaimUpsertResult":["Result.Result Http.Error XisRestApi.Claim"]}},"VirtualDom.Property":{"args":["msg"],"tags":{"Property":[]}},"Http.Error":{"args":[],"tags":{"BadUrl":["String"],"NetworkError":[],"Timeout":[],"BadStatus":["Http.Response String"],"BadPayload":["String","Http.Response String"]}},"Result.Result":{"args":["error","value"],"tags":{"Ok":["value"],"Err":["error"]}},"Types.PublicHoursMsg":{"args":[],"tags":{"PH_Segue":["XisRestApi.Member"]}},"Material.Tabs.Msg":{"args":[],"tags":{"Ripple":["Int","Material.Ripple.Msg"]}},"Material.Menu.Msg":{"args":["m"],"tags":{"Tick":[],"Close":[],"Open":["Material.Menu.Geometry.Geometry"],"Key":["List (Material.Options.Internal.Summary (Material.Menu.ItemConfig m) m)","Int"],"Ripple":["Int","Material.Ripple.Msg"],"Select":["Int","Maybe.Maybe m"],"Click":["Mouse.Position"]}},"Material.Dispatch.Config":{"args":["msg"],"tags":{"Config":["{ decoders : List ( String , ( Json.Decode.Decoder msg, Maybe.Maybe Html.Events.Options ) ) , lift : Maybe.Maybe (Json.Decode.Decoder (List msg) -> Json.Decode.Decoder msg) }"]}},"Types.TimeSheetPt3Msg":{"args":[],"tags":{"TS3_Segue":["Types.SessionType","XisRestApi.Member","Types.TaskClaimWork","Maybe.Maybe String"],"TS3_WorkNoteCreated":["Result.Result Http.Error XisRestApi.WorkNote"],"TS3_WitnessAuthResult":["Result.Result Http.Error XisRestApi.AuthenticationResult"],"TS3_Skipped":[],"TS3_ClaimUpdated":["Result.Result Http.Error XisRestApi.Claim"],"TS3_UpdateWitnessPassword":["String"],"TS3_WorkUpdated":["Result.Result Http.Error XisRestApi.Work"],"TS3_WitnessCredsReady":[],"TS3_UpdateWitnessUsername":["String"],"TS3_NeedWitness":[]}},"XisRestApi.VisitEventType":{"args":[],"tags":{"VET_Departure":[],"VET_Present":[],"VET_Arrival":[]}}},"aliases":{"Material.Button.Msg":{"args":[],"type":"Material.Ripple.Msg"},"Material.Layout.TabScrollState":{"args":[],"type":"{ canScrollLeft : Bool , canScrollRight : Bool , width : Maybe.Maybe Int }"},"XisRestApi.MemberData":{"args":[],"type":"{ email : Maybe.Maybe String , firstName : Maybe.Maybe String , friendlyName : String , isActive : Bool , isCurrentlyPaid : Bool , lastName : Maybe.Maybe String , latestNonfutureMembership : Maybe.Maybe XisRestApi.Membership , userName : String , worker : XisRestApi.Worker }"},"XisRestApi.Member":{"args":[],"type":"DjangoRestFramework.Resource XisRestApi.MemberData"},"Material.Tooltip.DOMState":{"args":[],"type":"{ rect : DOM.Rectangle, offsetWidth : Float, offsetHeight : Float }"},"Html.Attribute":{"args":["msg"],"type":"VirtualDom.Property msg"},"Material.Menu.ItemConfig":{"args":["m"],"type":"{ enabled : Bool, divider : Bool, onSelect : Maybe.Maybe m }"},"Material.Component.Index":{"args":[],"type":"List Int"},"Html.Events.Options":{"args":[],"type":"{ stopPropagation : Bool, preventDefault : Bool }"},"XisRestApi.WorkData":{"args":[],"type":"{ claim : DjangoRestFramework.ResourceUrl , witness : Maybe.Maybe DjangoRestFramework.ResourceUrl , workDate : CalendarDate.CalendarDate , workDuration : Maybe.Maybe Duration.Duration , workStartTime : Maybe.Maybe ClockTime.ClockTime }"},"Http.Response":{"args":["body"],"type":"{ url : String , status : { code : Int, message : String } , headers : Dict.Dict String String , body : body }"},"XisRestApi.Work":{"args":[],"type":"DjangoRestFramework.Resource XisRestApi.WorkData"},"XisRestApi.WorkNoteData":{"args":[],"type":"{ author : Maybe.Maybe DjangoRestFramework.ResourceUrl , content : String , work : DjangoRestFramework.ResourceUrl , whenWritten : PointInTime.PointInTime }"},"XisRestApi.WorkNote":{"args":[],"type":"DjangoRestFramework.Resource XisRestApi.WorkNoteData"},"XisRestApi.TimeBlock":{"args":[],"type":"DjangoRestFramework.Resource XisRestApi.TimeBlockData"},"Material.Ripple.DOMState":{"args":[],"type":"{ rect : DOM.Rectangle , clientX : Maybe.Maybe Float , clientY : Maybe.Maybe Float , touchX : Maybe.Maybe Float , touchY : Maybe.Maybe Float , type_ : String }"},"XisRestApi.TimeBlockData":{"args":[],"type":"{ startTime : ClockTime.ClockTime , duration : Duration.Duration , first : Bool , second : Bool , third : Bool , fourth : Bool , last : Bool , every : Bool , monday : Bool , tuesday : Bool , wednesday : Bool , thursday : Bool , friday : Bool , saturday : Bool , sunday : Bool , types : List String }"},"XisRestApi.VisitEventDataIn":{"args":[],"type":"{ who : XisRestApi.Member , when : PointInTime.PointInTime , eventType : XisRestApi.VisitEventType , reason : Maybe.Maybe XisRestApi.VisitEventReason , method : XisRestApi.VisitEventMethod }"},"Mouse.Position":{"args":[],"type":"{ x : Int, y : Int }"},"ClockTime.ClockTime":{"args":[],"type":"{ hour : Int, minute : Int }"},"PointInTime.PointInTime":{"args":[],"type":"Time.Time"},"XisRestApi.Membership":{"args":[],"type":"DjangoRestFramework.Resource XisRestApi.MembershipData"},"Duration.Duration":{"args":[],"type":"Float"},"Material.Options.Internal.Summary":{"args":["c","m"],"type":"{ classes : List String , css : List ( String, String ) , attrs : List (Html.Attribute m) , internal : List (Html.Attribute m) , dispatch : Material.Dispatch.Config m , config : c }"},"CalendarDate.CalendarDate":{"args":[],"type":"{ year : Int, month : Date.Month, day : Int }"},"XisRestApi.MembershipData":{"args":[],"type":"{ member : String , startDate : CalendarDate.CalendarDate , endDate : CalendarDate.CalendarDate , sale : Maybe.Maybe Int , sale_price : String , ctrlid : String , protected : Bool }"},"XisRestApi.Task":{"args":[],"type":"DjangoRestFramework.Resource XisRestApi.TaskData"},"XisRestApi.TaskData":{"args":[],"type":"{ anybodyIsEligible : Bool , claimSet : List XisRestApi.Claim , creationDate : CalendarDate.CalendarDate , deadline : Maybe.Maybe CalendarDate.CalendarDate , eligibleClaimants : List DjangoRestFramework.ResourceUrl , instructions : String , isFullyClaimed : Bool , maxWork : Duration.Duration , maxWorkers : Int , nameOfLikelyWorker : Maybe.Maybe String , owner : Maybe.Maybe DjangoRestFramework.ResourceUrl , priority : XisRestApi.TaskPriority , reviewer : Maybe.Maybe DjangoRestFramework.ResourceUrl , scheduledDate : CalendarDate.CalendarDate , shortDesc : String , shouldNag : Bool , staffingStatus : XisRestApi.StaffingStatus , status : String , workDuration : Maybe.Maybe Duration.Duration , workStartTime : Maybe.Maybe ClockTime.ClockTime }"},"Keyboard.KeyCode":{"args":[],"type":"Int"},"XisRestApi.DiscoveryMethod":{"args":[],"type":"DjangoRestFramework.Resource XisRestApi.DiscoveryMethodData"},"DjangoRestFramework.Resource":{"args":["a"],"type":"{ id : Int, data : a }"},"XisRestApi.DiscoveryMethodData":{"args":[],"type":"{ name : String, order : Int, visible : Bool }"},"XisRestApi.VisitEvent":{"args":[],"type":"DjangoRestFramework.Resource XisRestApi.VisitEventDataIn"},"Material.Msg":{"args":["m"],"type":"Material.Component.Msg Material.Button.Msg Material.Textfield.Msg (Material.Menu.Msg m) Material.Layout.Msg Material.Toggles.Msg Material.Tooltip.Msg Material.Tabs.Msg (List m)"},"XisRestApi.Worker":{"args":[],"type":"DjangoRestFramework.Resource XisRestApi.WorkerData"},"DjangoRestFramework.ResourceUrl":{"args":[],"type":"String"},"Material.Menu.Geometry.Element":{"args":[],"type":"{ offsetTop : Float , offsetLeft : Float , offsetHeight : Float , bounds : DOM.Rectangle }"},"XisRestApi.WorkerData":{"args":[],"type":"{ member : DjangoRestFramework.ResourceUrl , shouldIncludeAlarms : Bool , shouldNag : Bool , shouldSendStatements : Bool , timeAcctBalance : Maybe.Maybe Int }"},"XisRestApi.AuthenticationResult":{"args":[],"type":"{ isAuthentic : Bool , authenticatedMember : Maybe.Maybe XisRestApi.Member }"},"XisRestApi.TimeBlockType":{"args":[],"type":"DjangoRestFramework.Resource XisRestApi.TimeBlockTypeData"},"XisRestApi.TimeBlockTypeData":{"args":[],"type":"{ name : String, description : String, isDefault : Bool }"},"Types.TaskClaimWork":{"args":[],"type":"{ task : XisRestApi.Task , claim : XisRestApi.Claim , work : XisRestApi.Work }"},"Material.Menu.Geometry.Geometry":{"args":[],"type":"{ button : Material.Menu.Geometry.Element , menu : Material.Menu.Geometry.Element , container : Material.Menu.Geometry.Element , offsetTops : List Float , offsetHeights : List Float }"},"XisRestApi.Claim":{"args":[],"type":"DjangoRestFramework.Resource XisRestApi.ClaimData"},"XisRestApi.ClaimData":{"args":[],"type":"{ claimedDuration : Duration.Duration , claimedStartTime : Maybe.Maybe ClockTime.ClockTime , claimedTask : DjangoRestFramework.ResourceUrl , claimingMember : DjangoRestFramework.ResourceUrl , dateVerified : Maybe.Maybe CalendarDate.CalendarDate , status : XisRestApi.ClaimStatus , workSet : List DjangoRestFramework.ResourceUrl }"},"Time.Time":{"args":[],"type":"Float"},"DjangoRestFramework.PageOf":{"args":["a"],"type":"{ count : Int , next : Maybe.Maybe String , previous : Maybe.Maybe String , results : List a }"},"DOM.Rectangle":{"args":[],"type":"{ top : Float, left : Float, width : Float, height : Float }"}},"message":"Types.Msg"},"versions":{"elm":"0.18.0"}});
}

if (typeof define === "function" && define['amd'])
{
  define([], function() { return Elm; });
  return;
}

if (typeof module === "object")
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);

