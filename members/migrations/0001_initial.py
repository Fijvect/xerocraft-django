# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-04-05 19:55
from __future__ import unicode_literals

import books.models
import datetime
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import members.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('books', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DiscoveryMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of some means by which people learn about our organization.', max_length=30, unique=True)),
                ('order', models.IntegerField(default=None, help_text='These values define the order in which the discovery methods should be presented to users.', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(default=datetime.date.today, help_text='The first day on which the membership is valid.')),
                ('end_date', models.DateField(default=datetime.date.today, help_text='The last day on which the membership is valid.')),
                ('sale_price', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='The price at which this item sold.', max_digits=6)),
                ('max_members', models.IntegerField(blank=True, default=None, help_text='The maximum number of members to which this group membership can be applied. Blank if no limit.', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(books.models.JournalLiner, models.Model),
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nag_re_membership', models.BooleanField(default=False, help_text='If true, person will be nudged (via email) to renew membership.')),
                ('membership_card_md5', models.CharField(blank=True, help_text='MD5 of the member card#. Field will auto-apply MD5 if value is digits.', max_length=32, null=True)),
                ('membership_card_when', models.DateTimeField(blank=True, help_text='Date/time on which the membership card was created.', null=True)),
                ('auth_user', models.OneToOneField(help_text='This must point to the corresponding auth.User object.', on_delete=django.db.models.deletion.CASCADE, related_name='member', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['auth_user__first_name', 'auth_user__last_name'],
            },
        ),
        migrations.CreateModel(
            name='MemberLogin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(default=django.utils.timezone.now, help_text='Date/time member logged in.')),
                ('ip', models.GenericIPAddressField(help_text='IP address from which member logged in.')),
                ('member', models.ForeignKey(blank=True, help_text='The member who logged in.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='members.Member')),
            ],
            options={
                'verbose_name': 'Login',
            },
        ),
        migrations.CreateModel(
            name='MemberNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='For staff. Anything you want to say about the member.', max_length=2048)),
                ('author', models.ForeignKey(blank=True, help_text='The member who wrote this note.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='member_notes_authored', to='members.Member')),
                ('member', models.ForeignKey(help_text='The member to which this note pertains.', on_delete=django.db.models.deletion.CASCADE, to='members.Member')),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(default=datetime.date.today, help_text='The first day on which the membership is valid.')),
                ('end_date', models.DateField(default=datetime.date.today, help_text='The last day on which the membership is valid.')),
                ('sale_price', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='The price at which this item sold.', max_digits=6)),
                ('membership_type', models.CharField(choices=[('R', 'Regular'), ('W', 'Work-Trade'), ('S', 'Scholarship'), ('C', 'Complimentary'), ('G', 'Group'), ('F', 'Family'), ('K', 'Gift Card')], default='R', help_text='The type of membership.', max_length=1)),
                ('ctrlid', models.CharField(default=members.models.next_membership_ctrlid, help_text="Payment processor's id for this membership if it was part of an online purchase.", max_length=40, unique=True)),
                ('protected', models.BooleanField(default=False, help_text='Protect against further auto processing by ETL, etc. Prevents overwrites of manually entered data.')),
                ('when_nudged', models.DateField(blank=True, default=None, help_text='Most recent date on which a renewal reminder was sent.', null=True)),
                ('nudge_count', models.IntegerField(default=0, help_text='The number of times a renewal reminder was sent.')),
                ('group', models.ForeignKey(blank=True, default=None, help_text='The associated group membership, if any. Usually none.', null=True, on_delete=django.db.models.deletion.CASCADE, to='members.GroupMembership')),
                ('member', models.ForeignKey(blank=True, default=None, help_text='The member to whom this membership applies.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='members.Member')),
            ],
            options={
                'ordering': ['start_date'],
            },
            bases=(books.models.JournalLiner, models.Model),
        ),
        migrations.CreateModel(
            name='MembershipGiftCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('redemption_code', models.CharField(help_text='A random string printed on the card, used during card redemption / membership activation.', max_length=20, unique=True)),
                ('date_created', models.DateField(default=django.utils.timezone.now, help_text='The date on which the gift card was created.')),
                ('price', models.DecimalField(decimal_places=2, help_text='The price to buy this gift card.', max_digits=6)),
                ('month_duration', models.IntegerField(blank=True, default=None, help_text='The number of months of membership this gift card grants when redeemed.', null=True, verbose_name='Months')),
                ('day_duration', models.IntegerField(blank=True, default=None, help_text='The number of days of membership this gift card grants when redeemed.', null=True, verbose_name='Days')),
            ],
            options={
                'verbose_name': 'Gift card',
            },
        ),
        migrations.CreateModel(
            name='MembershipGiftCardRedemption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('redemption_date', models.DateField(default=django.utils.timezone.now, help_text='The date on which the gift card was redeemed.')),
                ('card', models.OneToOneField(help_text='The membership gift card that was redeemed.', on_delete=django.db.models.deletion.PROTECT, to='members.MembershipGiftCard')),
            ],
            options={
                'verbose_name': 'Gift card redemption',
            },
        ),
        migrations.CreateModel(
            name='MembershipGiftCardReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sale_price', models.DecimalField(decimal_places=2, help_text='The price at which this item sold.', max_digits=6)),
                ('ctrlid', models.CharField(default=members.models.next_giftcardref_ctrlid, help_text="Payment processor's id if this was part of an online purchase.", max_length=40, unique=True)),
                ('protected', models.BooleanField(default=False, help_text='Protect against further auto processing by ETL, etc. Prevents overwrites of manually entered data.')),
                ('card', models.OneToOneField(blank=True, help_text='The membership gift card being sold.', null=True, on_delete=django.db.models.deletion.PROTECT, to='members.MembershipGiftCard')),
                ('sale', models.ForeignKey(blank=True, help_text='The sale that includes the card as a line item.', null=True, on_delete=django.db.models.deletion.CASCADE, to='books.Sale')),
            ],
            options={
                'verbose_name': 'Membership gift card',
            },
            bases=(models.Model, books.models.JournalLiner),
        ),
        migrations.CreateModel(
            name='Pushover',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text="The member's User Key on Pushover.com", max_length=30)),
                ('who', models.ForeignKey(help_text='The member to whom this tagging info applies.', on_delete=django.db.models.deletion.CASCADE, to='members.Member')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A short name for the tag.', max_length=40, unique=True)),
                ('meaning', models.TextField(help_text="A discussion of the tag's semantics. What does it mean? What does it NOT mean?", max_length=500)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tagging',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_tagged', models.DateTimeField(auto_now_add=True, help_text='Date/time on which the member was tagged.')),
                ('can_tag', models.BooleanField(default=False, help_text='If True, the tagged member can be a authorizing member for this tag.')),
                ('authorizing_member', models.ForeignKey(blank=True, help_text='The member that authorized that the member be tagged.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authorized_taggings', to='members.Member')),
                ('tag', models.ForeignKey(help_text='The tag assigned to the member.', on_delete=django.db.models.deletion.CASCADE, to='members.Tag')),
                ('tagged_member', models.ForeignKey(help_text='The member tagged.', on_delete=django.db.models.deletion.CASCADE, related_name='taggings', to='members.Member')),
            ],
        ),
        migrations.CreateModel(
            name='VisitEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(default=django.utils.timezone.now, help_text='Date/time of visit event.')),
                ('method', models.CharField(choices=[('R', 'RFID'), ('F', 'Front Desk'), ('M', 'Mobile App'), ('U', 'Unknown')], default='U', help_text="The method used to record the visit, such as 'Front Desk' or 'RFID'.", max_length=1)),
                ('event_type', models.CharField(choices=[('A', 'Arrival'), ('P', 'Presence'), ('D', 'Departure')], help_text='The type of visit event.', max_length=1)),
                ('sync1', models.BooleanField(default=False, help_text="True if this event has been sync'ed to 'other system #1'")),
                ('who', models.ForeignKey(help_text="The member who's visiting or visited.", on_delete=django.db.models.deletion.PROTECT, to='members.Member')),
            ],
            options={
                'ordering': ['when'],
            },
        ),
        migrations.CreateModel(
            name='WifiMacDetected',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(default=django.utils.timezone.now, help_text='Date/time when MAC was noticed to be present.')),
                ('mac', models.CharField(help_text='A MAC address as 12 hex digits.', max_length=12)),
            ],
            options={
                'verbose_name_plural': 'Wifi MACs detected',
                'verbose_name': 'Wifi MAC detected',
            },
        ),
        migrations.AddField(
            model_name='membership',
            name='redemption',
            field=models.ForeignKey(blank=True, default=None, help_text='The associated membership gift card redemption, if any. Usually none.', null=True, on_delete=django.db.models.deletion.CASCADE, to='members.MembershipGiftCardRedemption'),
        ),
        migrations.AddField(
            model_name='membership',
            name='sale',
            field=models.ForeignKey(blank=True, default=None, help_text="The sale that includes this line item, if any. E.g. comp memberships don't have a corresponding sale.", null=True, on_delete=django.db.models.deletion.CASCADE, to='books.Sale'),
        ),
        migrations.AddField(
            model_name='member',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='members', through='members.Tagging', to='members.Tag'),
        ),
        migrations.AddField(
            model_name='groupmembership',
            name='group_tag',
            field=models.ForeignKey(help_text='Group membership is initially populated with the set of people having this tag.', on_delete=django.db.models.deletion.PROTECT, to='members.Tag'),
        ),
        migrations.AddField(
            model_name='groupmembership',
            name='invoice',
            field=models.ForeignKey(blank=True, default=None, help_text='The receivable invoice that includes this line item, if any.', null=True, on_delete=django.db.models.deletion.CASCADE, to='books.ReceivableInvoice'),
        ),
        migrations.AddField(
            model_name='groupmembership',
            name='members_covered',
            field=models.ManyToManyField(through='members.Membership', to='members.Member'),
        ),
        migrations.AddField(
            model_name='groupmembership',
            name='sale',
            field=models.ForeignKey(blank=True, default=None, help_text='The sale on which this group membership appears as a line item, if any.', null=True, on_delete=django.db.models.deletion.CASCADE, to='books.Sale'),
        ),
        migrations.AlterUniqueTogether(
            name='visitevent',
            unique_together=set([('who', 'when')]),
        ),
        migrations.AlterUniqueTogether(
            name='tagging',
            unique_together=set([('tagged_member', 'tag')]),
        ),
    ]
