# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-04-05 19:55
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('members', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x', models.FloatField(blank=True, help_text='An ordinate in some coordinate system to help locate the location.', null=True)),
                ('y', models.FloatField(blank=True, help_text='An ordinate in some coordinate system to help locate the location.', null=True)),
                ('z', models.FloatField(blank=True, help_text='An ordinate in some coordinate system to help locate the location.', null=True)),
                ('short_desc', models.CharField(blank=True, help_text='A short description/name for the location.', max_length=40, null=True)),
            ],
            options={
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='ParkingPermit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, help_text='Date/time on which the parking permit was created.')),
                ('short_desc', models.CharField(help_text='A short description of the item parked.', max_length=40)),
                ('ok_to_move', models.BooleanField(default=True, help_text='Is it OK to carefully move the item to another location without involving owner?')),
                ('is_in_inventoried_space', models.BooleanField(default=True, help_text='True if the item is in our inventoried space/building(s). False if the owner has taken it home.')),
                ('approving_member', models.ForeignKey(blank=True, help_text='The paying member who approved the parking of this item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='permits_approved', to='members.Member')),
                ('owner', models.ForeignKey(help_text='The member who owns the parked item.', on_delete=django.db.models.deletion.PROTECT, related_name='permits_owned', to='members.Member')),
            ],
            options={
                'ordering': ['owner', 'pk', 'created'],
            },
        ),
        migrations.CreateModel(
            name='PermitRenewal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateField(help_text='Date on which the parking permit was renewed.')),
                ('permit', models.ForeignKey(help_text='The parking permit that was renewed.', on_delete=django.db.models.deletion.CASCADE, related_name='renewals', to='inventory.ParkingPermit')),
            ],
            options={
                'ordering': ['permit', 'when'],
            },
        ),
        migrations.CreateModel(
            name='PermitScan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(help_text='Date/time on which the parking permit was created.')),
                ('permit', models.ForeignKey(help_text='The parking permit that was scanned', on_delete=django.db.models.deletion.CASCADE, related_name='scans', to='inventory.ParkingPermit')),
                ('where', models.ForeignKey(help_text='The location at which the parking permit was scanned.', on_delete=django.db.models.deletion.PROTECT, to='inventory.Location')),
                ('who', models.ForeignKey(blank=True, help_text='The member who scanned the permit.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='members.Member')),
            ],
            options={
                'ordering': ['where', 'when'],
            },
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the shop.', max_length=40)),
                ('public_info', models.URLField(blank=True, help_text='A link to the public wiki page about this shop.', null=True)),
                ('backup_manager', models.ForeignKey(blank=True, help_text='The member that can carry out manager duties when the manager is not available.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shops_backed', to='members.Member')),
                ('manager', models.ForeignKey(blank=True, help_text='The member that manages the shop.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shops_managed', to='members.Member')),
            ],
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="The resource's name or a short description.", max_length=40)),
                ('public_info', models.URLField(blank=True, help_text='A link to the public wiki page about this tool.', null=True)),
                ('status', models.CharField(choices=[('G', 'Good'), ('D', 'Degraded'), ('U', 'Unusable')], default='G', help_text='Status of the tool. If DEGRADED or UNUSABLE see Tool Issues.', max_length=1)),
                ('location', models.ForeignKey(blank=True, help_text='The location of the resource.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.Location')),
                ('shop', models.ForeignKey(blank=True, help_text='The shop that owns or stocks the resource.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.Shop')),
            ],
        ),
        migrations.CreateModel(
            name='ToolIssue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_desc', models.CharField(help_text='A short description of the issue. In depth description can go in a note.', max_length=40)),
                ('status', models.CharField(choices=[('N', 'New Issue'), ('V', 'Validated'), ('C', 'Closed')], default='N', help_text='Status of the issue. Set to CLOSED if issue is invalid or if the issue has been dealt with.', max_length=1)),
                ('reporter', models.ForeignKey(blank=True, help_text='The member that reported the issue.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='members.Member')),
                ('tool', models.ForeignKey(help_text='The member that reported the issue.', on_delete=django.db.models.deletion.CASCADE, to='inventory.Tool')),
            ],
        ),
        migrations.CreateModel(
            name='ToolIssueNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when_written', models.DateTimeField(auto_now_add=True, help_text='The date and time when the note was written.')),
                ('content', models.TextField(help_text='Anything you want to say about the tool issue.', max_length=2048)),
                ('author', models.ForeignKey(blank=True, help_text='The member who wrote this note.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='members.Member')),
                ('toolIssue', models.ForeignKey(help_text='Any kind of note about the tool issue.', on_delete=django.db.models.deletion.CASCADE, to='inventory.ToolIssue')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='parkingpermit',
            unique_together=set([('owner', 'created', 'short_desc')]),
        ),
    ]
