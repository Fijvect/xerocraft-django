# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-04-05 19:54
from __future__ import unicode_literals

import books.models
import datetime
from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Name of the account.', max_length=40)),
                ('category', models.CharField(choices=[('A', 'Asset'), ('L', 'Liability'), ('Q', 'Equity'), ('R', 'Revenue'), ('X', 'Expense')], help_text='The category of the account.', max_length=1)),
                ('type', models.CharField(choices=[('C', 'Credit'), ('D', 'Debit')], help_text='The type of the account.', max_length=1)),
                ('description', models.TextField(help_text="A discussion of the account's purpose. What is it for? What is it NOT for?", max_length=1024)),
                ('manager', models.ForeignKey(blank=True, help_text='The user who manages this account.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AccountGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Name of the group.', max_length=40)),
                ('description', models.TextField(help_text="The group's purpose, e.g. 'This acct group corresponds to a budget line item.'", max_length=1024)),
                ('accounts', models.ManyToManyField(help_text='The accounts that are part of this group.', to='books.Account')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Short name of the campaign.', max_length=40)),
                ('is_active', models.BooleanField(default=True, help_text='Whether or not this campaign is currently being pursued.')),
                ('target_amount', models.DecimalField(decimal_places=2, help_text='The total amount that needs to be collected in donations.', max_digits=6)),
                ('description', models.TextField(help_text='A description of the campaign and why people should donate to it.', max_length=1024)),
                ('account', models.ForeignKey(help_text='The account used by this campaign.', on_delete=django.db.models.deletion.PROTECT, to='books.Account')),
            ],
        ),
        migrations.CreateModel(
            name='CampaignNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Anything you want to say about the item on which this note appears.', max_length=2048)),
                ('is_public', models.BooleanField(default=False, help_text='Should this note be visible to the public as a campaign update?')),
                ('author', models.ForeignKey(blank=True, help_text='The user who wrote this note.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('campaign', models.ForeignKey(help_text='The campaign to which this public update applies.', on_delete=django.db.models.deletion.CASCADE, to='books.Campaign')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DonatedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, help_text='The value of the item donated.', max_digits=6)),
                ('description', models.TextField(help_text='A description of the item donated.', max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('donation_date', models.DateField(default=datetime.date.today, help_text='The date on which the donation was made. Best guess if exact date not known.')),
                ('donator_name', models.CharField(blank=True, help_text='Name of person who made the donation. Not necessary if account is linked.', max_length=40)),
                ('donator_email', models.EmailField(blank=True, help_text='Email address of person who made the donation.', max_length=40)),
                ('send_receipt', models.BooleanField(default=True, help_text='(Re)send a receipt to the donor. Note: Will send at night.')),
                ('donator_acct', models.ForeignKey(blank=True, help_text="It's preferable, but not necessary, to refer to the donator's account.", null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Physical donation',
            },
        ),
        migrations.CreateModel(
            name='DonationNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Anything you want to say about the item on which this note appears.', max_length=2048)),
                ('author', models.ForeignKey(blank=True, help_text='The user who wrote this note.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('donation', models.ForeignKey(help_text='The donation to which this note applies.', on_delete=django.db.models.deletion.CASCADE, to='books.Donation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of person/organization.', max_length=40)),
                ('email', models.EmailField(blank=True, help_text='Email address of person/organization.', max_length=40)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Non-Member Entity',
                'verbose_name_plural': 'Non-Member Entities',
            },
        ),
        migrations.CreateModel(
            name='EntityNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Anything you want to say about the item on which this note appears.', max_length=2048)),
                ('author', models.ForeignKey(blank=True, help_text='The user who wrote this note.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('entity', models.ForeignKey(help_text='The entity to which the note pertains.', on_delete=django.db.models.deletion.CASCADE, to='books.Entity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExpenseClaim',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frozen_in_journal', models.BooleanField(default=False, help_text='If true, the journal entries for this transaction are frozen and will not be modified.')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The dollar amount for the entire claim.', max_digits=6)),
                ('when_submitted', models.DateField(blank=True, default=None, help_text='The date on which the claim was most recently (re)submitted for reimbursement.', null=True)),
                ('submit', models.BooleanField(default=False, help_text='(Re)submit the claim for processing and reimbursement.')),
                ('donate_reimbursement', models.BooleanField(default=False, help_text='Claimant will not receive a payment. Reimbursement will become a donation.')),
                ('claimant', models.ForeignKey(blank=True, help_text='The member who wrote this note.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExpenseClaimNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Anything you want to say about the item on which this note appears.', max_length=2048)),
                ('author', models.ForeignKey(blank=True, help_text='The user who wrote this note.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('claim', models.ForeignKey(help_text='The claim to which the note pertains.', on_delete=django.db.models.deletion.CASCADE, to='books.ExpenseClaim')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExpenseClaimReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('portion', models.DecimalField(blank=True, decimal_places=2, default=None, help_text="Leave blank unless you're only paying a portion of the claim.", max_digits=6, null=True)),
                ('claim', models.ForeignKey(help_text='The claim that is paid by the expense transaction.', on_delete=django.db.models.deletion.CASCADE, to='books.ExpenseClaim')),
            ],
            bases=(models.Model, books.models.JournalLiner),
        ),
        migrations.CreateModel(
            name='ExpenseLineItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(help_text='A brief description of this line item.', max_length=80)),
                ('expense_date', models.DateField(help_text='The date on which the expense was incurred.')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The dollar amount for this line item BEFORE any discount.', max_digits=6)),
                ('discount', models.DecimalField(decimal_places=2, default=0.0, help_text='Any CHARITABLE discount applied to this purchase.', max_digits=6)),
                ('receipt_num', models.IntegerField(blank=True, help_text='The receipt number assigned by the treasurer and written on the receipt.', null=True)),
                ('account', models.ForeignKey(help_text="The account against which this line item is claimed, e.g. 'Wood Shop', '3D Printers'.", on_delete=django.db.models.deletion.CASCADE, to='books.Account')),
                ('approved_by', models.ForeignKey(blank=True, default=None, help_text='Usually the shop/account manager. Leave blank if not yet approved.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('bought_from', models.ForeignKey(blank=True, default=None, help_text='Who was this purchased from (optional).', null=True, on_delete=django.db.models.deletion.PROTECT, to='books.Entity')),
                ('claim', models.ForeignKey(blank=True, help_text='The claim on which this line item appears.', null=True, on_delete=django.db.models.deletion.CASCADE, to='books.ExpenseClaim')),
            ],
            bases=(models.Model, books.models.JournalLiner),
        ),
        migrations.CreateModel(
            name='ExpenseTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frozen_in_journal', models.BooleanField(default=False, help_text='If true, the journal entries for this transaction are frozen and will not be modified.')),
                ('payment_date', models.DateField(blank=True, default=None, help_text='The date on which the expense was paid (use bank statement date). Blank if not yet paid or statement not yet received. Best guess if paid but exact date not known.', null=True)),
                ('recipient_name', models.CharField(blank=True, help_text="Name of person/org paid. Not req'd if an acct was linked, above.", max_length=40, verbose_name='Name paid')),
                ('recipient_email', models.EmailField(blank=True, help_text='Optional, sometimes useful ', max_length=40, verbose_name='Optional email')),
                ('amount_paid', models.DecimalField(decimal_places=2, help_text='The dollar amount of the payment.', max_digits=6)),
                ('payment_method', models.CharField(choices=[('$', 'Cash'), ('C', 'Check'), ('X', 'Electronic')], default='$', help_text='The payment method used.', max_length=1)),
                ('method_detail', models.CharField(blank=True, help_text='Optional detail specific to the payment method. Check# for check payments.', max_length=40, null=True)),
                ('recipient_acct', models.ForeignKey(blank=True, default=None, help_text='If payment was made to a user, speicfy them here.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User acct paid')),
                ('recipient_entity', models.ForeignKey(blank=True, default=None, help_text='If some outside person/org was paid, specify them here.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='books.Entity', verbose_name='Entity acct paid')),
            ],
        ),
        migrations.CreateModel(
            name='ExpenseTransactionNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Anything you want to say about the item on which this note appears.', max_length=2048)),
                ('author', models.ForeignKey(blank=True, help_text='The user who wrote this note.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('exp', models.ForeignKey(help_text='The expense transaction to which the note pertains.', on_delete=django.db.models.deletion.CASCADE, to='books.ExpenseTransaction')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frozen', models.BooleanField(default=False, help_text="If frozen, this entry (and its lines) won't be deleted/regenerated.")),
                ('source_url', models.URLField(help_text='URL to retrieve the item that gave rise to this journal entry.')),
                ('when', models.DateField(help_text='The date of the transaction.')),
            ],
            options={
                'ordering': ['when'],
            },
        ),
        migrations.CreateModel(
            name='JournalEntryLineItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('>', 'Increase'), ('<', 'Decrease')], help_text='Is the account balance increased or decreased?', max_length=1)),
                ('amount', models.DecimalField(decimal_places=2, help_text='The amount of the increase or decrease (always positive)', max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('account', models.ForeignKey(help_text='The account involved in this line item.', on_delete=django.db.models.deletion.PROTECT, to='books.Account')),
                ('journal_entry', models.ForeignKey(help_text='The journal entry that this line item is part of.', on_delete=django.db.models.deletion.CASCADE, to='books.JournalEntry')),
            ],
        ),
        migrations.CreateModel(
            name='MonetaryDonation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The amount donated.', max_digits=6)),
                ('ctrlid', models.CharField(default=books.models.next_monetarydonation_ctrlid, help_text="Payment processor's id for this donation, if any.", max_length=40, unique=True)),
                ('protected', models.BooleanField(default=False, help_text='Protect against further auto processing by ETL, etc. Prevents overwrites of manually entered data.')),
                ('earmark', models.ForeignKey(blank=True, help_text='The account for which this donation is earmarked.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='books.Account')),
            ],
            bases=(models.Model, books.models.JournalLiner),
        ),
        migrations.CreateModel(
            name='MonetaryDonationReward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the reward.', max_length=40)),
                ('min_donation', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='The minimum donation required to earn this reward.', max_digits=6)),
                ('cost_to_org', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='The cost of this reward to Xerocraft.', max_digits=6)),
                ('fair_mkt_value', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='The value of this reward to the donor, for tax purposes.', max_digits=6)),
                ('description', models.TextField(help_text='Description of the reward.', max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='OtherItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sale_price', models.DecimalField(decimal_places=2, help_text='The UNIT price at which this/these item(s) sold.', max_digits=6)),
                ('qty_sold', models.IntegerField(default=1, help_text='The quantity of the item sold.')),
                ('ctrlid', models.CharField(default=books.models.next_otheritem_ctrlid, help_text="Payment processor's id for this donation, if any.", max_length=40, unique=True)),
                ('protected', models.BooleanField(default=False, help_text='Protect against further auto processing by ETL, etc. Prevents overwrites of manually entered data.')),
            ],
            bases=(models.Model, books.models.JournalLiner),
        ),
        migrations.CreateModel(
            name='OtherItemType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A short name for the item.', max_length=40, unique=True)),
                ('description', models.TextField(help_text='A description of the item.', max_length=1024)),
                ('revenue_acct', models.ForeignKey(blank=True, default=None, help_text='The revenue account associated with items of this type.', null=True, on_delete=django.db.models.deletion.PROTECT, to='books.Account')),
            ],
        ),
        migrations.CreateModel(
            name='PayableInvoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frozen_in_journal', models.BooleanField(default=False, help_text='If true, the journal entries for this transaction are frozen and will not be modified.')),
                ('invoice_date', models.DateField(default=datetime.date.today, help_text='The date of the invoice.')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The dollar amount they invoiced.', max_digits=6)),
                ('description', models.TextField(help_text='Description of goods and/or services we received from them.', max_length=1024)),
                ('entity', models.ForeignKey(blank=True, default=None, help_text='If we owe some outside person/org, specify them here.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='books.Entity')),
                ('user', models.ForeignKey(blank=True, default=None, help_text='If we owe a user, specify them here.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PayableInvoiceLineItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(help_text='A brief description of this line item.', max_length=128)),
                ('delivery_date', models.DateField(help_text='The date on which this line item was delivered.')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The dollar amount for this line item.', max_digits=6)),
                ('account', models.ForeignKey(help_text='The account associated with this line item.', on_delete=django.db.models.deletion.PROTECT, to='books.Account')),
                ('inv', models.ForeignKey(blank=True, help_text='The payable invoice on which this line item appears.', null=True, on_delete=django.db.models.deletion.CASCADE, to='books.PayableInvoice')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, books.models.JournalLiner),
        ),
        migrations.CreateModel(
            name='PayableInvoiceNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Anything you want to say about the item on which this note appears.', max_length=2048)),
                ('author', models.ForeignKey(blank=True, help_text='The user who wrote this note.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('invoice', models.ForeignKey(help_text='The invoice to which the note pertains.', on_delete=django.db.models.deletion.CASCADE, to='books.PayableInvoice')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PayableInvoiceReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('portion', models.DecimalField(blank=True, decimal_places=2, default=None, help_text="Leave blank unless we're only paying a portion of the invoice.", max_digits=6, null=True)),
                ('exp', models.ForeignKey(help_text='The expense transaction by which we pay the invoice.', on_delete=django.db.models.deletion.CASCADE, to='books.ExpenseTransaction')),
                ('invoice', models.ForeignKey(help_text='The invoice that is paid by the expense transaction.', on_delete=django.db.models.deletion.CASCADE, to='books.PayableInvoice')),
            ],
            bases=(models.Model, books.models.JournalLiner),
        ),
        migrations.CreateModel(
            name='ReceivableInvoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frozen_in_journal', models.BooleanField(default=False, help_text='If true, the journal entries for this transaction are frozen and will not be modified.')),
                ('invoice_date', models.DateField(default=datetime.date.today, help_text='The date on which the invoice was created.')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The dollar amount we are invoicing them for.', max_digits=6)),
                ('description', models.TextField(help_text='Description of goods and/or services we delivered to them.', max_length=1024)),
                ('send_invoice', models.BooleanField(default=False, help_text='(Re)send the invoice via email. Note: Will be sent at night.')),
                ('entity', models.ForeignKey(blank=True, default=None, help_text='If some outside person/org owes us, specify them here.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='books.Entity')),
                ('user', models.ForeignKey(blank=True, default=None, help_text='If a user owes us, specify them here.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReceivableInvoiceLineItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(help_text='A brief description of this line item.', max_length=128)),
                ('delivery_date', models.DateField(help_text='The date on which this line item was delivered.')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The dollar amount for this line item.', max_digits=6)),
                ('account', models.ForeignKey(help_text='The account associated with this line item.', on_delete=django.db.models.deletion.PROTECT, to='books.Account')),
                ('inv', models.ForeignKey(blank=True, help_text='The receivable invoice on which this line item appears.', null=True, on_delete=django.db.models.deletion.CASCADE, to='books.ReceivableInvoice')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, books.models.JournalLiner),
        ),
        migrations.CreateModel(
            name='ReceivableInvoiceNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Anything you want to say about the item on which this note appears.', max_length=2048)),
                ('author', models.ForeignKey(blank=True, help_text='The user who wrote this note.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('invoice', models.ForeignKey(help_text='The invoice to which the note pertains.', on_delete=django.db.models.deletion.CASCADE, to='books.ReceivableInvoice')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReceivableInvoiceReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('portion', models.DecimalField(blank=True, decimal_places=2, default=None, help_text="Leave blank unless they're only paying a portion of the invoice.", max_digits=6, null=True)),
                ('invoice', models.ForeignKey(help_text='The invoice that is paid by the income transaction.', on_delete=django.db.models.deletion.CASCADE, to='books.ReceivableInvoice')),
            ],
            bases=(models.Model, books.models.JournalLiner),
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frozen_in_journal', models.BooleanField(default=False, help_text='If true, the journal entries for this transaction are frozen and will not be modified.')),
                ('sale_date', models.DateField(default=datetime.date.today, help_text='The date on which the sale was made. Best guess if exact date not known.')),
                ('deposit_date', models.DateField(blank=True, default=None, help_text='The date on which the income from this sale was (or will be) deposited.', null=True)),
                ('payer_name', models.CharField(blank=True, help_text='Name of person who made the payment. Not necessary if account was linked.', max_length=40)),
                ('payer_email', models.EmailField(blank=True, help_text='Email address of person who made the payment.', max_length=40)),
                ('payment_method', models.CharField(choices=[('$', 'Cash'), ('C', 'Check'), ('S', 'Square'), ('2', '2Checkout'), ('W', 'WePay'), ('P', 'PayPal'), ('G', 'GoFundMe')], default='$', help_text='The payment method used.', max_length=1)),
                ('method_detail', models.CharField(blank=True, help_text='Optional detail specific to the payment method. Check# for check payments.', max_length=40)),
                ('total_paid_by_customer', models.DecimalField(decimal_places=2, help_text='The full amount paid by the person, including payment processing fee IF CUSTOMER PAID IT.', max_digits=6)),
                ('processing_fee', models.DecimalField(decimal_places=2, default=0, help_text="Payment processor's fee, REGARDLESS OF WHO PAID FOR IT. Zero for cash/check.", max_digits=6)),
                ('fee_payer', models.CharField(choices=[('N', 'N/A'), ('C', 'Customer'), ('U', 'Xerocraft')], default='U', help_text='Who paid the processing fee (if any)?', max_length=1)),
                ('send_receipt', models.BooleanField(default=False, help_text='(Re)send a DONATION receipt to the donor. Note: Will send at night.')),
                ('ctrlid', models.CharField(default=books.models.next_sale_ctrlid, help_text="Payment processor's id for this payment.", max_length=40)),
                ('protected', models.BooleanField(default=False, help_text='Protect against further auto processing by ETL, etc. Prevents overwrites of manually enetered data.')),
                ('payer_acct', models.ForeignKey(blank=True, default=None, help_text="It's preferable, but not necessary, to refer to the customer's account.", null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Income transaction',
            },
        ),
        migrations.CreateModel(
            name='SaleNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Anything you want to say about the item on which this note appears.', max_length=2048)),
                ('author', models.ForeignKey(blank=True, help_text='The user who wrote this note.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('sale', models.ForeignKey(help_text='The sale to which the note pertains.', on_delete=django.db.models.deletion.CASCADE, to='books.Sale')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='receivableinvoicereference',
            name='sale',
            field=models.ForeignKey(help_text='The income transaction that pays the invoice.', on_delete=django.db.models.deletion.CASCADE, to='books.Sale'),
        ),
        migrations.AddField(
            model_name='otheritem',
            name='sale',
            field=models.ForeignKey(help_text='The sale for which this is a line item.', on_delete=django.db.models.deletion.CASCADE, to='books.Sale'),
        ),
        migrations.AddField(
            model_name='otheritem',
            name='type',
            field=models.ForeignKey(default=None, help_text='The type of item sold.', on_delete=django.db.models.deletion.PROTECT, to='books.OtherItemType'),
        ),
        migrations.AddField(
            model_name='monetarydonation',
            name='reward',
            field=models.ForeignKey(blank=True, default=None, help_text='The reward given to the donor, if any.', null=True, on_delete=django.db.models.deletion.PROTECT, to='books.MonetaryDonationReward'),
        ),
        migrations.AddField(
            model_name='monetarydonation',
            name='sale',
            field=models.ForeignKey(help_text='The sale that includes this line item.', on_delete=django.db.models.deletion.CASCADE, to='books.Sale'),
        ),
        migrations.AddField(
            model_name='expenselineitem',
            name='exp',
            field=models.ForeignKey(blank=True, help_text='The expense transaction on which this line item appears.', null=True, on_delete=django.db.models.deletion.CASCADE, to='books.ExpenseTransaction'),
        ),
        migrations.AddField(
            model_name='expenseclaimreference',
            name='exp',
            field=models.ForeignKey(help_text='The expense transaction that pays the claim.', on_delete=django.db.models.deletion.CASCADE, to='books.ExpenseTransaction'),
        ),
        migrations.AddField(
            model_name='donateditem',
            name='donation',
            field=models.ForeignKey(help_text='The donation that includes this line item.', on_delete=django.db.models.deletion.CASCADE, to='books.Donation'),
        ),
        migrations.AlterUniqueTogether(
            name='sale',
            unique_together=set([('payment_method', 'ctrlid')]),
        ),
        migrations.AlterUniqueTogether(
            name='expensetransaction',
            unique_together=set([('payment_method', 'method_detail')]),
        ),
    ]
